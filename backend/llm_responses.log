--- New Curriculum Generation ---
Curriculum ID: 8f4a35bc-0cbf-494e-9d4e-662228b1ef1b
Timestamp: 2025-07-01T20:59:36.494323
Raw Response:
```json
{
  "curriculum_title": "RoboHand",
  "curriculum_description": "A 30-day curriculum to design, build, and program a 4-DOF robotic hand from scratch. Max budget: $2000.",
  "days": [
    {
      "day_number": 1,
      "title": "Introduction to Robotic Hands and Kinematics",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Welcome to Day 1! Today, we'll lay the foundational knowledge for our robotic hand project. We will explore what defines a robotic hand, focusing on the crucial concepts of Degrees of Freedom (DOF) and kinematics, which describe how the hand moves."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Define Degrees of Freedom (DOF) and identify them in various robotic systems."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the difference between forward and inverse kinematics."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Analyze existing robotic hand designs to understand common mechanisms."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Degrees of Freedom (DOF)"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A Degree of Freedom is an independent parameter that defines the configuration of a mechanical system. For a robotic hand, each joint that can move independently represents one DOF. Our goal is a 4-DOF hand, which could mean one joint per finger on a four-fingered hand, or multiple joints on fewer fingers. For example, a human finger has 3 DOF (two knuckles and side-to-side motion at the base). A simple 4-DOF hand might have four fingers, each with one joint to curl inwards."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Forward vs. Inverse Kinematics"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Forward Kinematics (FK):"
              },
              {
                "type": "text",
                "text": " If you know the angles of all the joints, where is the fingertip? FK uses the robot's parameters (link lengths, joint angles) to compute the position and orientation of the end-effector (the fingertip). This is relatively straightforward mathematically."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Inverse Kinematics (IK):"
              },
              {
                "type": "text",
                "text": " If you want the fingertip to be at a specific point in space, what angles should the joints be at? IK calculates the required joint angles to place the end-effector at a desired position and orientation. This is much more complex and often has multiple or no solutions."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Consider a single robotic finger with two joints (2-DOF), like your own index finger's main knuckles. "
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "FK Example:"
                      },
                      {
                        "type": "text",
                        "text": " If the base knuckle is at 30 degrees and the middle knuckle is at 45 degrees, you can use trigonometry to calculate exactly where the tip of the finger is located in 2D space."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "IK Example:"
                      },
                      {
                        "type": "text",
                        "text": " If you want the fingertip to touch a button at coordinates (x, y), you must solve a system of equations to find the required angles for the base and middle knuckles to achieve this."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Degrees of Freedom (DOF) count the number of independent movements a robot has."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Forward Kinematics calculates end-effector position from joint angles."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Inverse Kinematics calculates joint angles from a desired end-effector position."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "InMoov: An Open Source 3D Printed Robot Hand",
          "url": "http://inmoov.fr/hand-and-forarm/"
        },
        {
          "title": "What is Degrees of Freedom? - Article by RobotShop",
          "url": "https://www.robotshop.com/community/blog/show/what-is-degrees-of-freedom-dof"
        },
        {
          "title": "Introduction to Robotics: Kinematics (Video)",
          "url": "https://www.youtube.com/watch?v=rA_s42g_5wA"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 2,
      "title": "Actuators: Servos, Steppers, and DC Motors",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Actuators are the 'muscles' of our robot. Today, we'll compare the most common types used in robotics—servo motors, stepper motors, and DC motors—to understand their strengths and weaknesses. We will focus on servo motors as they are the most likely choice for our robotic hand due to their integrated position control."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Differentiate between servo, stepper, and DC motors."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand key servo motor specifications: torque, speed, and voltage."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain how Pulse Width Modulation (PWM) is used to control a servo motor."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Servo Motors:"
              },
              {
                "type": "text",
                "text": " These are DC motors with a built-in feedback controller. You command them to go to a specific angle (e.g., 90 degrees), and the internal circuit drives the motor until a potentiometer confirms it has reached that angle. They are ideal for applications requiring precise angular positioning, like our robot's finger joints. Most hobby servos have a limited range of 180 degrees."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Stepper Motors:"
              },
              {
                "type": "text",
                "text": " These motors move in discrete 'steps'. They offer very precise positioning and high torque at low speeds but require a dedicated driver circuit and consume power even when holding a position. They are better for applications like 3D printers and CNC machines."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "DC Motors:"
              },
              {
                "type": "text",
                "text": " These are the simplest motors. Apply voltage, and they spin. Reversing the polarity reverses the direction. They are great for continuous rotation (like wheels) but have no built-in position control. You would need to add an external encoder for feedback."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Servo Control with PWM"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Servos are controlled by a series of electrical pulses sent through their signal wire. This technique is called Pulse Width Modulation (PWM). The width of the pulse determines the target angle. For a standard servo:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A ~1 millisecond (ms) pulse corresponds to 0 degrees."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A ~1.5 ms pulse corresponds to 90 degrees (the neutral position)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A ~2 ms pulse corresponds to 180 degrees."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "These pulses are typically sent every 20 ms (a frequency of 50 Hz)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Actuators provide movement to the robot."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Servo motors are the best choice for our project due to their built-in positional control."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Key servo specs are torque (strength), speed (how fast it moves), and operating voltage."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Servos are controlled via PWM signals, where the pulse duration dictates the angle."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "How Servo Motors Work - How To Mechatronics",
          "url": "https://howtomechatronics.com/how-it-works/how-servo-motors-work-how-to-control-servos-using-arduino/"
        },
        {
          "title": "Servo vs Stepper vs DC Motor - Article by Arrow",
          "url": "https://www.arrow.com/en/research-and-events/articles/stepper-vs-servo-vs-dc-motors"
        },
        {
          "title": "Understanding PWM - SparkFun",
          "url": "https://learn.sparkfun.com/tutorials/pulse-width-modulation/all"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 3,
      "title": "Microcontrollers: Arduino vs Raspberry Pi",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The microcontroller is the 'brain' of our robot. It will run the code that reads sensors and controls the servo motors. Today we'll compare the two most popular platforms for hobbyist robotics: Arduino and Raspberry Pi. We'll determine which is better suited for controlling the low-level hardware of our robotic hand."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Describe the core difference between a microcontroller (Arduino) and a single-board computer (Raspberry Pi)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify the strengths of Arduino for real-time hardware control."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Select an appropriate Arduino model for controlling at least four servos."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Arduino"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Arduino is a microcontroller platform. It's designed to do one thing very well: execute a single program in a loop to interact with electronic hardware. It excels at real-time tasks like generating precise PWM signals for servos. It has no operating system, so its response is immediate and predictable. It's programmed in a simplified version of C++."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Raspberry Pi"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Raspberry Pi is a single-board computer. It runs a full operating system (a version of Linux) and can multitask, run a desktop, connect to the internet, etc. This makes it incredibly powerful for high-level tasks like computer vision, machine learning, or hosting a web server. However, the OS introduces tiny, unpredictable delays, making it less ideal for precise, real-time hardware timing like servo control (though it is possible)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Which to Choose?"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "For our project, an "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Arduino is the better choice"
              },
              {
                "type": "text",
                "text": " for directly controlling the hand. It provides reliable, real-time control over the servos. An Arduino Uno or Nano is sufficient, but an "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Arduino Mega"
              },
              {
                "type": "text",
                "text": " is a great option as it has many more I/O pins, which gives us flexibility for adding more servos or sensors later."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "In more complex robots, a hybrid approach is common: a Raspberry Pi handles high-level thinking and sends commands to an Arduino, which handles the low-level motor control."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Arduino is a microcontroller, ideal for real-time hardware control."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Raspberry Pi is a single-board computer, better for complex computation and tasks requiring an OS."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We will use an Arduino (Mega recommended) for its reliability in controlling our servos."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino vs. Raspberry Pi - SparkFun",
          "url": "https://learn.sparkfun.com/tutorials/arduino-vs-raspberry-pi"
        },
        {
          "title": "Official Arduino Website",
          "url": "https://www.arduino.cc/"
        },
        {
          "title": "Getting Started with Arduino (Video Series)",
          "url": "https://www.youtube.com/playlist?list=PLGs0VKk2DiYw-L-RibTTcv87lAT-A4s_A"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 4,
      "title": "Introduction to CAD for Robotics",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today we move from the conceptual to the physical design. Computer-Aided Design (CAD) software allows us to create precise 3D models of our robotic hand before we build anything. This is a critical step for ensuring parts fit together, planning mechanisms, and preparing for fabrication (like 3D printing)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the role of CAD in the robotics design process."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Compare popular CAD software options like Fusion 360 and Onshape."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Learn the basic CAD workflow: Sketch -> Extrude -> Assemble."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Parametric Modeling"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Modern CAD programs use parametric modeling. This means your design is driven by parameters (like dimensions, constraints, and relationships). If you need to change the length of a finger, you just change one number (the 'length' parameter), and the entire model updates automatically. This is incredibly powerful for iterating on designs."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "CAD Software Options"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Autodesk Fusion 360:"
              },
              {
                "type": "text",
                "text": " A very powerful, professional-grade tool that is free for hobbyists and students. It's a desktop application with cloud integration. This is our recommended tool."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Onshape:"
              },
              {
                "type": "text",
                "text": " A fully browser-based CAD tool, also very powerful and with a free plan for public projects. Great if you can't install software or use different computers."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Tinkercad:"
              },
              {
                "type": "text",
                "text": " A very simple, browser-based tool. It's great for absolute beginners but lacks the parametric features needed for a complex project like this."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Basic Workflow"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Sketch:"
                      },
                      {
                        "type": "text",
                        "text": " Create a 2D drawing on a plane. You use tools like lines, circles, and rectangles, and add dimensions and constraints (e.g., 'this line is 50mm long', 'these two lines are parallel')."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Extrude/Revolve:"
                      },
                      {
                        "type": "text",
                        "text": " Turn your 2D sketch into a 3D object by pulling it out (extrude) or spinning it around an axis (revolve)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Assemble:"
                      },
                      {
                        "type":="text",
                        "text": " Create multiple parts (components) and bring them together in an assembly. You use 'joints' to define how they move relative to each other (e.g., 'this pin rotates inside this hole')."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "CAD is essential for designing and testing mechanical parts virtually."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We will use a parametric modeler like Fusion 360 (recommended) or Onshape."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The basic process involves creating 2D sketches and turning them into 3D bodies."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Fusion 360 for Beginners (Lars Christensen)",
          "url": "https://www.youtube.com/watch?v=A5bc9c3S12g"
        },
        {
          "title": "Onshape Official Tutorials",
          "url": "https://learn.onshape.com/"
        },
        {
          "title": "Why Parametric CAD is Awesome - Article",
          "url": "https://www.scan2cad.com/cad/parametric-modeling/"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 5,
      "title": "CAD Practice: Designing a Single Finger Joint",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Theory is good, but practice is better. Today, we'll get our hands dirty in your chosen CAD software (Fusion 360 or Onshape). Our goal is to model a simple, single-joint finger. This will involve creating two separate parts (phalanges) and then joining them in an assembly to create a working knuckle."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a new component in your CAD software."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Design a 3D part from a 2D sketch using the Extrude tool."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the 'Revolute' joint to connect two components in an assembly."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Verify the joint's motion in the CAD environment."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Components vs. Bodies:"
              },
              {
                "type": "text",
                "text": " A 'body' is a single, continuous 3D shape. A 'component' is a container for one or more bodies that represents a real-world part. Components can be moved and jointed together. It's best practice to always create a new component for each distinct part of your design (e.g., 'Phalange 1' and 'Phalange 2' should be separate components)."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Joints:"
              },
              {
                "type": "text",
                "text": " Joints define the motion between components. A 'Rigid' joint locks them together. A 'Revolute' joint allows one to rotate around a specific axis relative to the other (like a hinge). A 'Slider' joint allows linear motion. We will use a Revolute joint for our knuckle."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Example Workflow"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a new component named 'BasePhalange'."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Sketch a simple rectangular profile for the finger segment. Add a circular hole at one end for the joint."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Extrude the sketch to give it thickness (e.g., 10mm)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a second component named 'TipPhalange' and repeat the process, but design the joint end to fit into the base phalange."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type":="paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "In the main assembly, use the 'Joint' tool. Select 'Revolute' as the type."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Select the center of the circular hole on each component as the joint origin. The parts should snap together."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Click and drag one of the components. It should now pivot realistically."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Practical CAD skills are built by doing. Today was the first step."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Organize designs using components for each physical part."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use joints, specifically the 'Revolute' joint, to simulate mechanical motion."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Fusion 360 Tutorial: Assemblies and Joints",
          "url": "https://www.youtube.com/watch?v=d_3k_drN9sE"
        },
        {
          "title": "Onshape Assembly Tutorial",
          "url": "https://learn.onshape.com/learn/course/onshape-assemblies/creating-onshape-assemblies/understanding-mate-connectors"
        },
        {
          "title": "Learn Fusion 360 in 30 Days for Complete Beginners (Product Design Online)",
          "url": "https://www.youtube.com/playlist?list=PLrZ2zKOtC_-DR2ZkMaK3YthYLErPxCnT-"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 6,
      "title": "Planning the 4-DOF Hand: Sketching and Component Selection",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "With the fundamentals covered, it's time to plan our specific robotic hand. This involves high-level design choices, selecting the actual electronic components we'll buy, and creating a preliminary Bill of Materials (BOM). This planning phase is crucial for staying on budget and ensuring all our parts will work together."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Decide on a mechanical design for the 4-DOF hand (e.g., four 1-DOF fingers)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Select specific models for your servos and microcontroller."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a preliminary Bill of Materials (BOM) with estimated costs."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Design Configuration"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "How will we use our 4 DOFs? The simplest and most common approach for a first hand is "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "four fingers, each with one DOF"
              },
              {
                "type": "text",
                "text": ". This means each finger can bend at a single joint, controlled by one servo. This allows for effective grasping of many objects. A thumb could be added as a fifth, non-actuated (static) part or could be one of the four moving fingers."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Component Selection"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Servos:"
                      },
                      {
                        "type": "text",
                        "text": " We need four. A standard-size servo like the MG996R is a good, budget-friendly choice with metal gears and decent torque. Look for torque ratings around 9-10 kg-cm."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Microcontroller:"
                      },
                      {
                        "type": "text",
                        "text": " An Arduino Mega 2560 is recommended for its plentiful pins and memory."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Power Supply:"
                      },
                      {
                        "type": "text",
                        "text": " Servos draw a lot of current. You CANNOT power them from the Arduino's 5V pin. You need an external power supply. A 5V or 6V supply capable of providing at least 4-5 Amps is a safe bet (each servo can draw ~1A when stalled)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Other:"
                      },
                      {
                        "type": "text",
                        "text": " 3D printer filament (PLA or PETG), wires, screws, breadboard, etc."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A good plan saves time and money later."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We've decided on a four-finger, 4-DOF design."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Key components are selected: MG996R servos, Arduino Mega, and a robust external power supply."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type":="text",
                        "text": "The next step is to formalize this plan in our first project."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "MG996R Servo Datasheet/Specs",
          "url": "https://www.electronicoscaldas.com/datasheet/MG996R_Tower-Pro.pdf"
        },
        {
          "title": "Choosing a Power Supply for your Project - Adafruit",
          "url": "https://learn.adafruit.com/power-supplies"
        },
        {
          "title": "How to Create a Bill of Materials (BOM) - Article",
          "url": "https://www.autodesk.com/products/fusion-360/blog/how-to-create-a-bill-of-materials-bom/"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 7,
      "title": "Project 1: Conceptual Design and Bill of Materials",
      "is_project_day": true,
      "project_data": {
        "title": "Project 1: Conceptual Design and Bill of Materials",
        "description": "Formalize the design plan for your 4-DOF robotic hand. This project involves creating conceptual sketches, selecting all necessary components, and compiling a detailed Bill of Materials (BOM) with suppliers and estimated costs, ensuring it stays within the overall $2000 budget.",
        "objectives": [
          "Create a set of annotated sketches showing the proposed hand design.",
          "Finalize the choice of actuators, microcontroller, and power system.",
          "Compile a comprehensive Bill of Materials in a spreadsheet.",
          "Research suppliers and calculate the total estimated cost for all parts."
        ],
        "requirements": [
          "A spreadsheet program (Google Sheets, Excel).",
          "Access to online electronics retailers (e.g., SparkFun, Adafruit, Amazon, Digi-Key) for research.",
          "Drawing tools (can be digital or physical pen and paper)."
        ],
        "deliverables": [
          "A PDF document containing at least two annotated sketches of the hand design (e.g., a top-down view and a side view showing the tendon mechanism).",
          "A spreadsheet file for the Bill of Materials, including: Item Name, Model/Part Number, Quantity, Supplier (with URL), Price per Unit, and Total Price."
        ],
        "evaluation_criteria": [
          "Clarity and feasibility of the sketched design.",
          "Completeness and organization of the Bill of Materials.",
          "Appropriateness of selected components for the project goals.",
          "Total cost estimate is comprehensive and within the project budget."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This first project is all about planning. By creating a formal design document and a Bill of Materials (BOM), you are creating the blueprint for the rest of the course. This step ensures that you have thought through the entire project, from mechanics to electronics, and have a clear plan for acquiring the necessary parts while staying on budget."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Translate your ideas into clear, annotated sketches."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Practice research skills by finding suitable components and pricing."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a professional-quality BOM, a key skill in engineering."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Getting Started"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Sketching:"
                      },
                      {
                        "type": "text",
                        "text": " Start by drawing your hand. How will the fingers attach to the palm? Where will the servos be located? How will the servos connect to the fingers (e.g., with tendons like fishing line)? Add notes to your sketches to explain these details."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "BOM Creation:"
                      },
                      {
                        "type": "text",
                        "text": " Open a spreadsheet. Create columns for Item, Quantity, Supplier, etc. Start with the big items: Microcontroller, Servos, Power Supply. Then add the smaller items: filament, screws, nuts, wires, breadboard, fishing line (for tendons), etc. Be thorough!"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Research:"
                      },
                      {
                        "type": "text",
                        "text": " Use the component recommendations from Day 6 as a starting point. Search online stores to find them or suitable alternatives. Copy the links and prices into your BOM. Don't forget to account for shipping costs if applicable."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This project solidifies the foundation of your robotic hand. A good plan now will prevent major headaches later. Take your time to create a design you are excited to build and a BOM that is realistic and complete."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Google Sheets (Free Spreadsheet Software)",
          "url": "https://www.google.com/sheets/about/"
        },
        {
          "title": "Digi-Key Component Search",
          "url": "https://www.digikey.com/"
        },
        {
          "title": "Example Robotics Project BOM",
          "url": "https://static.roland.com/assets/images/support/knowledge_base/d201804001/BOM_Sample.pdf"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 8,
      "title": "Advanced CAD: Designing the Palm and Finger Assembly",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Now that we have a plan, let's bring it to life in CAD. Today, we'll expand on our single-joint model to design the full finger and the palm that will house our servos and support the fingers. This involves creating more complex shapes and thinking about how all the parts will physically connect."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Model a multi-part finger assembly in CAD."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Design a palm structure that can mount both the fingers and servos."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the 'Mirror' or 'Pattern' tool to efficiently create multiple identical parts."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Top-Down vs. Bottom-Up Assembly:"
              },
              {
                "type": "text",
                "text": " 'Bottom-Up' is what we did on Day 5: design parts in isolation, then put them together. 'Top-Down' is designing parts within the context of the assembly, using the geometry of one part to define another. For the palm and fingers, a mix is good. Design a finger, then design the palm around where the finger needs to mount."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Mounting Features:"
              },
              {
                "type": "text",
                "text": " You need to design features for components to attach. For servos, this means creating cutouts that match their dimensions and holes for their mounting screws. You'll need to find a datasheet for your chosen servo to get these exact dimensions."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Pattern Tools:"
              },
              {
                "type": "text",
                "text": " Don't design four fingers from scratch! Design one perfect finger component. Then, in your assembly, use the 'Rectangular Pattern' or 'Circular Pattern' tool to create three more copies, perfectly spaced."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Today's goal is to model the main mechanical components: fingers and palm."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Remember to design mounting points for your real-world components (servos, screws)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use efficiency tools like 'Pattern' to save time and ensure consistency."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Fusion 360 Top-Down Assembly Tutorial",
          "url": "https://www.youtube.com/watch?v=C_7_3GbhL6U"
        },
        {
          "title": "GrabCAD: A Library of CAD Models (search for your servo model)",
          "url": "https://grabcad.com/library"
        },
        {
          "title": "Using Pattern Tools in Fusion 360",
          "url": "https://help.autodesk.com/view/fusion360/ENU/?guid=GUID-E5B37841-5246-454E-A349-FB653C53B433"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 9,
      "title": "Tendon-Driven Mechanisms vs. Direct Drive",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "How do we get the power from the servo to the fingertip? There are two main approaches: direct drive and tendon-driven. Today we'll explore these mechanisms, focusing on the tendon-driven approach, which is more common in anthropomorphic hands and is the method we'll use."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Compare and contrast direct drive and tendon-driven actuation."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the benefits of using a tendon-driven system for a robotic hand."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify key design considerations for a tendon system (e.g., routing, tensioning)."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Direct Drive"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type":="text",
                "text": "In a direct drive system, the actuator is located directly at the joint it controls. This is simple and provides very direct, backlash-free control. However, it means placing a bulky, heavy motor at each joint, which is often not feasible for a compact, lightweight finger."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Tendon-Driven Mechanism"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This approach mimics biology. The actuators (servos) are located remotely (in the palm or forearm), and they pull on a high-strength cable or 'tendon' (like fishing line or braided cord) that is routed through the finger. Pulling the tendon causes the joint to bend. This allows the fingers to be very lightweight and slim, while the heavy motors are kept in a central location."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Design Considerations for Tendons"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Routing:"
                      },
                      {
                        "type": "text",
                        "text": " The path of the tendon must be carefully designed to prevent snagging and to provide the desired motion. You'll need to model channels or eyelets in your CAD parts for the tendon to pass through."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Return Force:"
                      },
                      {
                        "type": "text",
                        "text": " Pulling a tendon closes the finger, but what opens it? You can use a second 'extensor' tendon, or more simply, use an elastic cord on the back of the finger to pull it back open when the main tendon is released."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Tensioning:"
                      },
                      {
                        "type": "text",
                        "text": " The tendon needs to be properly tensioned. Too loose, and you'll have sloppy motion. Too tight, and you'll stall the servo. Your design should include a way to adjust the tension."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We will use a tendon-driven mechanism to actuate our fingers."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "This keeps the fingers light and moves the heavy servos to the palm."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Our CAD models must include features for routing the tendons and a plan for returning the finger to an open state."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Tendon-based Transmission Systems for Robots - A Review",
          "url": "https://www.researchgate.net/publication/262234035_Tendon-based_Transmission_Systems_for_Robots_A_Review"
        },
        {
          "title": "James Bruton's OpenDog Project (Excellent examples of tendon mechanisms)",
          "url": "https://www.youtube.com/watch?v=nLu5o_H_Wso"
        },
        {
          "title": "Braided Fishing Line on Amazon (Example Tendon Material)",
          "url": "https://www.amazon.com/s?k=braided+fishing+line"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 10,
      "title": "Introduction to 3D Printing for Prototyping",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "3D printing, or additive manufacturing, is the process we'll use to turn our digital CAD models into physical parts. Today, we'll learn about the most common type of 3D printing (FDM), the software used to prepare models for printing (slicers), and the common materials we can use."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain the basics of Fused Deposition Modeling (FDM) 3D printing."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the role of a slicer program and its key settings (layer height, infill, supports)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Compare common 3D printing filaments: PLA, PETG, and ABS."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "FDM Printing"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "FDM printers work by melting a plastic filament and extruding it through a nozzle, layer by layer, to build up an object. It's like a computer-controlled hot glue gun. This technology is affordable, fast, and perfect for creating functional prototypes and parts for projects like ours."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The Slicer"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "You can't send a CAD file (like .f3d or .step) directly to a 3D printer. First, you export your model as a mesh file (usually .STL or .3MF). Then, you open this file in a 'slicer' program (like PrusaSlicer, Cura, or Bambu Studio). The slicer 'slices' the model into hundreds of layers and generates the G-code, which is the line-by-line set of instructions the printer follows."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Key Slicer Settings:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "italic"
                          }
                        ],
                        "text": "Layer Height:"
                      },
                      {
                        "type": "text",
                        "text": " Thinner layers = higher quality, slower print. Thicker layers = lower quality, faster print. 0.2mm is a good standard."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "italic"
                          }
                        ],
                        "text": "Infill:"
                      },
                      {
                        "type": "text",
                        "text": " The internal structure of the part. 15-25% infill is usually strong enough for robotic parts."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "italic"
                          }
                        ],
                        "text": "Supports:"
                      },
                      {
                        "type": "text",
                        "text": " The printer can't print in mid-air. For parts with steep overhangs, the slicer generates temporary support structures that you break off after the print is finished."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Materials"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "PLA:"
              },
              {
                "type": "text",
                "text": " Easy to print, rigid, and comes in many colors. Great for beginners and general prototyping. Can be brittle."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "PETG:"
              },
              {
                "type": "text",
                "text": " Stronger and more durable than PLA, with better temperature resistance. Slightly more difficult to print. "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "This is the recommended material for our final hand parts."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type":="text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "ABS:"
              },
              {
                "type": "text",
                "text": " Very strong and temperature resistant (what LEGOs are made of), but difficult to print as it warps easily and releases fumes. Requires a heated enclosure."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We'll use FDM 3D printing to fabricate our parts."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "CAD models are exported as STL files and prepared in a slicer program."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Key settings like layer height, infill, and supports affect print quality and strength."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "PETG is the recommended material for its strength and durability."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "3D Printing Guide by All3DP",
          "url": "https://all3dp.com/1/3d-printing-basics-for-beginners-what-is-3d-printing/"
        },
        {
          "title": "PrusaSlicer (Free Slicer Software)",
          "url": "https://www.prusa3d.com/page/prusaslicer_424/"
        },
        {
          "title": "PLA vs PETG vs ABS Filament Guide - MatterHackers",
          "url": "https://www.matterhackers.com/news/filament-comparison-pla-vs-abs-vs-petg"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 11,
      "title": "Electronics I: Powering Servos and Voltage Regulation",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A common beginner mistake is trying to power motors directly from the microcontroller. This can damage the board. Today, we'll learn the right way to power our servos using an external power supply and understand why this is so critical. We will also look at voltage regulation to ensure all components get the correct voltage."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain why servos need an external power supply."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Calculate the total current requirement for the system."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Draw a circuit diagram for connecting a servo, Arduino, and external power supply."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Current Draw"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "An Arduino's 5V pin can only supply a very small amount of current (around 400-500mA total). A single MG996R servo can draw over 1A (1000mA) when under load or stalled. Trying to power even one servo from the Arduino will cause the Arduino's voltage to drop, leading to resets and unpredictable behavior, and could permanently damage the board's voltage regulator."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The Correct Wiring"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The key is to "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "share a common ground"
              },
              {
                "type": "text",
                "text": ". Your external power supply will power the servos, and your Arduino will be powered separately (e.g., via USB). The grounds of both the Arduino and the external power supply MUST be connected."
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Servo Signal Pin (usually orange or yellow):"
                      },
                      {
                        "type": "text",
                        "text": " Connects to a PWM pin on the Arduino."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Servo Power Pin (usually red):"
                      },
                      {
                        "type": "text",
                        "text": " Connects to the Positive (+) terminal of your external 5V/6V power supply."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Servo Ground Pin (usually brown or black):"
                      },
                      {
                        "type": "text",
                        "text": " Connects to the Ground (-) terminal of your external power supply AND a GND pin on the Arduino."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Voltage Regulation"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "If your power source is higher than the required voltage (e.g., using a 12V battery), you'll need a voltage regulator to step it down to the 5V or 6V needed by the servos. A 'buck converter' is an efficient type of voltage regulator perfect for this job. For our project, it's simplest to buy a power supply that outputs the correct voltage directly."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Never power motors or servos directly from an Arduino's 5V pin."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use an external power supply that can meet the total current demand of all servos."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Always connect the ground of the external supply to the ground of the Arduino."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Connecting a Servo to an Arduino (Official Guide)",
          "url": "https://docs.arduino.cc/learn/electronics/servo-motors"
        },
        {
          "title": "The Importance of a Common Ground - Bald Engineer",
          "url": "https://www.baldengineer.com/common-ground-and-why-you-need-one.html"
        },
        {
          "title": "What is a Buck Converter? - All About Circuits",
          "url": "https://www.allaboutcircuits.com/technical-articles/what-is-a-buck-converter-introduction-to-the-step-down-regulator/"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 12,
      "title": "Electronics II: Servo Control with Arduino",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Now that we know how to wire our servos safely, let's write the code to control them. We will use the Arduino IDE and the standard Servo library, which makes controlling servos incredibly easy. We'll write a simple sketch to move a single servo to different positions."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Set up the Arduino IDE and install the Servo library."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write an Arduino sketch to sweep a servo back and forth."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the key functions: `attach()`, `write()`, and `detach()`."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The Arduino Servo Library"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This built-in library handles all the complex PWM timing for you. You simply tell it which pin the servo is on and what angle you want it to go to."
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "#include <Servo.h>"
                      },
                      {
                        "type": "text",
                        "text": " - Includes the library in your sketch."
                      }
                    ]
                  }
                ]
              },
              {
                "type":="listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "Servo myServo;"
                      },
                      {
                        "type": "text",
                        "text": " - Creates a servo object."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "myServo.attach(9);"
                      },
                      {
                        "type": "text",
                        "text": " - Attaches the servo object to a physical pin (pin 9 in this case). Must be a PWM pin."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "myServo.write(90);"
                      },
                      {
                        "type": "text",
                        "text": " - Commands the servo to move to a 90-degree angle."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Example Code"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "cpp"
            },
            "content": [
              {
                "type": "text",
                "text": "#include <Servo.h>\n\nServo fingerServo;  // create servo object to control a servo\n\nvoid setup() {\n  fingerServo.attach(9);  // attaches the servo on pin 9 to the servo object\n}\n\nvoid loop() {\n  // Sweep from 0 to 180 degrees\n  for (int pos = 0; pos <= 180; pos += 1) { \n    fingerServo.write(pos);\n    delay(15); // waits 15ms for the servo to reach the position\n  }\n\n  // Sweep from 180 to 0 degrees\n  for (int pos = 180; pos >= 0; pos -= 1) {\n    fingerServo.write(pos);\n    delay(15);\n  }\n}"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The Arduino Servo library simplifies servo control."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The main steps are to include the library, create a servo object, attach it to a pin, and use `write()` to set its position."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "You should now be able to control a servo using your Arduino."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino Servo Library Reference",
          "url": "https://www.arduino.cc/reference/en/libraries/servo/"
        },
        {
          "title": "Arduino PWM Pins Explained",
          "url": "https://docs.arduino.cc/learn/built-in-libraries/pulse-width-modulation"
        },
        {
          "title": "Top 5 Arduino Servo Projects (Video)",
          "url": "https://www.youtube.com/watch?v=J29Qp4rso8U"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 13,
      "title": "Reading Sensors: Potentiometers & Flex Sensors",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Controlling a hand is one thing, but how can the hand sense its own position or the world around it? Today, we'll look at two simple analog sensors: potentiometers, which can be used for joint position feedback, and flex sensors, which can measure bending. This introduces the concept of a 'closed-loop' system."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain how analog sensors work with an Arduino."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Read data from a potentiometer using `analogRead()`."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the `map()` function to scale sensor values to control a servo."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Analog Sensors & `analogRead()`:"
              },
              {
                "type": "text",
                "text": " Unlike digital signals (HIGH/LOW), analog signals can have any value within a range. A potentiometer is a variable resistor; as you turn the knob, its resistance changes. An Arduino's analog input pins can read this changing voltage. The `analogRead()` function returns a value from 0 to 1023, representing a voltage from 0V to 5V."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Flex Sensors:"
              },
              {
                "type": "text",
                "text": " These are special resistors that change their resistance value when bent. They can be attached to a finger to measure how much it's flexing, providing feedback on the joint angle."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The `map()` function:"
              },
              {
                "type": "text",
                "text": " This is a very useful function. It re-maps a number from one range to another. For example, we can map the analog input range (0-1023) to the servo output range (0-180). `map(value, fromLow, fromHigh, toLow, toHigh)`."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Example: Knob Control"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "cpp"
            },
            "content": [
              {
                "type": "text",
                "text": "#include <Servo.h>\n\nServo myServo;\nint const potPin = A0; // Potentiometer connected to Analog Pin 0\nint potVal;\nint angle;\n\nvoid setup() {\n  myServo.attach(9);\n}\n\nvoid loop() {\n  potVal = analogRead(potPin); // reads the value of the potentiometer (value between 0 and 1023)\n  angle = map(potVal, 0, 1023, 0, 180); // scale it to use it with the servo (value between 0 and 180)\n  myServo.write(angle);\n  delay(15);\n}"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Sensors provide feedback, allowing for more intelligent control."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `analogRead()` to get input from sensors like potentiometers and flex sensors."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The `map()` function is perfect for converting sensor readings into servo commands."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino Analog Read Tutorial",
          "url": "https://www.arduino.cc/reference/en/language/functions/analog-io/analogread/"
        },
        {
          "title": "Arduino map() Function Reference",
          "url": "https://www.arduino.cc/reference/en/language/functions/math/map/"
        },
        {
          "title": "Flex Sensor Hookup Guide - SparkFun",
          "url": "https://learn.sparkfun.com/tutorials/flex-sensor-hookup-guide"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 14,
      "title": "Finalizing CAD Models and Preparing for Print",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type":="heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This is our final design day before we start building. We'll review our CAD models, make any necessary adjustments, and ensure they are 'printable'. This includes checking for tolerances, adding features for assembly (like screw holes), and exporting the models as STL files for the slicer."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the concept of tolerance in 3D printed parts."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Add fillets and chamfers to improve strength and printability."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Export components from CAD as STL files."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Tolerances:"
              },
              {
                "type": "text",
                "text": " 3D prints aren't perfectly accurate. If you design a 5mm peg to fit in a 5mm hole, it won't fit. You need to add tolerance. A good starting point for FDM printing is to make the hole slightly larger, for example, 5.2mm or 5.3mm. You may need to print small test pieces to dial in the perfect tolerance for your printer."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Fillets and Chamfers:"
              },
              {
                "type": "text",
                "text": " These are tools in your CAD software. A 'fillet' rounds a sharp edge, while a 'chamfer' cuts it at an angle. Adding a small fillet to inside corners can significantly increase the strength of a part. Adding a chamfer to the bottom edge of a print can help reduce 'elephant's foot' (where the first layer squishes out) and improve bed adhesion."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Exporting for Slicing:"
              },
              {
                "type": "text",
                "text": " In Fusion 360, you can right-click on a component in the browser tree and select 'Save as Mesh'. Choose the '3MF' or 'STL' format. '3MF' is more modern, but 'STL' is universally supported. Ensure the refinement is set to 'High' for a smooth model."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Final Checklist"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Are all moving parts properly toleranced?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Are there holes for all necessary screws and wires?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Are there channels for the tendons to run through?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Have you considered the orientation the part will be printed in to maximize strength?"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A final design review is critical before fabrication."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Pay close attention to tolerances for parts that need to fit together."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Export each component as a separate STL file, ready for the next project."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Designing for 3D Printing: Tolerances - Hubs",
          "url": "https://www.hubs.com/knowledge-base/how-design-parts-3d-printing/"
        },
        {
          "title": "Fillets and Chamfers in Fusion 360",
          "url": "https://www.youtube.com/watch?v=hGIeQ7-d3J4"
        },
        {
          "title": "How to Export STL files from Fusion 360",
          "url": "https://knowledge.autodesk.com/support/fusion-360/learn-explore/caas/sfdcarticles/sfdcarticles/How-to-export-an-STL-file-from-Fusion-360.html"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 15,
      "title": "Project 2: 3D Print and Assemble a Single Finger",
      "is_project_day": true,
      "project_data": {
        "title": "Project 2: 3D Print and Assemble a Single Finger",
        "description": "Translate your digital design into a physical, working prototype. This project involves slicing your CAD models, 3D printing the parts for a single finger, and assembling the mechanical system. You will then test its movement manually.",
        "objectives": [
          "Successfully slice your finger component models using a slicer program.",
          "3D print the phalanges and any necessary joint pins.",
          "Clean up and post-process the printed parts.",
          "Assemble the finger and test its range of motion by hand."
        ],
        "requirements": [
          "Access to a 3D printer (personal, library, or makerspace).",
          "3D printing filament (PLA is fine for this prototype, PETG recommended).",
          "Slicer software (PrusaSlicer, Cura, etc.).",
          "Basic tools: flush cutters, small files or sandpaper for cleanup.",
          "Your exported STL files from the previous day."
        ],
        "deliverables": [
          "A short video (15-30 seconds) demonstrating the assembled finger and its smooth mechanical movement when manipulated by hand.",
          "A photograph of your printed parts laid out before assembly.",
          "A brief text summary of any challenges faced during printing or assembly and how you overcame them (e.g., 'The joint was too tight, so I reprinted one part with 0.2mm more tolerance')."
        ],
        "evaluation_criteria": [
          "Quality of the 3D prints (e.g., minimal stringing, good layer adhesion).",
          "Successful assembly of the finger components.",
          "Smoothness of the joint's mechanical action in the video.",
          "Clarity of the summary of challenges and solutions."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "It's time to make something real! This project is a major milestone where you'll apply your CAD and 3D printing knowledge to create the first functional part of your robotic hand. By focusing on a single finger, we can work through the challenges of printing and assembly on a small scale before committing to printing the entire hand."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Gain hands-on experience with the 3D printing workflow."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Practice post-processing skills for cleaning up printed parts."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Validate that your mechanical design works as intended."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Getting Started"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Slicing:"
                      },
                      {
                        "type": "text",
                        "text": " Import your finger part STLs into your slicer. Orient them on the build plate for maximum strength (avoiding layer lines along axes that will experience high stress). Use standard settings (0.2mm layer height, 15-20% infill) and add supports if necessary. Generate the G-code."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Printing:"
                      },
                      {
                        "type": "text",
                        "text": " Load your filament, ensure the build plate is clean, and start the print. Monitor the first layer to make sure it's adhering well."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Post-Processing:"
                      },
                      {
                        "type": "text",
                        "text": " Once the print is cool, remove it from the build plate. Carefully remove any support material using flush cutters or pliers. Use a file or sandpaper to smooth any rough edges, especially around the joint areas."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Assembly & Testing:"
                      },
                      {
                        "type": "text",
                        "text": " Fit the parts together. Does the joint pin fit? Is the motion smooth or too tight/loose? This is your chance to identify design flaws. If it's not right, go back to your CAD model, adjust the tolerances, and reprint."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "By the end of this project, you will have a tangible, working piece of your final robot. This iterative process of design, print, and test is fundamental to robotics and engineering."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "3D Print Post-Processing Techniques",
          "url": "https://all3dp.com/2/post-processing-3d-prints-the-basics/"
        },
        {
          "title": "Troubleshooting 3D Print Quality Issues",
          "url": "https://all3dp.com/1/common-3d-printing-problems-troubleshooting-3d-printer-issues/"
        },
        {
          "title": "CHEP's Filament Friday (YouTube channel with great slicer tips)",
          "url": "https://www.youtube.com/user/beginnerelectronics"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 16,
      "title": "Assembling the Full Hand Mechanical Structure",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "With a successfully prototyped finger, it's time for mass production! Today's goal is to print the remaining fingers and the palm structure, then assemble the complete mechanical hand. This will involve careful assembly, ensuring all joints move freely and are securely attached to the palm."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Print all remaining mechanical parts for the hand."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Assemble the fingers and mount them to the palm."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Install the servos into their mounting points in the palm."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type":="text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Batch Printing:"
              },
              {
                "type": "text",
                "text": " To save time, you can often print multiple parts at once. In your slicer, you can load the finger components and duplicate them to print all the parts for the remaining three fingers in a single print job. Be aware that if one part fails, the entire print may be ruined."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Hardware and Fasteners:"
              },
              {
                "type": "text",
                "text": " You will now need the screws and nuts from your Bill of Materials. M3 screws are very common in 3D printed projects. Use them to secure the servos and potentially to fasten the palm pieces together if it was printed in multiple parts."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Tendon Routing:"
              },
              {
                "type": "text",
                "text": " Before fully closing everything up, thread the tendons (fishing line) through the channels in the fingers and palm. It's much harder to do this once everything is screwed together. Leave extra length on both ends for now."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Assembly Order"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Print all parts. Recommended material: PETG for strength."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Clean and post-process all prints."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Assemble each of the four fingers individually."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Mount the servos into the palm structure."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Attach the assembled fingers to their mounting points on the palm."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Route the tendons from the fingertips, through the fingers and palm, to the servo locations."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Today's focus is on fabrication and mechanical assembly."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A methodical assembly process is key to success."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "By the end of the day, you should have a fully assembled, but not yet wired, robotic hand."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Tips for Assembling 3D Printed Parts",
          "url": "https://www.hubs.com/knowledge-base/how-assemble-3d-printed-parts/"
        },
        {
          "title": "Guide to Screws and Nuts - McMaster-Carr",
          "url": "https://www.mcmaster.com/nuts"
        },
        {
          "title": "InMoov Hand Assembly Instructions (for inspiration)",
          "url": "http://inmoov.fr/hand-and-forarm/"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 17,
      "title": "Wiring the Electronics: Servos, Controller, and Power",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "With the mechanical structure complete, it's time to give our hand life by wiring up the electronics. This involves connecting all four servos to the Arduino and the external power supply. We'll focus on creating a neat and robust wiring harness, which is crucial for reliability."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a power distribution bus for the servos."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Connect the servo signal lines to the Arduino."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Implement good cable management practices."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Power Distribution Bus"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "You need to get power and ground to four different servos from one power supply. Instead of a messy tangle of wires, create a 'bus'. This can be done on a breadboard or a piece of protoboard. Solder two rows of header pins. Connect the positive (+) wire from your power supply to one row, and the negative (-) wire to the other. Now you have multiple convenient points to plug in the power and ground wires from each servo."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Signal Wiring"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The signal wires from each of the four servos need to connect to four different PWM-capable pins on your Arduino Mega. Pick four convenient pins (e.g., pins 8, 9, 10, 11) and make a note of which pin controls which finger. This is crucial for the programming step."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Don't Forget the Common Ground!"
              },
              {
                "type": "text",
                "text": " Re-read Day 11 if you need a refresher. A wire must connect the ground bus (which is connected to the external supply's ground) to one of the GND pins on the Arduino."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Cable Management"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A 'rat's nest' of wires is unreliable and hard to debug. Use zip ties, heat shrink tubing, or braided cable sleeves to bundle wires together. Cut wires to the appropriate length instead of leaving long, loopy coils. A tidy project is a happy project."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a power bus to neatly distribute power to all servos."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Connect servo signal wires to Arduino PWM pins."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Ensure a common ground connection between the power supply and the Arduino."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Keep your wiring tidy for reliability and ease of debugging."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "How to Use a Breadboard - SparkFun",
          "url": "https://learn.sparkfun.com/tutorials/how-to-use-a-breadboard"
        },
        {
          "title": "Guide to Tidy Wiring - Adafruit",
          "url": "https://learn.adafruit.com/tidy-wiring"
        },
        {
          "title": "Arduino Mega Pinout Diagram",
          "url": "https://docs.arduino.cc/hardware/mega-2560"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 18,
      "title": "Programming I: Basic Sketch for Individual Servo Control",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "It's time to write the first version of the hand's control software. Our goal today is to expand on our single-servo sketch from Day 12 to control all four servos. We will create four separate servo objects and write code to test each finger's movement individually."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Instantiate and manage multiple servo objects in an Arduino sketch."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use an array to store servo objects for easier management."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write code to test the full range of motion for each finger one by one."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Managing Multiple Servos"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Controlling four servos is just like controlling one, repeated four times. You create four servo objects and attach each one to a different pin."
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "cpp"
            },
            "content": [
              {
                "type": "text",
                "text": "Servo finger1, finger2, finger3, finger4;\n\nvoid setup() {\n  finger1.attach(8);\n  finger2.attach(9);\n  finger3.attach(10);\n  finger4.attach(11);\n}"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Using Arrays for Cleaner Code"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A better way to manage this is with arrays. An array is a collection of variables of the same type. We can have an array of Servo objects and an array of their corresponding pin numbers. This allows us to use loops to control them, which is much cleaner."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Example Code (Using Arrays)"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "cpp"
            },
            "content": [
              {
                "type": "text",
                "text": "#include <Servo.h>\n\nconst int NUM_SERVOS = 4;\nServo servos[NUM_SERVOS];\nint servoPins[NUM_SERVOS] = {8, 9, 10, 11}; // Pins for each servo\n\nvoid setup() {\n  for (int i = 0; i < NUM_SERVOS; i++) {\n    servos[i].attach(servoPins[i]);\n  }\n}\n\nvoid loop() {\n  // Test each servo one by one\n  for (int i = 0; i < NUM_SERVOS; i++) {\n    // Move servo 'i' to 0 degrees\n    servos[i].write(0);\n    delay(500);\n    \n    // Move servo 'i' to 180 degrees\n    servos[i].write(180);\n    delay(500);\n\n    // Return to neutral\n    servos[i].write(90);\n    delay(500);\n  }\n}"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Controlling multiple servos is a straightforward extension of controlling one."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Using arrays for servo objects and pins makes the code much more organized and scalable."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "This test sketch is important for verifying that your wiring is correct for all four channels."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino Arrays Tutorial",
          "url": "https://www.arduino.cc/reference/en/language/variables/data-types/array/"
        },
        {
          "title": "Controlling Multiple Servos with Arduino - DroneBot Workshop",
          "url": "https://www.youtube.com/watch?v=k_b_gI-sawE"
        },
        {
          "title": "Arduino For Loop Reference",
          "url": "https://www.arduino.cc/reference/en/language/structure/control-structure/for/"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 19,
      "title": "Programming II: Creating Functions for Basic Gestures",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Having individual control is good, but we want the hand to perform coordinated actions. Today, we'll refactor our code to use functions. We will create reusable blocks of code for common gestures like 'open hand', 'close hand', and 'point'. This makes our main loop much cleaner and easier to read."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the purpose and syntax of functions in C++/Arduino."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write a function to move all servos to a 'closed' position."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write a function to move all servos to an 'open' position."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Refactor the main loop to call these gesture functions."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Functions"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A function is a named block of code that performs a specific task. You've already been using them: `setup()` and `loop()` are functions! Creating your own functions helps to organize your code, avoid repetition, and make it more readable. A function can take inputs (parameters) and can return an output."
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "cpp"
            },
            "content": [
              {
                "type": "text",
                "text": "void myFunctionName() {\n  // code to be executed goes here\n}"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The `void` keyword means the function doesn't return any value."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Example Code with Functions"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "cpp"
            },
            "content": [
              {
                "type": "text",
                "text": "#include <Servo.h>\n\nconst int NUM_SERVOS = 4;\nServo servos[NUM_SERVOS];\nint servoPins[NUM_SERVOS] = {8, 9, 10, 11};\n\n// Define our gesture functions\nvoid openHand() {\n  for (int i = 0; i < NUM_SERVOS; i++) {\n    servos[i].write(0); // Assuming 0 degrees is fully open\n  }\n}\n\nvoid closeHand() {\n  for (int i = 0; i < NUM_SERVOS; i++) {\n    servos[i].write(150); // Assuming 150 is a good closed position\n  }\n}\n\nvoid setup() {\n  for (int i = 0; i < NUM_SERVOS; i++) {\n    servos[i].attach(servoPins[i]);\n  }\n}\n\nvoid loop() {\n  openHand();\n  delay(1000);\n  closeHand();\n  delay(1000);\n}"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Functions are essential for writing clean, organized, and reusable code."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We've created functions for high-level actions like 'open' and 'close'."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "This modular approach makes it easy to add more complex gestures later."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino Function Reference",
          "url": "https://www.arduino.cc/reference/en/language/structure/functions/"
        },
        {
          "title": "Writing Good Arduino Code - A Guide",
          "url": "https://docs.arduino.cc/learn/programming/style-guide"
        },
        {
          "title": "Programming with Functions in C++ (Video)",
          "url": "https://www.youtube.com/watch?v=9S3d32qclj0"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 20,
      "title": "Introduction to Forward Kinematics (FK)",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Let's revisit a concept from Day 1: Forward Kinematics. Now that we have a physical hand, we can explore this more practically. The goal of FK is to answer the question: given our joint angles (which we control with the servos), where are the fingertips in 3D space? We'll look at the basic math involved for a simple 2D case."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Represent a robot arm as a series of links and joints."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use basic trigonometry (sine and cosine) to calculate the position of a single joint."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand how to chain these calculations to find the final end-effector position."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Kinematic Chain"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A robotic finger can be modeled as a 'kinematic chain'. It's a sequence of rigid bodies ('links', our phalanges) connected by joints. The position of each link depends on the one before it."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The Math (for a 2-Link Arm in 2D)"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Imagine a finger with two joints. Let's say the base is at coordinate (0,0)."
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Link 1 has length L1 and is at angle θ1."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Link 2 has length L2 and is at angle θ2 (relative to Link 1)."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The position of the first joint (x1, y1) is:"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "x1 = L1 * cos(θ1)"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "y1 = L1 * sin(θ1)"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The position of the second joint (the fingertip) (x2, y2) is the position of the first joint plus the contribution of the second link:"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "x2 = x1 + L2 * cos(θ1 + θ2)"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "y2 = y1 + L2 * sin(θ1 + θ2)"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "By plugging in the known lengths and angles, we can calculate the fingertip's exact (x, y) position. For our 1-DOF fingers, the calculation is much simpler, as there's only one link and one joint to consider per finger."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Forward Kinematics (FK) uses link lengths and joint angles to find the end-effector position."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The math relies on basic trigonometry applied to each link in the chain."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "While we won't implement this on the Arduino today, understanding the theory is important for advanced control."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Forward Kinematics - A Simple Explanation (Video)",
          "url": "https://www.youtube.com/watch?v=k9i01y3-GfU"
        },
        {
          "title": "Khan Academy: Intro to Trigonometry",
          "url": "https://www.khanacademy.org/math/trigonometry"
        },
        {
          "title": "Robotics: Computational Motion Planning (Coursera)",
          "url": "https://www.coursera.org/learn/robotics-motion-planning"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 21,
      "title": "Implementing Simplified FK and Tendon Attachment",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today is a hands-on day to finalize the connection between the servos and the fingers. We will attach the tendons to the servo horns and the fingertips. We'll also implement a 'simplified' version of FK by just printing the calculated servo angles to the Serial Monitor, confirming our code is working as intended."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type":="text",
                        "text": "Securely attach tendons to servo horns and finger joints."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Tension the tendons correctly for responsive movement."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the Arduino Serial Monitor to print debug information."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Tendon Attachment"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The goal is to translate the rotational motion of the servo into linear pulling motion on the tendon. Attach a 'horn' to the servo. Tie the tendon to the hole furthest from the center of the horn for maximum pull distance. At the fingertip, the tendon can be tied through a small hole or to a screw. The key is that the connection must be secure and not slip."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Tensioning"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "With the servo at its 'open' position (e.g., 0 degrees), pull the tendon taut and secure it to the fingertip. If you are using an elastic cord for return, make sure it is also slightly tensioned in this position. When the servo moves to the 'closed' position (e.g., 150 degrees), it should pull the tendon and bend the finger. There should be no slack in the line when the finger is open."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The Serial Monitor"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The Serial Monitor is a built-in tool in the Arduino IDE that lets the Arduino send text back to your computer. It's invaluable for debugging. You must first initialize it with `Serial.begin(9600);` in your `setup()` function. Then you can use `Serial.println(\"Hello World\");` to print text or `Serial.println(variable);` to print the value of a variable."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Properly attaching and tensioning tendons is key to the hand's performance."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The Serial Monitor is your best friend for debugging your code."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "By the end of today, the servos should be physically connected to the fingers via tendons."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino Serial Monitor Tutorial",
          "url": "https://docs.arduino.cc/built-in-examples/communication/SerialEvent"
        },
        {
          "title": "Knot Tying for Robotics",
          "url": "https://www.instructables.com/The-Most-Useful-Knots-for-Makers/"
        },
        {
          "title": "Connecting Servos and Tendons (Visual Example from InMoov)",
          "url": "http://inmoov.fr/hand-and-forarm/"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 22,
      "title": "Calibrating the Hand's Range of Motion",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Not all servos are created equal, and our mechanical system has limits. Simply commanding a servo to 0 or 180 degrees might break a 3D printed part or stall the motor. Today is about calibration: finding the true, safe minimum and maximum angles for each finger and updating our code to respect these limits."
              }
            ]
          },
          {
            "type":="heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the importance of software limits for hardware safety."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Systematically find the min and max safe operating angle for each finger."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Store these calibration values in arrays in the Arduino code."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The Need for Calibration"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The ideal 0-180 degree range of a servo rarely matches the mechanical reality. Your 'fully open' position might correspond to a servo angle of 15 degrees, and 'fully closed' might be 160 degrees. Pushing past these points puts stress on the servo and the 3D printed parts, causing them to break or wear out quickly. Calibration finds these real-world limits."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Calibration Process"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type":="paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write a simple sketch that allows you to send an angle to a specific servo via the Serial Monitor."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "For each finger, slowly increase the angle from 0 until the finger is fully open but not straining. Record this angle as `minAngle`."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Slowly increase the angle further until the finger is fully closed but not stalling the servo (you'll hear it buzz loudly if it's stalled). Record this angle as `maxAngle`."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Repeat for all four fingers. Each one will likely have slightly different values."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Storing Calibration Data"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Store these values in arrays in your code. Now, your `openHand` and `closeHand` functions will use these values instead of hard-coded numbers like 0 and 180."
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "cpp"
            },
            "content": [
              {
                "type": "text",
                "text": "// At the top of your sketch\nint minAngles[NUM_SERVOS] = {15, 12, 18, 14}; // Your calibrated values\nint maxAngles[NUM_SERVOS] = {160, 165, 158, 162}; // Your calibrated values\n\nvoid openHand() {\n  for (int i = 0; i < NUM_SERVOS; i++) {\n    servos[i].write(minAngles[i]);\n  }\n}\n\nvoid closeHand() {\n  for (int i = 0; i < NUM_SERVOS; i++) {\n    servos[i].write(maxAngles[i]);\n  }\n}"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Calibration is a crucial step to prevent damage to your robot."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We found the safe operating range for each finger and stored these values."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Our code is now safer and tailored to our specific hardware."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino Serial Input Basics",
          "url": "https://www.programmingelectronics.com/serial-read/"
        },
        {
          "title": "What is Robot Calibration? - Article",
          "url": "https://www.robots.com/articles/what-is-robot-calibration"
        },
        {
          "title": "How to Avoid Stalling Servos",
          "url": "https://robotics.stackexchange.com/questions/1059/how-to-avoid-stalling-a-servo-motor"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 23,
      "title": "Project 3: Full Hand Assembly and Basic Gesture Control",
      "is_project_day": true,
      "project_data": {
        "title": "Project 3: Full Hand Assembly and Basic Gesture Control",
        "description": "This project integrates all the work from the past weeks. You will combine the fully assembled mechanical hand with the wired electronics and the calibrated gesture code. The final result will be a robotic hand that can perform basic, pre-programmed gestures like opening, closing, and pointing.",
        "objectives": [
          "Verify all mechanical, electrical, and software components are working together.",
          "Demonstrate the hand performing at least three distinct gestures.",
          "Ensure the hand operates smoothly and reliably without stalling servos or damaging parts.",
          "Create a clean, self-contained system (hardware and software)."
        ],
        "requirements": [
          "Your fully assembled and wired robotic hand.",
          "Your Arduino sketch with calibrated gesture functions.",
          "The external power supply for the servos.",
          "A computer with the Arduino IDE to upload the code."
        ],
        "deliverables": [
          "A video (30-60 seconds) demonstrating the hand performing an automated sequence of at least three gestures (e.g., open, close, point, repeat).",
          "The final, commented Arduino code file (.ino) used for the demonstration.",
          "A photograph showing the final, tidy wiring of your project."
        ],
        "evaluation_criteria": [
          "Successful and reliable execution of gestures in the video.",
          "Smoothness of the hand's motion, showing good calibration.",
          "Clarity, organization, and commenting of the submitted Arduino code.",
          "Quality and tidiness of the electronics wiring shown in the photograph."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This is the moment of truth! Project 3 is about system integration. You'll bring together the mechanical hand, the power and control electronics, and the software you've developed to create a complete, functioning robotic system for the first time. The goal is to demonstrate that your hand can perform basic, pre-programmed gestures reliably."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Achieve a fully integrated and working robotic hand."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Demonstrate the value of the previous design and calibration steps."
                      }
                    ]
                  }
                ]
              },
              {
                "type":="listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a solid foundation for adding more advanced control in the final week."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Getting Started"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Final Checks:"
                      },
                      {
                        "type": "text",
                        "text": " Double-check all your wiring. Ensure the common ground is connected and the external power supply is plugged in BEFORE you upload code."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Add More Gestures:"
                      },
                      {
                        "type": "text",
                        "text": " In your code, create a new function called `point()`. In this function, set the index finger servo to its 'open' position and the other three servos to their 'closed' positions. You might need to experiment with the angles."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Create a Sequence:"
                      },
                      {
                        "type": "text",
                        "text": " In your `loop()` function, call your gesture functions in sequence with delays in between. For example: `openHand()`, `delay(1000)`, `closeHand()`, `delay(1000)`, `point()`, `delay(2000)`."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Record and Document:"
                      },
                      {
                        "type": "text",
                        "text": " Once everything is working smoothly, record your video, take a photo of your wiring, and save your final code."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Congratulations! You have built a fully functional robotic hand. This project is a major accomplishment and serves as a testament to the systematic design, build, and test process you've followed."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "System Integration in Robotics - Overview",
          "url": "https://www.therobotreport.com/4-best-practices-for-robot-systems-integration/"
        },
        {
          "title": "Commenting and Documenting Code",
          "url": "https://www.freecodecamp.org/news/how-to-write-good-code-a-guide-to-making-your-code-readable-and-maintainable/"
        },
        {
          "title": "10 Arduino Projects with Servo Motors (for inspiration)",
          "url": "https://www.youtube.com/watch?v=f2-l9a-5A8E"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 24,
      "title": "Introduction to Inverse Kinematics (IK)",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "We've mastered telling the hand what angles to go to. But what if we want to tell it *where* to put its fingertip? This is the challenge of Inverse Kinematics (IK). It's the opposite of FK: given a desired end-effector position (x, y, z), what are the joint angles required to get there? This is a much harder problem, but it's the key to more intelligent robotic manipulation."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Define Inverse Kinematics and its importance in robotics."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the difference between analytical and numerical IK solutions."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Recognize challenges of IK, such as multiple solutions and singularities."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Analytical vs. Numerical Solutions"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Analytical IK:"
              },
              {
                "type": "text",
                "text": " For simple robots (like a 2-joint arm), you can solve the geometric equations directly to find a formula for the angles. This is fast and precise. For our 1-DOF fingers, this is trivial."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Numerical IK:"
              },
              {
                "type": "text",
                "text": " For complex robots, finding a direct formula is often impossible. Instead, numerical methods are used. These are iterative algorithms that 'guess' a set of angles, check how close the fingertip is to the target using FK, and then adjust the guess to get closer, repeating until the error is small enough. A common algorithm is called Cyclic Coordinate Descent (CCD)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Challenges of IK"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Multiple Solutions:"
                      },
                      {
                        "type": "text",
                        "text": " Often, there are multiple ways for a robot to reach the same point (e.g., 'elbow up' or 'elbow down'). The IK solver has to choose one."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "No Solution:"
                      },
                      {
                        "type": "text",
                        "text": " If you ask the hand to reach a point that is physically impossible (too far away), there is no solution."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Singularities:"
                      },
                      {
                        "type": "text",
                        "text": " These are specific configurations (e.g., the arm is fully stretched out) where the robot loses a degree of freedom, and the IK math can become unstable."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Inverse Kinematics (IK) calculates joint angles from a target position."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "It's more complex than FK but enables more intelligent control."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "For our simple 1-DOF fingers, the IK problem is straightforward, but the concepts are important for future projects."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Inverse Kinematics - A Deeper Dive (Video)",
          "url": "https://www.youtube.com/watch?v=Oveb4_QY3Gg"
        },
        {
          "title": "Cyclic Coordinate Descent (CCD) for IK - A Visual Explanation",
          "url": "https://zalo.github.io/blog/inverse-kinematics/"
        },
        {
          "title": "Introduction to Inverse Kinematics with a 2-DOF Robotic Arm - MATLAB",
          "url": "https://www.mathworks.com/help/robotics/ug/introduction-to-inverse-kinematics-with-a-2-dof-robotic-arm.html"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 25,
      "title": "Implementing a Simple IK Solver",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Since our fingers are simple 1-DOF systems, we can implement a very simple analytical IK solver. Our 'solver' will essentially be a function that takes a desired 'closedness' (e.g., a percentage from 0% to 100%) and converts it into the correct servo angle using the calibration data we collected."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a function that accepts a percentage (0-100) as input."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the `map()` function to convert the percentage to a servo angle."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Update the main loop to control the hand using percentage-based commands."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Abstraction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "We are creating a higher level of abstraction. Instead of thinking in terms of raw servo angles (e.g., 'set finger 2 to 142 degrees'), we can now think in more intuitive terms (e.g., 'set finger 2 to 75% closed'). This makes the control logic much easier to write and understand."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Mapping Percentages"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The `map()` function is perfect for this. We want to map the input range of 0-100 (our percentage) to the output range of `minAngle` to `maxAngle` (our calibrated servo limits)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Example Code"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "cpp"
            },
            "content": [
              {
                "type": "text",
                "text": "/* ... (include servo library, define servos and pins, etc.) ... */\n\nint minAngles[NUM_SERVOS] = {15, 12, 18, 14};\nint maxAngles[NUM_SERVOS] = {160, 165, 158, 162};\n\n// Our simple IK solver function\nvoid setFingerClosed(int fingerIndex, int percentage) {\n  // Constrain percentage to be between 0 and 100\n  percentage = constrain(percentage, 0, 100);\n  \n  // Map the 0-100% range to the calibrated angle range for that specific finger\n  int angle = map(percentage, 0, 100, minAngles[fingerIndex], maxAngles[fingerIndex]);\n  \n  servos[fingerIndex].write(angle);\n}\n\nvoid setup() {\n  /* ... (attach servos) ... */\n}\n\nvoid loop() {\n  // Close finger 0 (index) to 50%\n  setFingerClosed(0, 50);\n  delay(1000);\n\n  // Close finger 0 to 100%\n  setFingerClosed(0, 100);\n  delay(1000);\n\n  // Open finger 0\n  setFingerClosed(0, 0);\n  delay(1000);\n}"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We created a simple but effective IK solver for our hand."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "This abstracts away the raw servo angles, allowing for more intuitive control."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The `map()` function, combined with our calibration data, is the core of this solver."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino constrain() Function Reference",
          "url": "https://www.arduino.cc/reference/en/language/functions/math/constrain/"
        },
        {
          "title": "Abstraction in Programming - GeeksForGeeks",
          "url": "https://www.geeksforgeeks.org/abstraction-in-c/"
        },
        {
          "title": "Inverse Kinematics for a 1-DOF system (Conceptual)",
          "url": "https://robotics.stackexchange.com/questions/1893/inverse-kinematics-of-1-dof-robotic-arm"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 26,
      "title": "Integrating Sensor Feedback for Closed-Loop Control",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Our hand currently operates in 'open-loop' - it sends a command and assumes it was executed correctly. By adding sensors, we can create a 'closed-loop' system that can react to its environment. Today, we'll explore how to add a sensor (like a flex sensor or a simple button on the fingertip) to detect when the hand has successfully grasped an object."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Differentiate between open-loop and closed-loop control."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Wire a simple tactile switch (button) to an Arduino digital input."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write code to stop a finger from closing when the switch is pressed."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Open-Loop Control:"
              },
              {
                "type": "text",
                "text": " The controller sends a command to the actuator. There is no feedback to confirm the result. Example: `myServo.write(90);`. The system doesn't know if the servo actually reached 90 degrees or if something blocked it."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Closed-Loop Control:"
              },
              {
                "type": "text",
                "text": " The controller sends a command, and a sensor provides feedback about the result. The controller can then adjust its command based on this feedback. Example: 'Close finger until the fingertip sensor is triggered, then stop'."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Tactile Switches:"
              },
              {
                "type": "text",
                "text": " A simple button is a great tactile sensor. We can mount a small pushbutton switch on a fingertip. When the finger touches an object, the button is pressed. We can read the state of this button using a digital input pin on the Arduino (`digitalRead()`)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Closed-loop control uses sensor feedback to make a system more intelligent."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A simple button can act as a tactile sensor to detect when an object is grasped."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "This allows the hand to apply just enough force to hold an object without crushing it."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Open-Loop vs. Closed-Loop Control Systems - NI",
          "url": "https://www.ni.com/en/innovations/white-papers/06/closed-loop-control.html"
        },
        {
          "title": "Arduino Digital Read (Button Tutorial)",
          "url": "https://docs.arduino.cc/learn/digital-io/digital-input-pullup"
        },
        {
          "title": "Tactile Sensors for Robotic Grippers - A Review",
          "url": "https://www.mdpi.com/1424-8220/20/10/2941"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 27,
      "title": "Creating a Higher-Level Control Interface",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "So far, our hand's actions are hard-coded in the `loop()` function. To make it truly interactive, we need a way to send it commands on the fly. Today, we'll create a simple control interface using the Arduino Serial Monitor, allowing us to type commands to control the hand in real-time."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Read incoming string data from the Serial Monitor."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Parse commands from the received string (e.g., 'close 2 80')."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Call the appropriate control functions based on the parsed command."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Serial Communication Protocol"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "We need to define a simple 'language' or protocol for our commands. A good format might be `COMMAND TARGET VALUE`. For example:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "move 2 80"
                      },
                      {
                        "type": "text",
                        "text": " - Move finger 2 to 80% closed."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "open"
                      },
                      {
                        "type": "text",
                        "text": " - Call the `openHand()` function."
                      }
                    ]
                  }
                ]
              },
              {
                "type":="listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "close"
                      },
                      {
                        "type": "text",
                        "text": " - Call the `closeHand()` function."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Parsing Serial Data"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Inside the `loop()` function, you check if there is data available using `Serial.available()`. If there is, you can read it into a String object using `Serial.readString()`. Then, you can use String manipulation functions like `indexOf()` and `substring()` to pull out the command, target, and value."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A serial command interface allows for real-time, interactive control of the robot."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We defined a simple command protocol and discussed how to parse it in Arduino."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "This decouples the control logic from a fixed sequence in the main loop."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino Serial Read String Tutorial",
          "url": "https://www.arduino.cc/reference/en/language/functions/communication/serial/readstring/"
        },
        {
          "title": "Arduino String Object Reference",
          "url": "https://www.arduino.cc/reference/en/language/variables/data-types/stringobject/"
        },
        {
          "title": "Serial Communication between Python and Arduino",
          "url": "https://www.youtube.com/watch?v=DJD28uK5qIk"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 28,
      "title": "System Integration and Debugging",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This is a 'flex' day dedicated to putting all the recent concepts together and fixing the inevitable bugs. The goal is to integrate the serial command interface, the percentage-based IK solver, and the closed-loop sensor logic into one cohesive, well-functioning program. Debugging will be a major focus."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Combine multiple software modules into a single application."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Practice systematic debugging techniques."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Refine the overall performance and reliability of the robotic hand."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Debugging Strategies"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Isolate the Problem:"
                      },
                      {
                        "type": "text",
                        "text": " Is the issue mechanical, electrical, or software? If a finger isn't moving, check the wiring first. If the wiring is good, check the mechanical linkage. If that's good, then dive into the code."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Serial Prints are Your Eyes:"
                      },
                      {
                        "type": "text",
                        "text": " You can't see the value of a variable inside the Arduino. Use `Serial.println()` at every step of your logic to see what the code is actually doing. Print out the command you received, the parsed values, the calculated angle, etc."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Comment Out Code:"
                      },
                      {
                        "type": "text",
                        "text": " If a new feature is causing problems, temporarily disable it by 'commenting it out' (putting `//` in front of the lines). Does the problem go away? If so, you've found the source."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Task"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Your main task is to create one final, clean sketch that incorporates all the advanced features we've discussed. The hand should be controllable via serial commands, use the percentage-based IK solver, and ideally, incorporate sensor feedback to stop a grasp. Spend the time to make it work reliably."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "System integration is where complex projects come together."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Effective debugging is a critical and learnable skill."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The goal is a single, robust, and feature-complete control program for the final project."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "A Guide to Debugging in Arduino",
          "url": "https://www.instructables.com/A-Guide-to-Debugging-in-Arduino/"
        },
        {
          "title": "Common Arduino Errors and How to Fix Them",
          "url": "https://www.makeuseof.com/tag/8-common-arduino-errors-beginners/"
        },
        {
          "title": "Software Integration Testing Strategies",
          "url": "https://www.browserstack.com/guide/what-is-integration-testing"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 29,
      "title": "Refinement and Documentation",
      "is_project_day": false,
      "content": {
        "type":="doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The final project is tomorrow. Today is about putting the finishing touches on your work. This includes cleaning up the physical build, improving the code's comments and readability, and preparing the documentation needed for the final submission. A well-documented project is a successful project."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the importance of project documentation."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Add comprehensive comments to your Arduino code."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a brief 'User Manual' for your robotic hand."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Code Commenting"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Good comments don't explain *what* the code does (the code itself does that). They explain *why*. Why did you choose this value? What is the purpose of this function? What does this complex line of code accomplish? Your code should be understandable to another person, or to yourself six months from now."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Project Documentation"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This is the story of your project. For our final project, this will be a simple text file (`README.md` is a great format). It should include:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A brief description of the project."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Instructions on how to use it (the 'User Manual'). This should list the serial commands you implemented."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A list of the hardware components used (your BOM)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A brief reflection on challenges and what you learned."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Documentation is a critical part of the engineering process."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Clean up your code with comments and your physical build with good cable management."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Prepare your final documentation for tomorrow's project submission."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "How to Write a Good README",
          "url": "https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/"
        },
        {
          "title": "The Art of Commenting - Stack Overflow",
          "url": "https://stackoverflow.blog/2021/12/23/the-art-of-commenting/"
        },
        {
          "title": "GitHub - A Place to Host Your Project and Documentation",
          "url": "https://github.com/"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 30,
      "title": "Project 4: Final Demonstration and Documentation",
      "is_project_day": true,
      "project_data": {
        "title": "Project 4: Final Demonstration and Documentation",
        "description": "The final capstone project. You will showcase your completed robotic hand, demonstrating its full capabilities through the serial command interface. This project combines the physical artifact with comprehensive documentation that explains its design, functionality, and the process of its creation.",
        "objectives": [
          "Demonstrate real-time control of the robotic hand using your serial interface.",
          "Showcase a variety of simple and complex gestures.",
          "Successfully grasp and release a simple object (e.g., a soda can, a small ball).",
          "Submit a complete and professional documentation package for the project."
        ],
        "requirements": [
          "Your fully assembled, wired, and programmed robotic hand.",
          "A computer with the Arduino IDE and Serial Monitor.",
          "A simple object to be grasped (e.g., empty water bottle).",
          "All final documentation files (code, README, BOM)."
        ],
        "deliverables": [
          "A comprehensive project video (1-3 minutes) that includes: a brief overview of the hand, a demonstration of controlling individual fingers via serial commands, a demonstration of pre-programmed gestures, and at least one successful grasp-and-release of an object.",
          "A single ZIP file containing: your final, commented Arduino sketch (.ino), your Bill of Materials spreadsheet, your CAD files (STL or STEP), and a README.md file that serves as the project's main documentation and user manual."
        ],
        "evaluation_criteria": [
          "Functionality and reliability of the hand as demonstrated in the video.",
          "Effectiveness of the grasp-and-release demonstration.",
          "Completeness, clarity, and professionalism of the documentation package.",
          "Overall quality and execution of the project from concept to completion."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Welcome to the final day! This capstone project is the culmination of 30 days of learning and building. It's your opportunity to showcase everything you've accomplished. The goal is to present not just a working robot, but a complete project, supported by clear demonstrations and thorough documentation."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Demonstrate mastery of the core concepts of the curriculum."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Practice communication skills by creating a clear and compelling project video."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Produce a final, polished artifact and documentation package."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Filming Your Demonstration"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Plan your video. A good structure is:"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Introduction: Briefly introduce yourself and the project."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Interactive Control: Show your screen with the Serial Monitor next to the hand. Type a command and show the hand responding."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Grasp Test: The main event! Show the hand closing on an object, holding it securely, and then releasing it."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Conclusion: Briefly mention what you learned or what you might do next."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Final Submission"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Gather all your deliverable files: the video, the code, the BOM, the CAD files, and the README. Put them all into a single .zip file for submission. Double-check that you've included everything. Congratulations on completing the RoboHand curriculum!"
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "How to Make a Great Project Demo Video",
          "url": "https://www.youtube.com/watch?v=pva780i8iA4"
        },
        {
          "title": "Open Broadcaster Software (OBS) - Free screen recording software",
          "url": "https://obsproject.com/"
        },
        {
          "title": "How to Create a ZIP file on Windows/Mac",
          "url": "https://www.hellotech.com/guide/for/how-to-zip-a-file-on-windows-10-or-mac"
        }
      ],
      "estimated_hours": 2.0
    }
  ]
}
```
--- End of Response ---

--- New Curriculum Generation ---
Curriculum ID: c7aabc3f-9fc4-489b-9990-56a61005a611
Timestamp: 2025-07-08T06:30:19.404323
Raw Response:
```json
{
  "curriculum_title": "Rat Neurons",
  "curriculum_description": "learn how to culture and grow rat neurons on an MEA and train them to perform tasks",
  "days": [
    {
      "day_number": 1,
      "title": "Introduction to Neuronal Cultures, MEAs, and Ethics",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Welcome to the fascinating world of in-vitro neuroscience! Today, we'll lay the groundwork for our 30-day journey. We will explore the core concepts of culturing neurons outside of a living organism and the technology, Microelectrode Arrays (MEAs), that allows us to 'listen' to and 'talk' to them. We will also address the critical ethical considerations involved in this research."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Define primary neuronal culture and its significance in research."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain the basic principle of a Microelectrode Array (MEA) and its function."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify key ethical considerations and safety protocols for working with animal tissue and cell cultures."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "What is a Primary Neuronal Culture?"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A primary neuronal culture is a population of cells derived directly from animal tissue (in our case, embryonic or neonatal rat brains) and grown in an artificial environment (in-vitro). Unlike cell lines, which are immortalized and can divide indefinitely, primary neurons are post-mitotic; they do not divide and have a finite lifespan in the dish. This makes them a more biologically relevant model for studying the nervous system, as they retain many of the physiological and morphological characteristics of neurons in the brain."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Microelectrode Arrays (MEAs)"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "An MEA is a specialized petri dish or plate with a grid of microscopic electrodes embedded in the surface. When neurons are cultured on this surface, they form a network over the electrodes. These electrodes can: "
              },
              {
                "type": "text",
                "text": "Record ",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": "extracellular electrical activity (action potentials, or 'spikes') from nearby neurons non-invasively. This allows us to listen to the network's communication. They can also "
              },
              {
                "type": "text",
                "text": "Stimulate ",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": "the neurons by applying small voltage pulses, allowing us to 'talk' to the network and probe its responses. This two-way interface is crucial for the 'training' experiments we will explore later."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Safety and Ethical Considerations"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Working with animal tissue requires strict adherence to ethical guidelines. All procedures must be approved by an Institutional Animal Care and Use Committee (IACUC) to ensure humane treatment. For primary cultures, tissue is typically sourced from neonatal (P0) rat pups, which minimizes suffering. In the lab, Biosafety Level 2 (BSL-2) practices are standard for working with primary cell cultures to protect both the researcher and the culture from contamination."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Primary neuronal cultures are finite, biologically relevant models of the brain grown in-vitro."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "MEAs are tools that allow for non-invasive, long-term recording and stimulation of neuronal networks."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Ethical oversight (IACUC) and lab safety (BSL-2) are non-negotiable prerequisites for this type of research."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Growing Living Rat Neurons To Play... DOOM? | Part 1",
          "url": "https://youtube.com/watch?v=bEXefdbQDjw&pp=ygWjKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIFRpdGxlIChvcHRpb25hbCk6IFJhdCBOZXVyb25zCiAgICAgICAgICAgIERlc2NyaXB0aW9uIChvcHRpb25hbCk6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIERpZmZpY3VsdHk6IGludGVybWVkaWF0ZQogICAgICAgICAgICBUb3RhbCBEdXJhdGlvbiAoZGF5cyk6IDMwCiAgICAgICAgICAgIFByZXJlcXVpc2l0ZXM6IGknbSBhIDJuZCB5ZWFyIGJpb2xvZ3kgbWFqb3IKICAgICAgICAgICAgVGltZSBwZXIgRGF5IChtaW51dGVzKTogMTgwCiAgICAgICAgICAgIExlYXJuaW5nIFN0eWxlOiBiYWxhbmNlZAogICAgICAgICAgICBOdW1iZXIgb2YgUHJvamVjdHM6IDQKICAgICAgICAgICAgCiAgICAgICAgICAgIFRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgd2l0aCBhIG1haW4gJ2N1cnJpY3VsdW1fdGl0bGUnIGFuZCAnY3VycmljdWx1bV9kZXNjcmlwdGlvbicsIAogICAgICAgICAgICBhbmQgYSBsaXN0IG9mICdkYXlzJy4gRWFjaCBkYXkgb2JqZWN0IGluIHRoZSBsaXN0IHNob3VsZCBoYXZlOgogICAgICAgICAgICAtICdkYXlfbnVtYmVyJyAoaW50KQogICAgICAgICAgICAtICd0aXRsZScgKHN0ciwgY29uY2lzZSB0aXRsZSBmb3IgdGhlIGRheSkKICAgICAgICAgICAgLSAnaXNfcHJvamVjdF9kYXknIChib29sLCB0cnVlIGlmIHRoaXMgZGF5IGlzIGEgcHJvamVjdCBkYXksIGZhbHNlIG90aGVyd2lzZSkKICAgICAgICAgICAgLSAncHJvamVjdF9kYXRhJyAoZGljdCwgb3B0aW9uYWwsIG9ubHkgaWYgaXNfcHJvamVjdF9kYXkgaXMgdHJ1ZS4gU2hvdWxkIGNvbnRhaW4gJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ29iamVjdGl2ZXMnLCAncmVxdWlyZW1lbnRzJywgJ2RlbGl2ZXJhYmxlcycsIGFuZCAnZXZhbHVhdGlvbl9jcml0ZXJpYScpCiAgICAgICAgICAgIC0gJ2NvbnRlbnQnIChkaWN0LCBUaXBUYXAvUHJvc2VNaXJyb3IgSlNPTiBvYmplY3QgZm9yIHRoZSBsZWFybmluZyBtb2R1bGUuIFRoaXMgb2JqZWN0IE1VU1QgaGF2ZSBhIHJvb3QgJ3R5cGUnOiAnZG9jJyBhbmQgYSAnY29udGVudCcgYXJyYXkuIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnRhaW4gYSBzZXF1ZW5jZSBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIGRheSdzIGxlc3Nvbi4gU3RydWN0dXJlIGVhY2ggZGF5J3MgbGVzc29uIGNvbnRlbnQgd2l0aCB0aGUgZm9sbG93aW5nIHNlY3Rpb25zLCB1c2luZyBhcHByb3ByaWF0ZSBUaXBUYXAvUHJvc2VNaXJyb3Igbm9kZXMgKGxpa2UgJ2hlYWRpbmcnIHdpdGggbGV2ZWxzIDEtMywgJ3BhcmFncmFwaCcsICdidWxsZXRMaXN0JywgJ29yZGVyZWRMaXN0JywgJ2xpc3RJdGVtJywgJ2NvZGVCbG9jaycgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCAndGV4dCcgbm9kZXMgd2l0aCBtYXJrcyBmb3IgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnKToKICAgICAgICAgICAgICAgIDEuICAiSW50cm9kdWN0aW9uIjogKFJlcXVpcmVkKSBBIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBkYXkncyB0b3BpYyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDIsIGZvbGxvd2VkIGJ5IG9uZSBvciB0d28gJ3BhcmFncmFwaCcgbm9kZXMpLgogICAgICAgICAgICAgICAgMi4gICJMZWFybmluZyBPYmplY3RpdmVzIjogKFJlcXVpcmVkKSAyLTQgY2xlYXIsIGFjdGlvbmFibGUgb2JqZWN0aXZlcyBmb3IgdGhlIGRheSAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUsIHdoZXJlIGVhY2ggJ2xpc3RJdGVtJyBjb250YWlucyBhICdwYXJhZ3JhcGgnIHdpdGggdGhlIG9iamVjdGl2ZSkuCiAgICAgICAgICAgICAgICAzLiAgIktleSBDb25jZXB0cyI6IChSZXF1aXJlZCkgRGV0YWlsZWQgZXhwbGFuYXRpb25zIG9mIHRoZSBjb3JlIGNvbmNlcHRzIGZvciB0aGUgZGF5LiBUaGlzIHNob3VsZCBiZSB0aGUgbW9zdCBzdWJzdGFudGlhbCBwYXJ0LiBVc2UgbXVsdGlwbGUgJ2hlYWRpbmcnIG5vZGVzIChsZXZlbCAzKSBmb3Igc3ViLXRvcGljcyBpZiBuZWVkZWQsIGZvbGxvd2VkIGJ5IGRldGFpbGVkICdwYXJhZ3JhcGgnIG5vZGVzLiBJbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSAnU3VwcG9ydGluZyBSZXNlYXJjaCcgKHdoaWNoIHdpbGwgYmUgcHJvdmlkZWQgdG8geW91KSB0byBtYWtlIHRoZXNlIGV4cGxhbmF0aW9ucyBjb21wcmVoZW5zaXZlLiBJZiBjb2RlIGV4YW1wbGVzIG9yIG1hdGhlbWF0aWNhbCBmb3JtdWxhcyBhcmUgcmVsZXZhbnQgYW5kIGZvdW5kIGluIHJlc2VhcmNoLCByZXByZXNlbnQgdGhlbSBhY2N1cmF0ZWx5LCBwZXJoYXBzIHdpdGhpbiAncGFyYWdyYXBoJyBub2RlcyBvciB1c2luZyAnY29kZUJsb2NrJyBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgICAgIDQuICAiRXhhbXBsZXMiOiAoT3B0aW9uYWwsIGJ1dCBoaWdobHkgZW5jb3VyYWdlZCkgMS0yIHdvcmtlZCBleGFtcGxlcyBvciBpbGx1c3RyYXRpdmUgc2NlbmFyaW9zIHJlbGF0ZWQgdG8gdGhlIGtleSBjb25jZXB0cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5ICdwYXJhZ3JhcGgnIG9yICdvcmRlcmVkTGlzdCcgbm9kZXMgZXhwbGFpbmluZyB0aGUgZXhhbXBsZSBzdGVwLWJ5LXN0ZXApLgogICAgICAgICAgICAgICAgNS4gICJTdW1tYXJ5IjogKFJlcXVpcmVkKSBBIGNvbmNpc2UgcmVjYXAgb2YgdGhlIGRheSdzIG1haW4gcG9pbnRzIChlLmcuLCBhICdoZWFkaW5nJyBub2RlIHdpdGggbGV2ZWwgMywgZm9sbG93ZWQgYnkgYSAnYnVsbGV0TGlzdCcgbm9kZSkuCiAgICAgICAgICAgICAgICBFbnN1cmUgYWxsIHRleHQgY29udGVudCBpcyB3ZWxsLXdyaXR0ZW4sIGNsZWFyLCBhbmQgZW5nYWdpbmcuCiAgICAgICAgICAgIC0gJ3Jlc291cmNlcycgKGxpc3Qgb2YgZGljdHMsIGVhY2ggd2l0aCAndGl0bGUnIGFuZCAndXJsJykKICAgICAgICAgICAgLSAnZXN0aW1hdGVkX2hvdXJzJyAoZmxvYXQsIG9wdGlvbmFsKQogICAgICAgICAgICAKICAgICAgICAgICAgRm9jdXMgb24gY3JlYXRpbmcgcHJhY3RpY2FsLCBhY3Rpb25hYmxlIGNvbnRlbnQgZm9yIGVhY2ggZGF5LgogICAgICAgICAgICBFbnN1cmUgdGhlIGN1cnJpY3VsdW0gc3BhbnMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy4KICAgICAgICAgICAgCiAgICAgICAgICAgIENSSVRJQ0FMIElOU1RSVUNUSU9OUyBGT1IgUkVTT1VSQ0VTOgogICAgICAgICAgICAxLiBUaGUgU3VwcG9ydGluZyBSZXNlYXJjaCBzZWN0aW9uIHdpbGwgY29udGFpbiBZb3VUdWJlIHZpZGVvcyB3aXRoIGlkZW50aWZpZXJzIGxpa2UgW1lUMV0sIFtZVDJdLCBldGMuCiAgICAgICAgICAgIDIuIFlvdSBNVVNUIHVzZSB0aGVzZSBpZGVudGlmaWVycyBpbiB0aGUgJ3VybCcgZmllbGQgd2hlbiBhZGRpbmcgWW91VHViZSB2aWRlb3MgdG8gcmVzb3VyY2VzCiAgICAgICAgICAgIDMuIEZvciBleGFtcGxlOiB7InRpdGxlIjogIkludHJvZHVjdGlvbiB0byBSZWFjdCBIb29rcyIsICJ1cmwiOiAiW1lUM10ifQogICAgICAgICAgICA0LiBBbHNvIGluY2x1ZGUgbm9uLVlvdVR1YmUgcmVzb3VyY2VzIChhcnRpY2xlcywgZG9jdW1lbnRhdGlvbikgd2l0aCB0aGVpciBmdWxsIFVSTHMKICAgICAgICAgICAgNS4gRWFjaCBkYXkgc2hvdWxkIGhhdmUgMi00IHJlbGV2YW50IHJlc291cmNlcyBtaXhpbmcgWW91VHViZSB2aWRlb3MgYW5kIG90aGVyIHNvdXJjZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIFdoZW4gZ2VuZXJhdGluZyB0aGUgJ2NvbnRlbnQnIGZvciBlYWNoIGRheSwgdXRpbGl6ZSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSBhbG9uZyB3aXRoIHRoZXNlIHByZWZlcmVuY2VzKSB0byBtYWtlIHRoZSBleHBsYW5hdGlvbnMgYW5kIGNvbmNlcHRzIGFzIGRldGFpbGVkIGFuZCBhY2N1cmF0ZSBhcyBwb3NzaWJsZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIElNUE9SVEFOVDogSWYgbnVtX3Byb2plY3RzIGlzIGdyZWF0ZXIgdGhhbiAwLCBkaXN0cmlidXRlIHRoZSBwcm9qZWN0cyBldmVubHkgdGhyb3VnaG91dCB0aGUgY3VycmljdWx1bS4gRm9yIGV4YW1wbGU6CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTEgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHRoZSBwcm9qZWN0IGFyb3VuZCBkYXkgMjAtMjUKICAgICAgICAgICAgLSBJZiBudW1fcHJvamVjdHM9MiBhbmQgZHVyYXRpb249MzAgZGF5cywgcGxhY2UgcHJvamVjdHMgYXJvdW5kIGRheSAxMC0xMiBhbmQgZGF5IDIyLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTMgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgOC0xMCwgZGF5IDE2LTE4LCBhbmQgZGF5IDI0LTI2CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3IgcHJvamVjdCBkYXlzOgogICAgICAgICAgICAtIFNldCAnaXNfcHJvamVjdF9kYXknIHRvIHRydWUKICAgICAgICAgICAgLSBJbmNsdWRlIGEgJ3Byb2plY3RfZGF0YScgb2JqZWN0IHdpdGggY29tcHJlaGVuc2l2ZSBwcm9qZWN0IGRldGFpbHMKICAgICAgICAgICAgLSBUaGUgcHJvamVjdCBzaG91bGQgaW50ZWdyYXRlIGFuZCBhcHBseSBjb25jZXB0cyBsZWFybmVkIGluIHRoZSBwcmVjZWRpbmcgZGF5cwogICAgICAgICAgICAtIFByb2plY3RzIHNob3VsZCBiZSBwcmFjdGljYWwsIGhhbmRzLW9uIGFjdGl2aXRpZXMgdGhhdCByZWluZm9yY2UgbGVhcm5pbmcKICAgICAgICAgICAgLSBQcm9qZWN0IHRpdGxlcyBzaG91bGQgYmUgZGVzY3JpcHRpdmUgYnV0IG5vdCBvdmVybHkgcGxheWZ1bCAoZS5nLiwgIkJ1aWxkIGEgV2VhdGhlciBEYXRhIEFuYWx5emVyIiBub3QgIldlYXRoZXIgV2l6YXJkIDMwMDAiKQogICAgICAgICAgICDSBwkJwQkBhyohjO8%3D"
        },
        {
          "title": "What are Primary Cells?",
          "url": "https://www.thermofisher.com/us/en/home/references/gibco-cell-culture-basics/cell-culture-principals/primary-cell-culture.html"
        },
        {
          "title": "Introduction to MEA technology",
          "url": "https://www.multichannelsystems.com/research/mea-technology"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 2,
      "title": "The Biology of a Neuron: Structure and Synaptic Transmission",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "To successfully culture neurons, we must first understand their fundamental biology. Today, we'll dive into the architecture of a single neuron and explore how these cells communicate with each other through synapses. This knowledge is essential for interpreting their behavior in the culture dish."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify the main components of a neuron: soma, dendrites, axon, and axon terminal."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Describe the process of synaptic transmission, including the role of neurotransmitters."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain the concept of a growth cone and its role in forming neural networks."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Neuronal Morphology"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A typical neuron consists of four main parts. The "
              },
              {
                "type": "text",
                "text": "soma",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " (cell body) contains the nucleus and is the metabolic center. Branching out from the soma are "
              },
              {
                "type": "text",
                "text": "dendrites",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": ", which are tree-like structures that receive signals from other neurons. A single, long projection called the "
              },
              {
                "type": "text",
                "text": "axon",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " carries electrical signals (action potentials) away from the soma. The axon terminates at the "
              },
              {
                "type": "text",
                "text": "axon terminal",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": ", which forms a junction, or synapse, with the dendrites of another neuron."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Synaptic Transmission"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Communication between neurons occurs at the synapse. When an action potential reaches the axon terminal of the presynaptic neuron, it triggers the release of chemical messengers called neurotransmitters (e.g., glutamate, GABA) into the synaptic cleft. These neurotransmitters bind to receptors on the dendrite of the postsynaptic neuron, causing an electrical change. This is the fundamental basis of information processing in the brain and in our culture dish."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Network Formation and Growth Cones"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "In culture, dissociated neurons don't start out connected. They extend their axons and dendrites, guided by specialized structures at their tips called "
              },
              {
                "type": "text",
                "text": "growth cones",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": ". These growth cones are highly motile, 'feeling' their way across the culture surface by responding to chemical cues. When a growth cone from an axon finds a suitable dendrite, it forms a synapse, contributing to the creation of a complex, interconnected neural network. This process is a beautiful example of self-organization."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Neurons have distinct parts (soma, dendrites, axon) specialized for receiving, integrating, and transmitting signals."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type":- "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Synapses are the communication junctions where neurotransmitters are released."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Growth cones guide axon pathfinding to enable the self-assembly of neural networks in culture."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "FINDING THAT CONNECTION© - neurons connecting to one another in a Petri dish",
          "url": "https://youtube.com/shorts/Rvmvt7gscIM"
        },
        {
          "title": "What your brain cells look like when you learn something NEW",
          "url": "https://youtube.com/shorts/ztPKM0nryY8"
        },
        {
          "title": "Structure of a Neuron",
          "url": "https://www.khanacademy.org/science/biology/human-biology/neuron-nervous-system/a/overview-of-neuron-structure-and-function"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 3,
      "title": "Lab Setup: Aseptic Technique and Essential Equipment",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The success of any cell culture hinges on one critical skill: aseptic technique. Today, we focus on the practical aspects of setting up a cell culture lab. We'll cover the essential equipment and, most importantly, the procedures required to maintain a sterile environment and prevent contamination, which can ruin an experiment."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "List the essential equipment for a neuronal culture laboratory."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Describe the principles and proper use of a biosafety cabinet (BSC)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Outline the steps of aseptic technique to prevent microbial contamination."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Essential Equipment"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A dedicated cell culture facility is required. Key equipment includes: a "
              },
              {
                "type": "text",
                "text": "Biosafety Cabinet (BSC)",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " (Class II, Type A2 is common) to provide a sterile work area; a "
              },
              {
                "type": "text",
                "text": "CO2 Incubator",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " to maintain physiological temperature (37°C), humidity, and CO2 levels (5%); an "
              },
              {
                "type":="text",
                "text": "Inverted Microscope",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " to view cells in their culture vessel; a "
              },
              {
                "type": "text",
                "text": "Centrifuge",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " for pelleting cells; a "
              },
              {
                "type": "text",
                "text": "Water Bath",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " for warming media; and an "
              },
              {
                "type": "text",
                "text": "Autoclave",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " for sterilizing instruments and solutions."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Aseptic Technique"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Aseptic technique is a set of practices designed to prevent contamination from bacteria, fungi, and viruses. It is the most important skill in cell culture. Core principles include:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Working in a BSC: The cabinet maintains a sterile field through constant, filtered airflow. Never block the grilles."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Personal Hygiene: Wear gloves, a lab coat, and tie back long hair. Spray gloves with 70% ethanol frequently."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Sterilizing Surfaces: Before and after work, wipe down the entire BSC surface, as well as any items entering the hood, with 70% ethanol."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Handling Reagents: Never mouth pipette. Avoid passing non-sterile items (like your hands) over open sterile containers. Flame the necks of bottles before and after opening."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A dedicated set of equipment (BSC, incubator, microscope) is necessary for neuronal culture."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The biosafety cabinet is the primary tool for creating a sterile work environment."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Strict aseptic technique, including sterilization and careful handling, is paramount to prevent contamination and ensure experimental success."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "How to prepare neuronal cell cultures",
          "url": "https://youtube.com/watch?v=TBjPDW5zM_g&pp=ygWjKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIFRpdGxlIChvcHRpb25hbCk6IFJhdCBOZXVyb25zCiAgICAgICAgICAgIERlc2NyaXB0aW9uIChvcHRpb25hbCk6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIERpZmZpY3VsdHk6IGludGVybWVkaWF0ZQogICAgICAgICAgICBUb3RhbCBEdXJhdGlvbiAoZGF5cyk6IDMwCiAgICAgICAgICAgIFByZXJlcXVpc2l0ZXM6IGknbSBhIDJuZCB5ZWFyIGJpb2xvZ3kgbWFqb3IKICAgICAgICAgICAgVGltZSBwZXIgRGF5IChtaW51dGVzKTogMTgwCiAgICAgICAgICAgIExlYXJuaW5nIFN0eWxlOiBiYWxhbmNlZAogICAgICAgICAgICBOdW1iZXIgb2YgUHJvamVjdHM6IDQKICAgICAgICAgICAgCiAgICAgICAgICAgIFRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgd2l0aCBhIG1haW4gJ2N1cnJpY3VsdW1fdGl0bGUnIGFuZCAnY3VycmljdWx1bV9kZXNjcmlwdGlvbicsIAogICAgICAgICAgICBhbmQgYSBsaXN0IG9mICdkYXlzJy4gRWFjaCBkYXkgb2JqZWN0IGluIHRoZSBsaXN0IHNob3VsZCBoYXZlOgogICAgICAgICAgICAtICdkYXlfbnVtYmVyJyAoaW50KQogICAgICAgICAgICAtICd0aXRsZScgKHN0ciwgY29uY2lzZSB0aXRsZSBmb3IgdGhlIGRheSkKICAgICAgICAgICAgLSAnaXNfcHJvamVjdF9kYXknIChib29sLCB0cnVlIGlmIHRoaXMgZGF5IGlzIGEgcHJvamVjdCBkYXksIGZhbHNlIG90aGVyd2lzZSkKICAgICAgICAgICAgLSAncHJvamVjdF9kYXRhJyAoZGljdCwgb3B0aW9uYWwsIG9ubHkgaWYgaXNfcHJvamVjdF9kYXkgaXMgdHJ1ZS4gU2hvdWxkIGNvbnRhaW4gJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ29iamVjdGl2ZXMnLCAncmVxdWlyZW1lbnRzJywgJ2RlbGl2ZXJhYmxlcycsIGFuZCAnZXZhbHVhdGlvbl9jcml0ZXJpYScpCiAgICAgICAgICAgIC0gJ2NvbnRlbnQnIChkaWN0LCBUaXBUYXAvUHJvc2VNaXJyb3IgSlNPTiBvYmplY3QgZm9yIHRoZSBsZWFybmluZyBtb2R1bGUuIFRoaXMgb2JqZWN0IE1VU1QgaGF2ZSBhIHJvb3QgJ3R5cGUnOiAnZG9jJyBhbmQgYSAnY29udGVudCcgYXJyYXkuIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnRhaW4gYSBzZXF1ZW5jZSBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIGRheSdzIGxlc3Nvbi4gU3RydWN0dXJlIGVhY2ggZGF5J3MgbGVzc29uIGNvbnRlbnQgd2l0aCB0aGUgZm9sbG93aW5nIHNlY3Rpb25zLCB1c2luZyBhcHByb3ByaWF0ZSBUaXBUYXAvUHJvc2VNaXJyb3Igbm9kZXMgKGxpa2UgJ2hlYWRpbmcnIHdpdGggbGV2ZWxzIDEtMywgJ3BhcmFncmFwaCcsICdidWxsZXRMaXN0JywgJ29yZGVyZWRMaXN0JywgJ2xpc3RJdGVtJywgJ2NvZGVCbG9jaycgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCAndGV4dCcgbm9kZXMgd2l0aCBtYXJrcyBmb3IgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnKToKICAgICAgICAgICAgICAgIDEuICAiSW50cm9kdWN0aW9uIjogKFJlcXVpcmVkKSBBIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBkYXkncyB0b3BpYyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDIsIGZvbGxvd2VkIGJ5IG9uZSBvciB0d28gJ3BhcmFncmFwaCcgbm9kZXMpLgogICAgICAgICAgICAgICAgMi4gICJMZWFybmluZyBPYmplY3RpdmVzIjogKFJlcXVpcmVkKSAyLTQgY2xlYXIsIGFjdGlvbmFibGUgb2JqZWN0aXZlcyBmb3IgdGhlIGRheSAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUsIHdoZXJlIGVhY2ggJ2xpc3RJdGVtJyBjb250YWlucyBhICdwYXJhZ3JhcGgnIHdpdGggdGhlIG9iamVjdGl2ZSkuCiAgICAgICAgICAgICAgICAzLiAgIktleSBDb25jZXB0cyI6IChSZXF1aXJlZCkgRGV0YWlsZWQgZXhwbGFuYXRpb25zIG9mIHRoZSBjb3JlIGNvbmNlcHRzIGZvciB0aGUgZGF5LiBUaGlzIHNob3VsZCBiZSB0aGUgbW9zdCBzdWJzdGFudGlhbCBwYXJ0LiBVc2UgbXVsdGlwbGUgJ2hlYWRpbmcnIG5vZGVzIChsZXZlbCAzKSBmb3Igc3ViLXRvcGljcyBpZiBuZWVkZWQsIGZvbGxvd2VkIGJ5IGRldGFpbGVkICdwYXJhZ3JhcGgnIG5vZGVzLiBJbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSAnU3VwcG9ydGluZyBSZXNlYXJjaCcgKHdoaWNoIHdpbGwgYmUgcHJvdmlkZWQgdG8geW91KSB0byBtYWtlIHRoZXNlIGV4cGxhbmF0aW9ucyBjb21wcmVoZW5zaXZlLiBJZiBjb2RlIGV4YW1wbGVzIG9yIG1hdGhlbWF0aWNhbCBmb3JtdWxhcyBhcmUgcmVsZXZhbnQgYW5kIGZvdW5kIGluIHJlc2VhcmNoLCByZXByZXNlbnQgdGhlbSBhY2N1cmF0ZWx5LCBwZXJoYXBzIHdpdGhpbiAncGFyYWdyYXBoJyBub2RlcyBvciB1c2luZyAnY29kZUJsb2NrJyBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgICAgIDQuICAiRXhhbXBsZXMiOiAoT3B0aW9uYWwsIGJ1dCBoaWdobHkgZW5jb3VyYWdlZCkgMS0yIHdvcmtlZCBleGFtcGxlcyBvciBpbGx1c3RyYXRpdmUgc2NlbmFyaW9zIHJlbGF0ZWQgdG8gdGhlIGtleSBjb25jZXB0cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5ICdwYXJhZ3JhcGgnIG9yICdvcmRlcmVkTGlzdCcgbm9kZXMgZXhwbGFpbmluZyB0aGUgZXhhbXBsZSBzdGVwLWJ5LXN0ZXApLgogICAgICAgICAgICAgICAgNS4gICJTdW1tYXJ5IjogKFJlcXVpcmVkKSBBIGNvbmNpc2UgcmVjYXAgb2YgdGhlIGRheSdzIG1haW4gcG9pbnRzIChlLmcuLCBhICdoZWFkaW5nJyBub2RlIHdpdGggbGV2ZWwgMywgZm9sbG93ZWQgYnkgYSAnYnVsbGV0TGlzdCcgbm9kZSkuCiAgICAgICAgICAgICAgICBFbnN1cmUgYWxsIHRleHQgY29udGVudCBpcyB3ZWxsLXdyaXR0ZW4sIGNsZWFyLCBhbmQgZW5nYWdpbmcuCiAgICAgICAgICAgIC0gJ3Jlc291cmNlcycgKGxpc3Qgb2YgZGljdHMsIGVhY2ggd2l0aCAndGl0bGUnIGFuZCAndXJsJykKICAgICAgICAgICAgLSAnZXN0aW1hdGVkX2hvdXJzJyAoZmxvYXQsIG9wdGlvbmFsKQogICAgICAgICAgICAKICAgICAgICAgICAgRm9jdXMgb24gY3JlYXRpbmcgcHJhY3RpY2FsLCBhY3Rpb25hYmxlIGNvbnRlbnQgZm9yIGVhY2ggZGF5LgogICAgICAgICAgICBFbnN1cmUgdGhlIGN1cnJpY3VsdW0gc3BhbnMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy4KICAgICAgICAgICAgCiAgICAgICAgICAgIENSSVRJQ0FMIElOU1RSVUNUSU9OUyBGT1IgUkVTT1VSQ0VTOgogICAgICAgICAgICAxLiBUaGUgU3VwcG9ydGluZyBSZXNlYXJjaCBzZWN0aW9uIHdpbGwgY29udGFpbiBZb3VUdWJlIHZpZGVvcyB3aXRoIGlkZW50aWZpZXJzIGxpa2UgW1lUMV0sIFtZVDJdLCBldGMuCiAgICAgICAgICAgIDIuIFlvdSBNVVNUIHVzZSB0aGVzZSBpZGVudGlmaWVycyBpbiB0aGUgJ3VybCcgZmllbGQgd2hlbiBhZGRpbmcgWW91VHViZSB2aWRlb3MgdG8gcmVzb3VyY2VzCiAgICAgICAgICAgIDMuIEZvciBleGFtcGxlOiB7InRpdGxlIjogIkludHJvZHVjdGlvbiB0byBSZWFjdCBIb29rcyIsICJ1cmwiOiAiW1lUM10ifQogICAgICAgICAgICA0LiBBbHNvIGluY2x1ZGUgbm9uLVlvdVR1YmUgcmVzb3VyY2VzIChhcnRpY2xlcywgZG9jdW1lbnRhdGlvbikgd2l0aCB0aGVpciBmdWxsIFVSTHMKICAgICAgICAgICAgNS4gRWFjaCBkYXkgc2hvdWxkIGhhdmUgMi00IHJlbGV2YW50IHJlc291cmNlcyBtaXhpbmcgWW91VHViZSB2aWRlb3MgYW5kIG90aGVyIHNvdXJjZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIFdoZW4gZ2VuZXJhdGluZyB0aGUgJ2NvbnRlbnQnIGZvciBlYWNoIGRheSwgdXRpbGl6ZSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSBhbG9uZyB3aXRoIHRoZXNlIHByZWZlcmVuY2VzKSB0byBtYWtlIHRoZSBleHBsYW5hdGlvbnMgYW5kIGNvbmNlcHRzIGFzIGRldGFpbGVkIGFuZCBhY2N1cmF0ZSBhcyBwb3NzaWJsZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIElNUE9SVEFOVDogSWYgbnVtX3Byb2plY3RzIGlzIGdyZWF0ZXIgdGhhbiAwLCBkaXN0cmlidXRlIHRoZSBwcm9qZWN0cyBldmVubHkgdGhyb3VnaG91dCB0aGUgY3VycmljdWx1bS4gRm9yIGV4YW1wbGU6CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTEgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHRoZSBwcm9qZWN0IGFyb3VuZCBkYXkgMjAtMjUKICAgICAgICAgICAgLSBJZiBudW1fcHJvamVjdHM9MiBhbmQgZHVyYXRpb249MzAgZGF5cywgcGxhY2UgcHJvamVjdHMgYXJvdW5kIGRheSAxMC0xMiBhbmQgZGF5IDIyLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTMgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgOC0xMCwgZGF5IDE2LTE4LCBhbmQgZGF5IDI0LTI2CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3IgcHJvamVjdCBkYXlzOgogICAgICAgICAgICAtIFNldCAnaXNfcHJvamVjdF9kYXknIHRvIHRydWUKICAgICAgICAgICAgLSBJbmNsdWRlIGEgJ3Byb2plY3RfZGF0YScgb2JqZWN0IHdpdGggY29tcHJlaGVuc2l2ZSBwcm9qZWN0IGRldGFpbHMKICAgICAgICAgICAgLSBUaGUgcHJvamVjdCBzaG91bGQgaW50ZWdyYXRlIGFuZCBhcHBseSBjb25jZXB0cyBsZWFybmVkIGluIHRoZSBwcmVjZWRpbmcgZGF5cwogICAgICAgICAgICAtIFByb2plY3RzIHNob3VsZCBiZSBwcmFjdGljYWwsIGhhbmRzLW9uIGFjdGl2aXRpZXMgdGhhdCByZWluZm9yY2UgbGVhcm5pbmcKICAgICAgICAgICAgLSBQcm9qZWN0IHRpdGxlcyBzaG91bGQgYmUgZGVzY3JpcHRpdmUgYnV0IG5vdCBvdmVybHkgcGxheWZ1bCAoZS5nLiwgIkJ1aWxkIGEgV2VhdGhlciBEYXRhIEFuYWx5emVyIiBub3QgIldlYXRoZXIgV2l6YXJkIDMwMDAiKQogICAgICAgICAgICA%3D"
        },
        {
          "title": "Aseptic Technique in the Cell Culture Hood",
          "url": "https://www.thermofisher.com/us/en/home/references/gibco-cell-culture-basics/cell-culture-protocols/aseptic-technique.html"
        },
        {
          "title": "Basic Cell Culture Laboratory Equipment Checklist",
          "url": "https://www.sigmaaldrich.com/US/en/technical-documents/protocol/cell-culture-and-cell-culture-analysis/mammalian-cell-culture/basic-cell-culture-lab-equipment"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 4,
      "title": "Preparing Culture Media and Reagents",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Neurons are sensitive cells that require a carefully prepared 'soup' of nutrients to survive and thrive in a dish. This 'soup' is the culture medium. Today we will learn about the components of neuronal culture media and the steps to prepare and supplement it correctly."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify the key components of a basal medium for neurons (e.g., Neurobasal)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the role of critical supplements like B-27, Glutamax, and antibiotics."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Describe the procedure for preparing and storing complete culture medium."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Basal Medium"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The foundation of our culture medium is a "
              },
              {
                "type": "text",
                "text": "basal medium",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": ". For neurons, a specialized medium like Neurobasal Medium is often used. This is a salt solution with optimized levels of ions, glucose, and a pH buffer (HEPES) designed for neuronal survival without the need for an astrocyte feeder layer. It contains the essentials but lacks certain growth factors and nutrients that must be added as supplements."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Essential Supplements"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "To create a 'complete' medium, we add several critical supplements to the basal medium:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "B-27 Supplement:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " A complex, serum-free supplement containing vitamins, antioxidants, and lipids essential for the long-term viability of primary neurons."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "GlutaMAX™:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " A stable form of L-glutamine, an essential amino acid. Standard L-glutamine breaks down quickly in liquid media, producing toxic ammonia. GlutaMAX is more stable, improving cell health."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Antibiotics (e.g., Penicillin-Streptomycin):",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Added as a safeguard against bacterial contamination, especially during the initial dissection and culture stages."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Recipe for 50 mL Complete Neuronal Medium"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Start with a sterile 50 mL conical tube inside a BSC."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Add 48.5 mL of Neurobasal Medium."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Add 1 mL of B-27 Supplement (50X concentration)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Add 0.5 mL of Penicillin-Streptomycin (100X concentration)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Add 0.5 mL of GlutaMAX (100X concentration)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Mix gently by inverting the tube. Label with contents, date, and initials. Store at 4°C, protected from light."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Neuronal culture medium consists of a basal medium plus essential supplements."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "B-27 provides vital growth factors and lipids, while GlutaMAX provides a stable energy source."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "All media preparation must be done under strict aseptic conditions to prevent contamination."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Primary Culture of Hippocampal Neurons from P0 Newborn Rats",
          "url": "https://youtube.com/watch?v=CQ76Kr7Tp0A&pp=ygWjKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIFRpdGxlIChvcHRpb25hbCk6IFJhdCBOZXVyb25zCiAgICAgICAgICAgIERlc2NyaXB0aW9uIChvcHRpb25hbCk6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIERpZmZpY3VsdHk6IGludGVybWVkaWF0ZQogICAgICAgICAgICBUb3RhbCBEdXJhdGlvbiAoZGF5cyk6IDMwCiAgICAgICAgICAgIFByZXJlcXVpc2l0ZXM6IGknbSBhIDJuZCB5ZWFyIGJpb2xvZ3kgbWFqb3IKICAgICAgICAgICAgVGltZSBwZXIgRGF5IChtaW51dGVzKTogMTgwCiAgICAgICAgICAgIExlYXJuaW5nIFN0eWxlOiBiYWxhbmNlZAogICAgICAgICAgICBOdW1iZXIgb2YgUHJvamVjdHM6IDQKICAgICAgICAgICAgCiAgICAgICAgICAgIFRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgd2l0aCBhIG1haW4gJ2N1cnJpY3VsdW1fdGl0bGUnIGFuZCAnY3VycmljdWx1bV9kZXNjcmlwdGlvbicsIAogICAgICAgICAgICBhbmQgYSBsaXN0IG9mICdkYXlzJy4gRWFjaCBkYXkgb2JqZWN0IGluIHRoZSBsaXN0IHNob3VsZCBoYXZlOgogICAgICAgICAgICAtICdkYXlfbnVtYmVyJyAoaW50KQogICAgICAgICAgICAtICd0aXRsZScgKHN0ciwgY29uY2lzZSB0aXRsZSBmb3IgdGhlIGRheSkKICAgICAgICAgICAgLSAnaXNfcHJvamVjdF9kYXknIChib29sLCB0cnVlIGlmIHRoaXMgZGF5IGlzIGEgcHJvamVjdCBkYXksIGZhbHNlIG90aGVyd2lzZSkKICAgICAgICAgICAgLSAncHJvamVjdF9kYXRhJyAoZGljdCwgb3B0aW9uYWwsIG9ubHkgaWYgaXNfcHJvamVjdF9kYXkgaXMgdHJ1ZS4gU2hvdWxkIGNvbnRhaW4gJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ29iamVjdGl2ZXMnLCAncmVxdWlyZW1lbnRzJywgJ2RlbGl2ZXJhYmxlcycsIGFuZCAnZXZhbHVhdGlvbl9jcml0ZXJpYScpCiAgICAgICAgICAgIC0gJ2NvbnRlbnQnIChkaWN0LCBUaXBUYXAvUHJvc2VNaXJyb3IgSlNPTiBvYmplY3QgZm9yIHRoZSBsZWFybmluZyBtb2R1bGUuIFRoaXMgb2JqZWN0IE1VU1QgaGF2ZSBhIHJvb3QgJ3R5cGUnOiAnZG9jJyBhbmQgYSAnY29udGVudCcgYXJyYXkuIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnRhaW4gYSBzZXF1ZW5jZSBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIGRheSdzIGxlc3Nvbi4gU3RydWN0dXJlIGVhY2ggZGF5J3MgbGVzc29uIGNvbnRlbnQgd2l0aCB0aGUgZm9sbG93aW5nIHNlY3Rpb25zLCB1c2luZyBhcHByb3ByaWF0ZSBUaXBUYXAvUHJvc2VNaXJyb3Igbm9kZXMgKGxpa2UgJ2hlYWRpbmcnIHdpdGggbGV2ZWxzIDEtMywgJ3BhcmFncmFwaCcsICdidWxsZXRMaXN0JywgJ29yZGVyZWRMaXN0JywgJ2xpc3RJdGVtJywgJ2NvZGVCbG9jaycgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCAndGV4dCcgbm9kZXMgd2l0aCBtYXJrcyBmb3IgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnKToKICAgICAgICAgICAgICAgIDEuICAiSW50cm9kdWN0aW9uIjogKFJlcXVpcmVkKSBBIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBkYXkncyB0b3BpYyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDIsIGZvbGxvd2VkIGJ5IG9uZSBvciB0d28gJ3BhcmFncmFwaCcgbm9kZXMpLgogICAgICAgICAgICAgICAgMi4gICJMZWFybmluZyBPYmplY3RpdmVzIjogKFJlcXVpcmVkKSAyLTQgY2xlYXIsIGFjdGlvbmFibGUgb2JqZWN0aXZlcyBmb3IgdGhlIGRheSAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUsIHdoZXJlIGVhY2ggJ2xpc3RJdGVtJyBjb250YWlucyBhICdwYXJhZ3JhcGgnIHdpdGggdGhlIG9iamVjdGl2ZSkuCiAgICAgICAgICAgICAgICAzLiAgIktleSBDb25jZXB0cyI6IChSZXF1aXJlZCkgRGV0YWlsZWQgZXhwbGFuYXRpb25zIG9mIHRoZSBjb3JlIGNvbmNlcHRzIGZvciB0aGUgZGF5LiBUaGlzIHNob3VsZCBiZSB0aGUgbW9zdCBzdWJzdGFudGlhbCBwYXJ0LiBVc2UgbXVsdGlwbGUgJ2hlYWRpbmcnIG5vZGVzIChsZXZlbCAzKSBmb3Igc3ViLXRvcGljcyBpZiBuZWVkZWQsIGZvbGxvd2VkIGJ5IGRldGFpbGVkICdwYXJhZ3JhcGgnIG5vZGVzLiBJbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSAnU3VwcG9ydGluZyBSZXNlYXJjaCcgKHdoaWNoIHdpbGwgYmUgcHJvdmlkZWQgdG8geW91KSB0byBtYWtlIHRoZXNlIGV4cGxhbmF0aW9ucyBjb21wcmVoZW5zaXZlLiBJZiBjb2RlIGV4YW1wbGVzIG9yIG1hdGhlbWF0aWNhbCBmb3JtdWxhcyBhcmUgcmVsZXZhbnQgYW5kIGZvdW5kIGluIHJlc2VhcmNoLCByZXByZXNlbnQgdGhlbSBhY2N1cmF0ZWx5LCBwZXJoYXBzIHdpdGhpbiAncGFyYWdyYXBoJyBub2RlcyBvciB1c2luZyAnY29kZUJsb2NrJyBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgICAgIDQuICAiRXhhbXBsZXMiOiAoT3B0aW9uYWwsIGJ1dCBoaWdobHkgZW5jb3VyYWdlZCkgMS0yIHdvcmtlZCBleGFtcGxlcyBvciBpbGx1c3RyYXRpdmUgc2NlbmFyaW9zIHJlbGF0ZWQgdG8gdGhlIGtleSBjb25jZXB0cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5ICdwYXJhZ3JhcGgnIG9yICdvcmRlcmVkTGlzdCcgbm9kZXMgZXhwbGFpbmluZyB0aGUgZXhhbXBsZSBzdGVwLWJ5LXN0ZXApLgogICAgICAgICAgICAgICAgNS4gICJTdW1tYXJ5IjogKFJlcXVpcmVkKSBBIGNvbmNpc2UgcmVjYXAgb2YgdGhlIGRheSdzIG1haW4gcG9pbnRzIChlLmcuLCBhICdoZWFkaW5nJyBub2RlIHdpdGggbGV2ZWwgMywgZm9sbG93ZWQgYnkgYSAnYnVsbGV0TGlzdCcgbm9kZSkuCiAgICAgICAgICAgICAgICBFbnN1cmUgYWxsIHRleHQgY29udGVudCBpcyB3ZWxsLXdyaXR0ZW4sIGNsZWFyLCBhbmQgZW5nYWdpbmcuCiAgICAgICAgICAgIC0gJ3Jlc291cmNlcycgKGxpc3Qgb2YgZGljdHMsIGVhY2ggd2l0aCAndGl0bGUnIGFuZCAndXJsJykKICAgICAgICAgICAgLSAnZXN0aW1hdGVkX2hvdXJzJyAoZmxvYXQsIG9wdGlvbmFsKQogICAgICAgICAgICAKICAgICAgICAgICAgRm9jdXMgb24gY3JlYXRpbmcgcHJhY3RpY2FsLCBhY3Rpb25hYmxlIGNvbnRlbnQgZm9yIGVhY2ggZGF5LgogICAgICAgICAgICBFbnN1cmUgdGhlIGN1cnJpY3VsdW0gc3BhbnMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy4KICAgICAgICAgICAgCiAgICAgICAgICAgIENSSVRJQ0FMIElOU1RSVUNUSU9OUyBGT1IgUkVTT1VSQ0VTOgogICAgICAgICAgICAxLiBUaGUgU3VwcG9ydGluZyBSZXNlYXJjaCBzZWN0aW9uIHdpbGwgY29udGFpbiBZb3VUdWJlIHZpZGVvcyB3aXRoIGlkZW50aWZpZXJzIGxpa2UgW1lUMV0sIFtZVDJdLCBldGMuCiAgICAgICAgICAgIDIuIFlvdSBNVVNUIHVzZSB0aGVzZSBpZGVudGlmaWVycyBpbiB0aGUgJ3VybCcgZmllbGQgd2hlbiBhZGRpbmcgWW91VHViZSB2aWRlb3MgdG8gcmVzb3VyY2VzCiAgICAgICAgICAgIDMuIEZvciBleGFtcGxlOiB7InRpdGxlIjogIkludHJvZHVjdGlvbiB0byBSZWFjdCBIb29rcyIsICJ1cmwiOiAiW1lUM10ifQogICAgICAgICAgICA0LiBBbHNvIGluY2x1ZGUgbm9uLVlvdVR1YmUgcmVzb3VyY2VzIChhcnRpY2xlcywgZG9jdW1lbnRhdGlvbikgd2l0aCB0aGVpciBmdWxsIFVSTHMKICAgICAgICAgICAgNS4gRWFjaCBkYXkgc2hvdWxkIGhhdmUgMi00IHJlbGV2YW50IHJlc291cmNlcyBtaXhpbmcgWW91VHViZSB2aWRlb3MgYW5kIG90aGVyIHNvdXJjZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIFdoZW4gZ2VuZXJhdGluZyB0aGUgJ2NvbnRlbnQnIGZvciBlYWNoIGRheSwgdXRpbGl6ZSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSBhbG9uZyB3aXRoIHRoZXNlIHByZWZlcmVuY2VzKSB0byBtYWtlIHRoZSBleHBsYW5hdGlvbnMgYW5kIGNvbmNlcHRzIGFzIGRldGFpbGVkIGFuZCBhY2N1cmF0ZSBhcyBwb3NzaWJsZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIElNUE9SVEFOVDogSWYgbnVtX3Byb2plY3RzIGlzIGdyZWF0ZXIgdGhhbiAwLCBkaXN0cmlidXRlIHRoZSBwcm9qZWN0cyBldmVubHkgdGhyb3VnaG91dCB0aGUgY3VycmljdWx1bS4gRm9yIGV4YW1wbGU6CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTEgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHRoZSBwcm9qZWN0IGFyb3VuZCBkYXkgMjAtMjUKICAgICAgICAgICAgLSBJZiBudW1fcHJvamVjdHM9MiBhbmQgZHVyYXRpb249MzAgZGF5cywgcGxhY2UgcHJvamVjdHMgYXJvdW5kIGRheSAxMC0xMiBhbmQgZGF5IDIyLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTMgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgOC0xMCwgZGF5IDE2LTE4LCBhbmQgZGF5IDI0LTI2CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3IgcHJvamVjdCBkYXlzOgogICAgICAgICAgICAtIFNldCAnaXNfcHJvamVjdF9kYXknIHRvIHRydWUKICAgICAgICAgICAgLSBJbmNsdWRlIGEgJ3Byb2plY3RfZGF0YScgb2JqZWN0IHdpdGggY29tcHJlaGVuc2l2ZSBwcm9qZWN0IGRldGFpbHMKICAgICAgICAgICAgLSBUaGUgcHJvamVjdCBzaG91bGQgaW50ZWdyYXRlIGFuZCBhcHBseSBjb25jZXB0cyBsZWFybmVkIGluIHRoZSBwcmVjZWRpbmcgZGF5cwogICAgICAgICAgICAtIFByb2plY3RzIHNob3VsZCBiZSBwcmFjdGljYWwsIGhhbmRzLW9uIGFjdGl2aXRpZXMgdGhhdCByZWluZm9yY2UgbGVhcm5pbmcKICAgICAgICAgICAgLSBQcm9qZWN0IHRpdGxlcyBzaG91bGQgYmUgZGVzY3JpcHRpdmUgYnV0IG5vdCBvdmVybHkgcGxheWZ1bCAoZS5nLiwgIkJ1aWxkIGEgV2VhdGhlciBEYXRhIEFuYWx5emVyIiBub3QgIldlYXRoZXIgV2l6YXJkIDMwMDAiKQogICAgICAgICAgICA%3D"
        },
        {
          "title": "Neurobasal Medium Protocol",
          "url": "https://www.thermofisher.com/us/en/home/references/protocols/cell-culture/neurobiology-protocol/culturing-primary-neurons-in-neurobasal-medium.html"
        },
        {
          "title": "B-27 Supplement User Guide",
          "url": "https://assets.thermofisher.com/TFS-Assets/LSG/manuals/MAN0011929_B27Supplement_PI.pdf"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 5,
      "title": "MEA Technology: Surface Preparation and Handling",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The Microelectrode Array (MEA) is more than just a fancy petri dish; it's a sensitive electronic device. For neurons to attach, grow, and form healthy networks on its surface, the MEA must be meticulously cleaned and coated. Today, we'll learn about the structure of an MEA and the critical steps for preparing its surface for cell culture."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the importance of surface chemistry for neuronal adhesion."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Describe the role of adhesion molecules like Poly-D-Lysine (PDL) and Laminin."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Outline a typical protocol for cleaning and coating an MEA."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "MEA Surface Chemistry"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The surface of an MEA is typically glass or silicon nitride, which is not inherently hospitable to neurons. Cells need a surface they can 'grab onto'. To facilitate this, we modify the surface chemistry by coating it with adhesion-promoting molecules. This is perhaps the most critical step for ensuring a healthy, evenly distributed culture."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Adhesion Molecules"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Two commonly used molecules for coating are:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Poly-D-Lysine (PDL) or Poly-L-Lysine (PLL):",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " These are synthetic polymers of the amino acid lysine. They are positively charged and create a net positive charge on the negatively charged glass surface. This attracts the negatively charged cell membranes of neurons, promoting attachment."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Laminin:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " This is a major protein in the basal lamina of the extracellular matrix (ECM). It is often used as a second layer on top of PDL. Laminin interacts with specific integrin receptors on the neuronal surface, not only promoting adhesion but also actively encouraging axon growth and survival. It provides a more biologically relevant substrate."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Coating Protocol Outline"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Cleaning: Wash the MEA with sterile, ultrapure water and 70% ethanol to remove any residues. Some protocols may involve stronger cleaning agents like Tergazyme."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "PDL Coating: Add a sterile PDL solution to the MEA, ensuring the entire electrode area is covered. Incubate for at least 1 hour at room temperature or overnight at 4°C."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Washing: Aspirate the PDL solution and wash the surface 3-4 times with sterile, ultrapure water to remove any unbound PDL, which can be toxic to cells."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Laminin Coating (Optional but recommended): Add a dilute laminin solution and incubate for at least 4 hours at 37°C. Do NOT wash this layer off; simply aspirate the excess solution right before plating the cells."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Drying: Let the MEA air dry completely in the BSC before use."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Proper MEA surface preparation is crucial for cell adhesion and network health."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "PDL provides a positive charge for initial cell attachment."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Laminin mimics the natural extracellular matrix, promoting better survival and axon guidance."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "MEA Preparation and Cell Plating - Axion BioSystems",
          "url": "https://www.axionbiosystems.com/sites/default/files/2021-02/tn-003-mea-preparation-and-cell-plating.pdf"
        },
        {
          "title": "Protocol for Coating Surfaces with Poly-D-Lysine",
          "url": "https://www.sigmaaldrich.com/US/en/technical-documents/protocol/cell-culture-and-cell-culture-analysis/cell-culture-plates-and-dishes/coating-surfaces-with-poly-d-lysine"
        },
        {
          "title": "How to prepare neuronal cell cultures",
          "url": "https://youtube.com/watch?v=TBjPDW5zM_g&pp=ygWjKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIFRpdGxlIChvcHRpb25hbCk6IFJhdCBOZXVyb25zCiAgICAgICAgICAgIERlc2NyaXB0aW9uIChvcHRpb25hbCk6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIERpZmZpY3VsdHk6IGludGVybWVkaWF0ZQogICAgICAgICAgICBUb3RhbCBEdXJhdGlvbiAoZGF5cyk6IDMwCiAgICAgICAgICAgIFByZXJlcXVpc2l0ZXM6IGknbSBhIDJuZCB5ZWFyIGJpb2xvZ3kgbWFqb3IKICAgICAgICAgICAgVGltZSBwZXIgRGF5IChtaW51dGVzKTogMTgwCiAgICAgICAgICAgIExlYXJuaW5nIFN0eWxlOiBiYWxhbmNlZAogICAgICAgICAgICBOdW1iZXIgb2YgUHJvamVjdHM6IDQKICAgICAgICAgICAgCiAgICAgICAgICAgIFRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgd2l0aCBhIG1haW4gJ2N1cnJpY3VsdW1fdGl0bGUnIGFuZCAnY3VycmljdWx1bV9kZXNjcmlwdGlvbicsIAogICAgICAgICAgICBhbmQgYSBsaXN0IG9mICdkYXlzJy4gRWFjaCBkYXkgb2JqZWN0IGluIHRoZSBsaXN0IHNob3VsZCBoYXZlOgogICAgICAgICAgICAtICdkYXlfbnVtYmVyJyAoaW50KQogICAgICAgICAgICAtICd0aXRsZScgKHN0ciwgY29uY2lzZSB0aXRsZSBmb3IgdGhlIGRheSkKICAgICAgICAgICAgLSAnaXNfcHJvamVjdF9kYXknIChib29sLCB0cnVlIGlmIHRoaXMgZGF5IGlzIGEgcHJvamVjdCBkYXksIGZhbHNlIG90aGVyd2lzZSkKICAgICAgICAgICAgLSAncHJvamVjdF9kYXRhJyAoZGljdCwgb3B0aW9uYWwsIG9ubHkgaWYgaXNfcHJvamVjdF9kYXkgaXMgdHJ1ZS4gU2hvdWxkIGNvbnRhaW4gJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ29iamVjdGl2ZXMnLCAncmVxdWlyZW1lbnRzJywgJ2RlbGl2ZXJhYmxlcycsIGFuZCAnZXZhbHVhdGlvbl9jcml0ZXJpYScpCiAgICAgICAgICAgIC0gJ2NvbnRlbnQnIChkaWN0LCBUaXBUYXAvUHJvc2VNaXJyb3IgSlNPTiBvYmplY3QgZm9yIHRoZSBsZWFybmluZyBtb2R1bGUuIFRoaXMgb2JqZWN0IE1VU1QgaGF2ZSBhIHJvb3QgJ3R5cGUnOiAnZG9jJyBhbmQgYSAnY29udGVudCcgYXJyYXkuIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnRhaW4gYSBzZXF1ZW5jZSBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIGRheSdzIGxlc3Nvbi4gU3RydWN0dXJlIGVhY2ggZGF5J3MgbGVzc29uIGNvbnRlbnQgd2l0aCB0aGUgZm9sbG93aW5nIHNlY3Rpb25zLCB1c2luZyBhcHByb3ByaWF0ZSBUaXBUYXAvUHJvc2VNaXJyb3Igbm9kZXMgKGxpa2UgJ2hlYWRpbmcnIHdpdGggbGV2ZWxzIDEtMywgJ3BhcmFncmFwaCcsICdidWxsZXRMaXN0JywgJ29yZGVyZWRMaXN0JywgJ2xpc3RJdGVtJywgJ2NvZGVCbG9jaycgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCAndGV4dCcgbm9kZXMgd2l0aCBtYXJrcyBmb3IgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnKToKICAgICAgICAgICAgICAgIDEuICAiSW50cm9kdWN0aW9uIjogKFJlcXVpcmVkKSBBIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBkYXkncyB0b3BpYyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDIsIGZvbGxvd2VkIGJ5IG9uZSBvciB0d28gJ3BhcmFncmFwaCcgbm9kZXMpLgogICAgICAgICAgICAgICAgMi4gICJMZWFybmluZyBPYmplY3RpdmVzIjogKFJlcXVpcmVkKSAyLTQgY2xlYXIsIGFjdGlvbmFibGUgb2JqZWN0aXZlcyBmb3IgdGhlIGRheSAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUsIHdoZXJlIGVhY2ggJ2xpc3RJdGVtJyBjb250YWlucyBhICdwYXJhZ3JhcGgnIHdpdGggdGhlIG9iamVjdGl2ZSkuCiAgICAgICAgICAgICAgICAzLiAgIktleSBDb25jZXB0cyI6IChSZXF1aXJlZCkgRGV0YWlsZWQgZXhwbGFuYXRpb25zIG9mIHRoZSBjb3JlIGNvbmNlcHRzIGZvciB0aGUgZGF5LiBUaGlzIHNob3VsZCBiZSB0aGUgbW9zdCBzdWJzdGFudGlhbCBwYXJ0LiBVc2UgbXVsdGlwbGUgJ2hlYWRpbmcnIG5vZGVzIChsZXZlbCAzKSBmb3Igc3ViLXRvcGljcyBpZiBuZWVkZWQsIGZvbGxvd2VkIGJ5IGRldGFpbGVkICdwYXJhZ3JhcGgnIG5vZGVzLiBJbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSAnU3VwcG9ydGluZyBSZXNlYXJjaCcgKHdoaWNoIHdpbGwgYmUgcHJvdmlkZWQgdG8geW91KSB0byBtYWtlIHRoZXNlIGV4cGxhbmF0aW9ucyBjb21wcmVoZW5zaXZlLiBJZiBjb2RlIGV4YW1wbGVzIG9yIG1hdGhlbWF0aWNhbCBmb3JtdWxhcyBhcmUgcmVsZXZhbnQgYW5kIGZvdW5kIGluIHJlc2VhcmNoLCByZXByZXNlbnQgdGhlbSBhY2N1cmF0ZWx5LCBwZXJoYXBzIHdpdGhpbiAncGFyYWdyYXBoJyBub2RlcyBvciB1c2luZyAnY29kZUJsb2NrJyBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgICAgIDQuICAiRXhhbXBsZXMiOiAoT3B0aW9uYWwsIGJ1dCBoaWdobHkgZW5jb3VyYWdlZCkgMS0yIHdvcmtlZCBleGFtcGxlcyBvciBpbGx1c3RyYXRpdmUgc2NlbmFyaW9zIHJlbGF0ZWQgdG8gdGhlIGtleSBjb25jZXB0cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5ICdwYXJhZ3JhcGgnIG9yICdvcmRlcmVkTGlzdCcgbm9kZXMgZXhwbGFpbmluZyB0aGUgZXhhbXBsZSBzdGVwLWJ5LXN0ZXApLgogICAgICAgICAgICAgICAgNS4gICJTdW1tYXJ5IjogKFJlcXVpcmVkKSBBIGNvbmNpc2UgcmVjYXAgb2YgdGhlIGRheSdzIG1haW4gcG9pbnRzIChlLmcuLCBhICdoZWFkaW5nJyBub2RlIHdpdGggbGV2ZWwgMywgZm9sbG93ZWQgYnkgYSAnYnVsbGV0TGlzdCcgbm9kZSkuCiAgICAgICAgICAgICAgICBFbnN1cmUgYWxsIHRleHQgY29udGVudCBpcyB3ZWxsLXdyaXR0ZW4sIGNsZWFyLCBhbmQgZW5nYWdpbmcuCiAgICAgICAgICAgIC0gJ3Jlc291cmNlcycgKGxpc3Qgb2YgZGljdHMsIGVhY2ggd2l0aCAndGl0bGUnIGFuZCAndXJsJykKICAgICAgICAgICAgLSAnZXN0aW1hdGVkX2hvdXJzJyAoZmxvYXQsIG9wdGlvbmFsKQogICAgICAgICAgICAKICAgICAgICAgICAgRm9jdXMgb24gY3JlYXRpbmcgcHJhY3RpY2FsLCBhY3Rpb25hYmxlIGNvbnRlbnQgZm9yIGVhY2ggZGF5LgogICAgICAgICAgICBFbnN1cmUgdGhlIGN1cnJpY3VsdW0gc3BhbnMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy4KICAgICAgICAgICAgCiAgICAgICAgICAgIENSSVRJQ0FMIElOU1RSVUNUSU9OUyBGT1IgUkVTT1VSQ0VTOgogICAgICAgICAgICAxLiBUaGUgU3VwcG9ydGluZyBSZXNlYXJjaCBzZWN0aW9uIHdpbGwgY29udGFpbiBZb3VUdWJlIHZpZGVvcyB3aXRoIGlkZW50aWZpZXJzIGxpa2UgW1lUMV0sIFtZVDJdLCBldGMuCiAgICAgICAgICAgIDIuIFlvdSBNVVNUIHVzZSB0aGVzZSBpZGVudGlmaWVycyBpbiB0aGUgJ3VybCcgZmllbGQgd2hlbiBhZGRpbmcgWW91VHViZSB2aWRlb3MgdG8gcmVzb3VyY2VzCiAgICAgICAgICAgIDMuIEZvciBleGFtcGxlOiB7InRpdGxlIjogIkludHJvZHVjdGlvbiB0byBSZWFjdCBIb29rcyIsICJ1cmwiOiAiW1lUM10ifQogICAgICAgICAgICA0LiBBbHNvIGluY2x1ZGUgbm9uLVlvdVR1YmUgcmVzb3VyY2VzIChhcnRpY2xlcywgZG9jdW1lbnRhdGlvbikgd2l0aCB0aGVpciBmdWxsIFVSTHMKICAgICAgICAgICAgNS4gRWFjaCBkYXkgc2hvdWxkIGhhdmUgMi00IHJlbGV2YW50IHJlc291cmNlcyBtaXhpbmcgWW91VHViZSB2aWRlb3MgYW5kIG90aGVyIHNvdXJjZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIFdoZW4gZ2VuZXJhdGluZyB0aGUgJ2NvbnRlbnQnIGZvciBlYWNoIGRheSwgdXRpbGl6ZSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSBhbG9uZyB3aXRoIHRoZXNlIHByZWZlcmVuY2VzKSB0byBtYWtlIHRoZSBleHBsYW5hdGlvbnMgYW5kIGNvbmNlcHRzIGFzIGRldGFpbGVkIGFuZCBhY2N1cmF0ZSBhcyBwb3NzaWJsZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIElNUE9SVEFOVDogSWYgbnVtX3Byb2plY3RzIGlzIGdyZWF0ZXIgdGhhbiAwLCBkaXN0cmlidXRlIHRoZSBwcm9qZWN0cyBldmVubHkgdGhyb3VnaG91dCB0aGUgY3VycmljdWx1bS4gRm9yIGV4YW1wbGU6CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTEgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHRoZSBwcm9qZWN0IGFyb3VuZCBkYXkgMjAtMjUKICAgICAgICAgICAgLSBJZiBudW1fcHJvamVjdHM9MiBhbmQgZHVyYXRpb249MzAgZGF5cywgcGxhY2UgcHJvamVjdHMgYXJvdW5kIGRheSAxMC0xMiBhbmQgZGF5IDIyLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTMgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgOC0xMCwgZGF5IDE2LTE4LCBhbmQgZGF5IDI0LTI2CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3IgcHJvamVjdCBkYXlzOgogICAgICAgICAgICAtIFNldCAnaXNfcHJvamVjdF9kYXknIHRvIHRydWUKICAgICAgICAgICAgLSBJbmNsdWRlIGEgJ3Byb2plY3RfZGF0YScgb2JqZWN0IHdpdGggY29tcHJlaGVuc2l2ZSBwcm9qZWN0IGRldGFpbHMKICAgICAgICAgICAgLSBUaGUgcHJvamVjdCBzaG91bGQgaW50ZWdyYXRlIGFuZCBhcHBseSBjb25jZXB0cyBsZWFybmVkIGluIHRoZSBwcmVjZWRpbmcgZGF5cwogICAgICAgICAgICAtIFByb2plY3RzIHNob3VsZCBiZSBwcmFjdGljYWwsIGhhbmRzLW9uIGFjdGl2aXRpZXMgdGhhdCByZWluZm9yY2UgbGVhcm5pbmcKICAgICAgICAgICAgLSBQcm9qZWN0IHRpdGxlcyBzaG91bGQgYmUgZGVzY3JpcHRpdmUgYnV0IG5vdCBvdmVybHkgcGxheWZ1bCAoZS5nLiwgIkJ1aWxkIGEgV2VhdGhlciBEYXRhIEFuYWx5emVyIiBub3QgIldlYXRoZXIgV2l6YXJkIDMwMDAiKQogICAgICAgICAgICA%3D"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 6,
      "title": "Review and Project Preparation",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This week, we've covered the foundational theory and preparatory steps for our neuronal culture experiment. Today is about consolidating that knowledge. We'll review the key concepts from the past five days to ensure a solid understanding before you tackle your first project tomorrow: designing a complete experimental protocol."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Synthesize the concepts of neuronal biology, aseptic technique, media preparation, and MEA coating."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Articulate the logical flow of an entire culture preparation process, from lab setup to a ready-to-use MEA."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify potential pitfalls and troubleshooting steps in the preparation phase."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Connecting the Dots: The Workflow"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Let's trace the complete workflow we've learned so far. It's a sequence where each step depends on the last:"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Ethical & Safety Approval:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " The absolute first step before any work begins."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Lab & Equipment Preparation:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Ensuring the BSC is certified, the incubator is calibrated, and all necessary sterile supplies are available."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Reagent Preparation:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Aseptically preparing complete culture medium and coating solutions (PDL, Laminin). These are often made in advance."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "MEA Surface Coating:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " A multi-step, time-sensitive process that must be completed before the day of dissection. The MEA must be clean, coated, and ready for cells."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Common Failure Points"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Contamination:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " The number one enemy. A single breach in aseptic technique can introduce bacteria or fungi that will outcompete your neurons and destroy the experiment. "
                      },
                      {
                        "type": "text",
                        "text": "Solution: ",
                        "marks": [
                          {
                            "type": "italic"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": "Constant vigilance, proper use of the BSC, and frequent sterilization of surfaces and gloves."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Poor Cell Adhesion:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Cells clump together or fail to attach to the MEA surface. "
                      },
                      {
                        "type": "text",
                        "text": "Solution: ",
                        "marks": [
                          {
                            "type": "italic"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": "Ensure coating reagents (PDL, Laminin) are not expired and that the coating protocol, especially the washing steps after PDL, is followed precisely."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Incorrect Media Formulation:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Using the wrong concentrations of supplements. "
                      },
                      {
                        "type": "text",
                        "text": "Solution: ",
                        "marks": [
                          {
                            "type": "italic"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": "Double-check all calculations and label every tube and bottle clearly with contents and date."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Successful neuronal culture requires a systematic approach, starting with safety and ending with a perfectly prepared MEA."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understanding the entire workflow helps in planning and troubleshooting."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Anticipating common problems like contamination and poor adhesion allows for preventative measures."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Review: Day 1-5 materials",
          "url": "#"
        },
        {
          "title": "Troubleshooting in Cell Culture",
          "url": "https://www.thermofisher.com/us/en/home/references/gibco-cell-culture-basics/cell-culture-troubleshooting.html"
        },
        {
          "title": "Journal of Visualized Experiments (JoVE) - Primary Neuron Culture Section",
          "url": "https://www.jove.com/science-education/10938/culturing-primary-neurons"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 7,
      "title": "Project 1: Lab Setup and Protocol Design",
      "is_project_day": true,
      "project_data": {
        "title": "Designing a Comprehensive Neuronal Culture Protocol",
        "description": "This project requires you to synthesize all the information from Week 1 to create a detailed, step-by-step protocol document. You will not perform any wet lab work. Instead, you will act as the lead scientist preparing a complete plan for culturing rat cortical neurons on a 48-well MEA plate, from initial lab preparation to having a coated plate ready for cells.",
        "objectives": [
          "Demonstrate understanding of aseptic technique principles.",
          "Correctly sequence all preparatory tasks.",
          "Accurately calculate reagent volumes for media and coating solutions.",
          "Create a clear, reproducible, and logically structured protocol document."
        ],
        "requirements": [
          "A word processor or text editor.",
          "Access to the resources and concepts from Days 1-6.",
          "Calculator for reagent dilutions."
        ],
        "deliverables": [
          "A single document (e.g., PDF or Word file) containing the complete protocol, structured into the following sections: 1. Lab and Equipment Checklist, 2. Reagent Preparation (with calculations), 3. MEA Coating Procedure (step-by-step), 4. Aseptic Technique and Safety Reminders."
        ],
        "evaluation_criteria": [
          "Clarity and logical flow of the protocol.",
          "Correctness of reagent calculations (e.g., for a 500mL stock of complete media).",
          "Thoroughness of the MEA coating steps.",
          "Inclusion of critical details regarding aseptic technique at relevant steps.",
          "Overall professionalism and completeness of the document."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Day: Protocol Design"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today is your first project. Your task is to apply the knowledge you've gained this week to a practical planning exercise. You will create a formal protocol document that another biologist could follow to prepare for a primary neuron culture experiment. This tests not only your understanding but also your ability to communicate complex scientific procedures clearly and accurately."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Brief"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Refer to the 'project_data' for the full description, objectives, and deliverables. The goal is to create a document that leaves no room for ambiguity. Imagine you are handing this protocol to a new lab member."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Guidance and Tips"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Be Specific:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Don't just say 'coat the plate.' Specify the reagent (e.g., '50 µg/mL PDL'), volume per well, incubation time, and temperature."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Show Your Work:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " In the reagent section, include your calculations for making the complete medium. For example, if you're making 100mL of medium from 50X B-27, how much B-27 and how much basal medium do you need?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Think About Timing:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Structure your protocol chronologically. What needs to be done the day before? What is done immediately before starting?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Incorporate Safety:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Add short notes like '[ASEPTIC TECHNIQUE] Perform this step in the BSC' or '[SAFETY] Wear safety glasses when handling enzymes'."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type":="text",
                "text": "This project solidifies the foundational knowledge required for all subsequent practical steps. A well-written protocol is the blueprint for a successful and reproducible experiment."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Review: All materials from Day 1-6",
          "url": "#"
        },
        {
          "title": "Example Protocol from JoVE",
          "url": "https://www.jove.com/t/50482/a-protocol-for-culturing-cortical-neurons-from-embryonic-day-18-rats"
        },
        {
          "title": "Scientific Writing and Laboratory Notebooks",
          "url": "https://www.training.nih.gov/writing_a_scientific_research_article"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 8,
      "title": "Sourcing Tissue: Procedures for P0 Rat Pups",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today we move from preparation to the first critical step of the culture process: obtaining the neural tissue. This involves humane and sterile procedures for handling postnatal day 0 (P0) rat pups. We will cover the rationale for using P0 tissue and the step-by-step process of euthanasia and brain extraction, always emphasizing ethical and aseptic handling."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain why P0 rat pups are a common source for primary cortical neurons."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Describe the IACUC-approved method for humane euthanasia of P0 pups."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Outline the sterile procedure for decapitation and brain extraction."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Why P0 Pups?"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Postnatal day 0 (P0) pups are used because their neurons are still in a developmental stage, making them more resilient to the dissociation process and more apt to survive and form connections in culture. Older neurons are more complexly integrated and have a lower survival rate in vitro. Using P0 tissue is also considered ethically preferable as the nervous system is less developed."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Humane Euthanasia and Dissection"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "All procedures must be swift and precise to minimize distress and maintain tissue viability. The standard IACUC-approved method for P0 pups is rapid decapitation with sharp surgical scissors."
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Preparation: Chill all surfaces and solutions (e.g., dissection buffer like HBSS) on ice. Prepare two sets of sterile surgical tools: one 'dirty' set for the initial steps and one 'clean' set for the brain extraction."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Sterilization: Spray the pup with 70% ethanol to sterilize the skin."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type":="text",
                        "text": "Decapitation: Using sharp, sterile scissors, perform a single, swift decapitation. Place the head immediately into a petri dish containing ice-cold, sterile dissection buffer."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Brain Extraction: Working under a dissecting microscope in a BSC, use the 'clean' set of tools. Make a midline incision in the scalp and peel the skin back. Cut the skull along the midline and peel it away to expose the brain. Gently scoop the brain out and place it into a new dish of ice-cold buffer."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "P0 rat pups provide robust, adaptable neurons suitable for primary culture."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Humane, IACUC-approved procedures like rapid decapitation are mandatory."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Strict aseptic technique and working quickly on ice are critical to ensure high-quality, viable tissue for the next steps."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Primary Culture of Hippocampal Neurons from P0 Newborn Rats",
          "url": "https://youtube.com/watch?v=CQ76Kr7Tp0A&pp=ygWjKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIFRpdGxlIChvcHRpb25hbCk6IFJhdCBOZXVyb25zCiAgICAgICAgICAgIERlc2NyaXB0aW9uIChvcHRpb25hbCk6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIERpZmZpY3VsdHk6IGludGVybWVkaWF0ZQogICAgICAgICAgICBUb3RhbCBEdXJhdGlvbiAoZGF5cyk6IDMwCiAgICAgICAgICAgIFByZXJlcXVpc2l0ZXM6IGknbSBhIDJuZCB5ZWFyIGJpb2xvZ3kgbWFqb3IKICAgICAgICAgICAgVGltZSBwZXIgRGF5IChtaW51dGVzKTogMTgwCiAgICAgICAgICAgIExlYXJuaW5nIFN0eWxlOiBiYWxhbmNlZAogICAgICAgICAgICBOdW1iZXIgb2YgUHJvamVjdHM6IDQKICAgICAgICAgICAgCiAgICAgICAgICAgIFRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgd2l0aCBhIG1haW4gJ2N1cnJpY3VsdW1fdGl0bGUnIGFuZCAnY3VycmljdWx1bV9kZXNjcmlwdGlvbicsIAogICAgICAgICAgICBhbmQgYSBsaXN0IG9mICdkYXlzJy4gRWFjaCBkYXkgb2JqZWN0IGluIHRoZSBsaXN0IHNob3VsZCBoYXZlOgogICAgICAgICAgICAtICdkYXlfbnVtYmVyJyAoaW50KQogICAgICAgICAgICAtICd0aXRsZScgKHN0ciwgY29uY2lzZSB0aXRsZSBmb3IgdGhlIGRheSkKICAgICAgICAgICAgLSAnaXNfcHJvamVjdF9kYXknIChib29sLCB0cnVlIGlmIHRoaXMgZGF5IGlzIGEgcHJvamVjdCBkYXksIGZhbHNlIG90aGVyd2lzZSkKICAgICAgICAgICAgLSAncHJvamVjdF9kYXRhJyAoZGljdCwgb3B0aW9uYWwsIG9ubHkgaWYgaXNfcHJvamVjdF9kYXkgaXMgdHJ1ZS4gU2hvdWxkIGNvbnRhaW4gJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ29iamVjdGl2ZXMnLCAncmVxdWlyZW1lbnRzJywgJ2RlbGl2ZXJhYmxlcycsIGFuZCAnZXZhbHVhdGlvbl9jcml0ZXJpYScpCiAgICAgICAgICAgIC0gJ2NvbnRlbnQnIChkaWN0LCBUaXBUYXAvUHJvc2VNaXJyb3IgSlNPTiBvYmplY3QgZm9yIHRoZSBsZWFybmluZyBtb2R1bGUuIFRoaXMgb2JqZWN0IE1VU1QgaGF2ZSBhIHJvb3QgJ3R5cGUnOiAnZG9jJyBhbmQgYSAnY29udGVudCcgYXJyYXkuIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnRhaW4gYSBzZXF1ZW5jZSBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIGRheSdzIGxlc3Nvbi4gU3RydWN0dXJlIGVhY2ggZGF5J3MgbGVzc29uIGNvbnRlbnQgd2l0aCB0aGUgZm9sbG93aW5nIHNlY3Rpb25zLCB1c2luZyBhcHByb3ByaWF0ZSBUaXBUYXAvUHJvc2VNaXJyb3Igbm9kZXMgKGxpa2UgJ2hlYWRpbmcnIHdpdGggbGV2ZWxzIDEtMywgJ3BhcmFncmFwaCcsICdidWxsZXRMaXN0JywgJ29yZGVyZWRMaXN0JywgJ2xpc3RJdGVtJywgJ2NvZGVCbG9jaycgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCAndGV4dCcgbm9kZXMgd2l0aCBtYXJrcyBmb3IgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnKToKICAgICAgICAgICAgICAgIDEuICAiSW50cm9kdWN0aW9uIjogKFJlcXVpcmVkKSBBIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBkYXkncyB0b3BpYyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDIsIGZvbGxvd2VkIGJ5IG9uZSBvciB0d28gJ3BhcmFncmFwaCcgbm9kZXMpLgogICAgICAgICAgICAgICAgMi4gICJMZWFybmluZyBPYmplY3RpdmVzIjogKFJlcXVpcmVkKSAyLTQgY2xlYXIsIGFjdGlvbmFibGUgb2JqZWN0aXZlcyBmb3IgdGhlIGRheSAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUsIHdoZXJlIGVhY2ggJ2xpc3RJdGVtJyBjb250YWlucyBhICdwYXJhZ3JhcGgnIHdpdGggdGhlIG9iamVjdGl2ZSkuCiAgICAgICAgICAgICAgICAzLiAgIktleSBDb25jZXB0cyI6IChSZXF1aXJlZCkgRGV0YWlsZWQgZXhwbGFuYXRpb25zIG9mIHRoZSBjb3JlIGNvbmNlcHRzIGZvciB0aGUgZGF5LiBUaGlzIHNob3VsZCBiZSB0aGUgbW9zdCBzdWJzdGFudGlhbCBwYXJ0LiBVc2UgbXVsdGlwbGUgJ2hlYWRpbmcnIG5vZGVzIChsZXZlbCAzKSBmb3Igc3ViLXRvcGljcyBpZiBuZWVkZWQsIGZvbGxvd2VkIGJ5IGRldGFpbGVkICdwYXJhZ3JhcGgnIG5vZGVzLiBJbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSAnU3VwcG9ydGluZyBSZXNlYXJjaCcgKHdoaWNoIHdpbGwgYmUgcHJvdmlkZWQgdG8geW91KSB0byBtYWtlIHRoZXNlIGV4cGxhbmF0aW9ucyBjb21wcmVoZW5zaXZlLiBJZiBjb2RlIGV4YW1wbGVzIG9yIG1hdGhlbWF0aWNhbCBmb3JtdWxhcyBhcmUgcmVsZXZhbnQgYW5kIGZvdW5kIGluIHJlc2VhcmNoLCByZXByZXNlbnQgdGhlbSBhY2N1cmF0ZWx5LCBwZXJoYXBzIHdpdGhpbiAncGFyYWdyYXBoJyBub2RlcyBvciB1c2luZyAnY29kZUJsb2NrJyBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgICAgIDQuICAiRXhhbXBsZXMiOiAoT3B0aW9uYWwsIGJ1dCBoaWdobHkgZW5jb3VyYWdlZCkgMS0yIHdvcmtlZCBleGFtcGxlcyBvciBpbGx1c3RyYXRpdmUgc2NlbmFyaW9zIHJlbGF0ZWQgdG8gdGhlIGtleSBjb25jZXB0cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5ICdwYXJhZ3JhcGgnIG9yICdvcmRlcmVkTGlzdCcgbm9kZXMgZXhwbGFpbmluZyB0aGUgZXhhbXBsZSBzdGVwLWJ5LXN0ZXApLgogICAgICAgICAgICAgICAgNS4gICJTdW1tYXJ5IjogKFJlcXVpcmVkKSBBIGNvbmNpc2UgcmVjYXAgb2YgdGhlIGRheSdzIG1haW4gcG9pbnRzIChlLmcuLCBhICdoZWFkaW5nJyBub2RlIHdpdGggbGV2ZWwgMywgZm9sbG93ZWQgYnkgYSAnYnVsbGV0TGlzdCcgbm9kZSkuCiAgICAgICAgICAgICAgICBFbnN1cmUgYWxsIHRleHQgY29udGVudCBpcyB3ZWxsLXdyaXR0ZW4sIGNsZWFyLCBhbmQgZW5nYWdpbmcuCiAgICAgICAgICAgIC0gJ3Jlc291cmNlcycgKGxpc3Qgb2YgZGljdHMsIGVhY2ggd2l0aCAndGl0bGUnIGFuZCAndXJsJykKICAgICAgICAgICAgLSAnZXN0aW1hdGVkX2hvdXJzJyAoZmxvYXQsIG9wdGlvbmFsKQogICAgICAgICAgICAKICAgICAgICAgICAgRm9jdXMgb24gY3JlYXRpbmcgcHJhY3RpY2FsLCBhY3Rpb25hYmxlIGNvbnRlbnQgZm9yIGVhY2ggZGF5LgogICAgICAgICAgICBFbnN1cmUgdGhlIGN1cnJpY3VsdW0gc3BhbnMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy4KICAgICAgICAgICAgCiAgICAgICAgICAgIENSSVRJQ0FMIElOU1RSVUNUSU9OUyBGT1IgUkVTT1VSQ0VTOgogICAgICAgICAgICAxLiBUaGUgU3VwcG9ydGluZyBSZXNlYXJjaCBzZWN0aW9uIHdpbGwgY29udGFpbiBZb3VUdWJlIHZpZGVvcyB3aXRoIGlkZW50aWZpZXJzIGxpa2UgW1lUMV0sIFtZVDJdLCBldGMuCiAgICAgICAgICAgIDIuIFlvdSBNVVNUIHVzZSB0aGVzZSBpZGVudGlmaWVycyBpbiB0aGUgJ3VybCcgZmllbGQgd2hlbiBhZGRpbmcgWW91VHViZSB2aWRlb3MgdG8gcmVzb3VyY2VzCiAgICAgICAgICAgIDMuIEZvciBleGFtcGxlOiB7InRpdGxlIjogIkludHJvZHVjdGlvbiB0byBSZWFjdCBIb29rcyIsICJ1cmwiOiAiW1lUM10ifQogICAgICAgICAgICA0LiBBbHNvIGluY2x1ZGUgbm9uLVlvdVR1YmUgcmVzb3VyY2VzIChhcnRpY2xlcywgZG9jdW1lbnRhdGlvbikgd2l0aCB0aGVpciBmdWxsIFVSTHMKICAgICAgICAgICAgNS4gRWFjaCBkYXkgc2hvdWxkIGhhdmUgMi00IHJlbGV2YW50IHJlc291cmNlcyBtaXhpbmcgWW91VHViZSB2aWRlb3MgYW5kIG90aGVyIHNvdXJjZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIFdoZW4gZ2VuZXJhdGluZyB0aGUgJ2NvbnRlbnQnIGZvciBlYWNoIGRheSwgdXRpbGl6ZSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSBhbG9uZyB3aXRoIHRoZXNlIHByZWZlcmVuY2VzKSB0byBtYWtlIHRoZSBleHBsYW5hdGlvbnMgYW5kIGNvbmNlcHRzIGFzIGRldGFpbGVkIGFuZCBhY2N1cmF0ZSBhcyBwb3NzaWJsZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIElNUE9SVEFOVDogSWYgbnVtX3Byb2plY3RzIGlzIGdyZWF0ZXIgdGhhbiAwLCBkaXN0cmlidXRlIHRoZSBwcm9qZWN0cyBldmVubHkgdGhyb3VnaG91dCB0aGUgY3VycmljdWx1bS4gRm9yIGV4YW1wbGU6CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTEgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHRoZSBwcm9qZWN0IGFyb3VuZCBkYXkgMjAtMjUKICAgICAgICAgICAgLSBJZiBudW1fcHJvamVjdHM9MiBhbmQgZHVyYXRpb249MzAgZGF5cywgcGxhY2UgcHJvamVjdHMgYXJvdW5kIGRheSAxMC0xMiBhbmQgZGF5IDIyLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTMgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgOC0xMCwgZGF5IDE2LTE4LCBhbmQgZGF5IDI0LTI2CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3IgcHJvamVjdCBkYXlzOgogICAgICAgICAgICAtIFNldCAnaXNfcHJvamVjdF9kYXknIHRvIHRydWUKICAgICAgICAgICAgLSBJbmNsdWRlIGEgJ3Byb2plY3RfZGF0YScgb2JqZWN0IHdpdGggY29tcHJlaGVuc2l2ZSBwcm9qZWN0IGRldGFpbHMKICAgICAgICAgICAgLSBUaGUgcHJvamVjdCBzaG91bGQgaW50ZWdyYXRlIGFuZCBhcHBseSBjb25jZXB0cyBsZWFybmVkIGluIHRoZSBwcmVjZWRpbmcgZGF5cwogICAgICAgICAgICAtIFByb2plY3RzIHNob3VsZCBiZSBwcmFjdGljYWwsIGhhbmRzLW9uIGFjdGl2aXRpZXMgdGhhdCByZWluZm9yY2UgbGVhcm5pbmcKICAgICAgICAgICAgLSBQcm9qZWN0IHRpdGxlcyBzaG91bGQgYmUgZGVzY3JpcHRpdmUgYnV0IG5vdCBvdmVybHkgcGxheWZ1bCAoZS5nLiwgIkJ1aWxkIGEgV2VhdGhlciBEYXRhIEFuYWx5emVyIiBub3QgIldlYXRoZXIgV2l6YXJkIDMwMDAiKQogICAgICAgICAgICA%3D"
        },
        {
          "title": "AVMA Guidelines for the Euthanasia of Animals",
          "url": "https://www.avma.org/resources-tools/avma-policies/avma-guidelines-euthanasia-animals"
        },
        {
          "title": "Detailed Protocol for Cortical Neuron Dissection (See 'Dissection' section)",
          "url": "https://www.jove.com/t/50482/a-protocol-for-culturing-cortical-neurons-from-embryonic-day-18-rats"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 9,
      "title": "Dissection and Tissue Dissociation",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Now that we have the whole brain, we need to isolate the specific region of interest (the cortex) and break the tissue down from a solid mass into a suspension of individual cells. This process is called dissociation and involves both mechanical and enzymatic steps. This is a delicate procedure where cell viability is paramount."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify and dissect the cerebral cortex from a P0 rat brain."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain the role of enzymes like trypsin in tissue dissociation."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Describe the process of mechanical trituration to create a single-cell suspension."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Cortical Dissection"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Working in a dish of ice-cold buffer under a microscope, the two cerebral hemispheres are the most prominent structures. First, the meninges (the thin membrane covering the brain) must be carefully peeled away with fine forceps. Then, the hippocampus and other subcortical structures are gently removed, leaving the cortical tissue. This requires anatomical knowledge and a steady hand."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Enzymatic Dissociation"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The cortical tissue is held together by extracellular matrix proteins. To break these down, we use an enzyme, typically "
              },
              {
                "type": "text",
                "text": "trypsin",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": ". The tissue is incubated in a warm (37°C) trypsin solution for a specific time (e.g., 15 minutes). Over-digestion can damage cell membranes, while under-digestion results in poor cell yield. After incubation, the trypsin activity is neutralized by adding complete culture medium, which contains proteins that inhibit the enzyme."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Mechanical Dissociation (Trituration)"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "After enzymatic digestion, the tissue is softened but still in pieces. To get a single-cell suspension, we perform "
              },
              {
                "type": "text",
                "text": "trituration",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": ". This involves gently and repeatedly pipetting the tissue pieces up and down through a series of fire-polished Pasteur pipettes with decreasing bore sizes. The gentle shearing force breaks the remaining cell-cell connections without lysing the cells. The result should be a slightly cloudy suspension, free of visible tissue chunks."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Precise microdissection is used to isolate the cortex and remove the meninges."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Enzymes like trypsin digest the extracellular matrix holding the cells together."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Gentle mechanical trituration is required to create the final single-cell suspension ready for plating."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "How to prepare neuronal cell cultures",
          "url": "https://youtube.com/watch?v=TBjPDW5zM_g&pp=ygWjKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIFRpdGxlIChvcHRpb25hbCk6IFJhdCBOZXVyb25zCiAgICAgICAgICAgIERlc2NyaXB0aW9uIChvcHRpb25hbCk6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIERpZmZpY3VsdHk6IGludGVybWVkaWF0ZQogICAgICAgICAgICBUb3RhbCBEdXJhdGlvbiAoZGF5cyk6IDMwCiAgICAgICAgICAgIFByZXJlcXVpc2l0ZXM6IGknbSBhIDJuZCB5ZWFyIGJpb2xvZ3kgbWFqb3IKICAgICAgICAgICAgVGltZSBwZXIgRGF5IChtaW51dGVzKTogMTgwCiAgICAgICAgICAgIExlYXJuaW5nIFN0eWxlOiBiYWxhbmNlZAogICAgICAgICAgICBOdW1iZXIgb2YgUHJvamVjdHM6IDQKICAgICAgICAgICAgCiAgICAgICAgICAgIFRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgd2l0aCBhIG1haW4gJ2N1cnJpY3VsdW1fdGl0bGUnIGFuZCAnY3VycmljdWx1bV9kZXNjcmlwdGlvbicsIAogICAgICAgICAgICBhbmQgYSBsaXN0IG9mICdkYXlzJy4gRWFjaCBkYXkgb2JqZWN0IGluIHRoZSBsaXN0IHNob3VsZCBoYXZlOgogICAgICAgICAgICAtICdkYXlfbnVtYmVyJyAoaW50KQogICAgICAgICAgICAtICd0aXRsZScgKHN0ciwgY29uY2lzZSB0aXRsZSBmb3IgdGhlIGRheSkKICAgICAgICAgICAgLSAnaXNfcHJvamVjdF9kYXknIChib29sLCB0cnVlIGlmIHRoaXMgZGF5IGlzIGEgcHJvamVjdCBkYXksIGZhbHNlIG90aGVyd2lzZSkKICAgICAgICAgICAgLSAncHJvamVjdF9kYXRhJyAoZGljdCwgb3B0aW9uYWwsIG9ubHkgaWYgaXNfcHJvamVjdF9kYXkgaXMgdHJ1ZS4gU2hvdWxkIGNvbnRhaW4gJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ29iamVjdGl2ZXMnLCAncmVxdWlyZW1lbnRzJywgJ2RlbGl2ZXJhYmxlcycsIGFuZCAnZXZhbHVhdGlvbl9jcml0ZXJpYScpCiAgICAgICAgICAgIC0gJ2NvbnRlbnQnIChkaWN0LCBUaXBUYXAvUHJvc2VNaXJyb3IgSlNPTiBvYmplY3QgZm9yIHRoZSBsZWFybmluZyBtb2R1bGUuIFRoaXMgb2JqZWN0IE1VU1QgaGF2ZSBhIHJvb3QgJ3R5cGUnOiAnZG9jJyBhbmQgYSAnY29udGVudCcgYXJyYXkuIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnRhaW4gYSBzZXF1ZW5jZSBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIGRheSdzIGxlc3Nvbi4gU3RydWN0dXJlIGVhY2ggZGF5J3MgbGVzc29uIGNvbnRlbnQgd2l0aCB0aGUgZm9sbG93aW5nIHNlY3Rpb25zLCB1c2luZyBhcHByb3ByaWF0ZSBUaXBUYXAvUHJvc2VNaXJyb3Igbm9kZXMgKGxpa2UgJ2hlYWRpbmcnIHdpdGggbGV2ZWxzIDEtMywgJ3BhcmFncmFwaCcsICdidWxsZXRMaXN0JywgJ29yZGVyZWRMaXN0JywgJ2xpc3RJdGVtJywgJ2NvZGVCbG9jaycgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCAndGV4dCcgbm9kZXMgd2l0aCBtYXJrcyBmb3IgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnKToKICAgICAgICAgICAgICAgIDEuICAiSW50cm9kdWN0aW9uIjogKFJlcXVpcmVkKSBBIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBkYXkncyB0b3BpYyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDIsIGZvbGxvd2VkIGJ5IG9uZSBvciB0d28gJ3BhcmFncmFwaCcgbm9kZXMpLgogICAgICAgICAgICAgICAgMi4gICJMZWFybmluZyBPYmplY3RpdmVzIjogKFJlcXVpcmVkKSAyLTQgY2xlYXIsIGFjdGlvbmFibGUgb2JqZWN0aXZlcyBmb3IgdGhlIGRheSAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUsIHdoZXJlIGVhY2ggJ2xpc3RJdGVtJyBjb250YWlucyBhICdwYXJhZ3JhcGgnIHdpdGggdGhlIG9iamVjdGl2ZSkuCiAgICAgICAgICAgICAgICAzLiAgIktleSBDb25jZXB0cyI6IChSZXF1aXJlZCkgRGV0YWlsZWQgZXhwbGFuYXRpb25zIG9mIHRoZSBjb3JlIGNvbmNlcHRzIGZvciB0aGUgZGF5LiBUaGlzIHNob3VsZCBiZSB0aGUgbW9zdCBzdWJzdGFudGlhbCBwYXJ0LiBVc2UgbXVsdGlwbGUgJ2hlYWRpbmcnIG5vZGVzIChsZXZlbCAzKSBmb3Igc3ViLXRvcGljcyBpZiBuZWVkZWQsIGZvbGxvd2VkIGJ5IGRldGFpbGVkICdwYXJhZ3JhcGgnIG5vZGVzLiBJbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSAnU3VwcG9ydGluZyBSZXNlYXJjaCcgKHdoaWNoIHdpbGwgYmUgcHJvdmlkZWQgdG8geW91KSB0byBtYWtlIHRoZXNlIGV4cGxhbmF0aW9ucyBjb21wcmVoZW5zaXZlLiBJZiBjb2RlIGV4YW1wbGVzIG9yIG1hdGhlbWF0aWNhbCBmb3JtdWxhcyBhcmUgcmVsZXZhbnQgYW5kIGZvdW5kIGluIHJlc2VhcmNoLCByZXByZXNlbnQgdGhlbSBhY2N1cmF0ZWx5LCBwZXJoYXBzIHdpdGhpbiAncGFyYWdyYXBoJyBub2RlcyBvciB1c2luZyAnY29kZUJsb2NrJyBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgICAgIDQuICAiRXhhbXBsZXMiOiAoT3B0aW9uYWwsIGJ1dCBoaWdobHkgZW5jb3VyYWdlZCkgMS0yIHdvcmtlZCBleGFtcGxlcyBvciBpbGx1c3RyYXRpdmUgc2NlbmFyaW9zIHJlbGF0ZWQgdG8gdGhlIGtleSBjb25jZXB0cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5ICdwYXJhZ3JhcGgnIG9yICdvcmRlcmVkTGlzdCcgbm9kZXMgZXhwbGFpbmluZyB0aGUgZXhhbXBsZSBzdGVwLWJ5LXN0ZXApLgogICAgICAgICAgICAgICAgNS4gICJTdW1tYXJ5IjogKFJlcXVpcmVkKSBBIGNvbmNpc2UgcmVjYXAgb2YgdGhlIGRheSdzIG1haW4gcG9pbnRzIChlLmcuLCBhICdoZWFkaW5nJyBub2RlIHdpdGggbGV2ZWwgMywgZm9sbG93ZWQgYnkgYSAnYnVsbGV0TGlzdCcgbm9kZSkuCiAgICAgICAgICAgICAgICBFbnN1cmUgYWxsIHRleHQgY29udGVudCBpcyB3ZWxsLXdyaXR0ZW4sIGNsZWFyLCBhbmQgZW5nYWdpbmcuCiAgICAgICAgICAgIC0gJ3Jlc291cmNlcycgKGxpc3Qgb2YgZGljdHMsIGVhY2ggd2l0aCAndGl0bGUnIGFuZCAndXJsJykKICAgICAgICAgICAgLSAnZXN0aW1hdGVkX2hvdXJzJyAoZmxvYXQsIG9wdGlvbmFsKQogICAgICAgICAgICAKICAgICAgICAgICAgRm9jdXMgb24gY3JlYXRpbmcgcHJhY3RpY2FsLCBhY3Rpb25hYmxlIGNvbnRlbnQgZm9yIGVhY2ggZGF5LgogICAgICAgICAgICBFbnN1cmUgdGhlIGN1cnJpY3VsdW0gc3BhbnMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy4KICAgICAgICAgICAgCiAgICAgICAgICAgIENSSVRJQ0FMIElOU1RSVUNUSU9OUyBGT1IgUkVTT1VSQ0VTOgogICAgICAgICAgICAxLiBUaGUgU3VwcG9ydGluZyBSZXNlYXJjaCBzZWN0aW9uIHdpbGwgY29udGFpbiBZb3VUdWJlIHZpZGVvcyB3aXRoIGlkZW50aWZpZXJzIGxpa2UgW1lUMV0sIFtZVDJdLCBldGMuCiAgICAgICAgICAgIDIuIFlvdSBNVVNUIHVzZSB0aGVzZSBpZGVudGlmaWVycyBpbiB0aGUgJ3VybCcgZmllbGQgd2hlbiBhZGRpbmcgWW91VHViZSB2aWRlb3MgdG8gcmVzb3VyY2VzCiAgICAgICAgICAgIDMuIEZvciBleGFtcGxlOiB7InRpdGxlIjogIkludHJvZHVjdGlvbiB0byBSZWFjdCBIb29rcyIsICJ1cmwiOiAiW1lUM10ifQogICAgICAgICAgICA0LiBBbHNvIGluY2x1ZGUgbm9uLVlvdVR1YmUgcmVzb3VyY2VzIChhcnRpY2xlcywgZG9jdW1lbnRhdGlvbikgd2l0aCB0aGVpciBmdWxsIFVSTHMKICAgICAgICAgICAgNS4gRWFjaCBkYXkgc2hvdWxkIGhhdmUgMi00IHJlbGV2YW50IHJlc291cmNlcyBtaXhpbmcgWW91VHViZSB2aWRlb3MgYW5kIG90aGVyIHNvdXJjZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIFdoZW4gZ2VuZXJhdGluZyB0aGUgJ2NvbnRlbnQnIGZvciBlYWNoIGRheSwgdXRpbGl6ZSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSBhbG9uZyB3aXRoIHRoZXNlIHByZWZlcmVuY2VzKSB0byBtYWtlIHRoZSBleHBsYW5hdGlvbnMgYW5kIGNvbmNlcHRzIGFzIGRldGFpbGVkIGFuZCBhY2N1cmF0ZSBhcyBwb3NzaWJsZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIElNUE9SVEFOVDogSWYgbnVtX3Byb2plY3RzIGlzIGdyZWF0ZXIgdGhhbiAwLCBkaXN0cmlidXRlIHRoZSBwcm9qZWN0cyBldmVubHkgdGhyb3VnaG91dCB0aGUgY3VycmljdWx1bS4gRm9yIGV4YW1wbGU6CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTEgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHRoZSBwcm9qZWN0IGFyb3VuZCBkYXkgMjAtMjUKICAgICAgICAgICAgLSBJZiBudW1fcHJvamVjdHM9MiBhbmQgZHVyYXRpb249MzAgZGF5cywgcGxhY2UgcHJvamVjdHMgYXJvdW5kIGRheSAxMC0xMiBhbmQgZGF5IDIyLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTMgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgOC0xMCwgZGF5IDE2LTE4LCBhbmQgZGF5IDI0LTI2CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3IgcHJvamVjdCBkYXlzOgogICAgICAgICAgICAtIFNldCAnaXNfcHJvamVjdF9kYXknIHRvIHRydWUKICAgICAgICAgICAgLSBJbmNsdWRlIGEgJ3Byb2plY3RfZGF0YScgb2JqZWN0IHdpdGggY29tcHJlaGVuc2l2ZSBwcm9qZWN0IGRldGFpbHMKICAgICAgICAgICAgLSBUaGUgcHJvamVjdCBzaG91bGQgaW50ZWdyYXRlIGFuZCBhcHBseSBjb25jZXB0cyBsZWFybmVkIGluIHRoZSBwcmVjZWRpbmcgZGF5cwogICAgICAgICAgICAtIFByb2plY3RzIHNob3VsZCBiZSBwcmFjdGljYWwsIGhhbmRzLW9uIGFjdGl2aXRpZXMgdGhhdCByZWluZm9yY2UgbGVhcm5pbmcKICAgICAgICAgICAgLSBQcm9qZWN0IHRpdGxlcyBzaG91bGQgYmUgZGVzY3JpcHRpdmUgYnV0IG5vdCBvdmVybHkgcGxheWZ1bCAoZS5nLiwgIkJ1aWxkIGEgV2VhdGhlciBEYXRhIEFuYWx5emVyIiBub3QgIldlYXRoZXIgV2l6YXJkIDMwMDAiKQogICAgICAgICAgICA%3D"
        },
        {
          "title": "Trypsin-EDTA for Cell Dissociation",
          "url": "https://www.thermofisher.com/us/en/home/life-science/cell-culture/mammalian-cell-culture/reagents/trypsin.html"
        },
        {
          "title": "Video Protocol of Cortical Neuron Culture (visualizes dissection)",
          "url": "https://www.jove.com/v/52254/a-method-for-the-preparation-of-primary-cortical-neuron-culture"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 10,
      "title": "Cell Counting and Plating Neurons onto the MEA",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "We have our single-cell suspension, but how many cells do we have? Plating the correct number of cells—the seeding density—is critical for forming a healthy network. Too few cells, and they won't connect; too many, and they'll be overcrowded and unhealthy. Today, we'll learn how to count cells and plate them precisely onto our prepared MEA."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Describe how to use a hemocytometer and Trypan Blue to determine cell concentration and viability."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Calculate the volume of cell suspension needed to achieve a target seeding density."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain the 'cell drop' technique for plating onto an MEA."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Cell Counting with a Hemocytometer"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A hemocytometer is a specialized microscope slide with a grid of known dimensions. To count, we mix a small sample of our cell suspension with "
              },
              {
                "type": "text",
                "text": "Trypan Blue",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " dye. This dye is excluded by healthy cells with intact membranes but enters and stains dead or dying cells blue. By counting the number of live (clear) and dead (blue) cells in the grid squares, we can calculate both the concentration of viable cells (e.g., in cells/mL) and the percent viability."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Calculating Seeding Density"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Once we know the concentration of our cell stock, we can calculate how much to plate. Seeding density is often expressed as cells per unit area (e.g., 1000 cells/mm²). A typical MEA might require 100,000 to 200,000 neurons. Using the formula C1V1 = C2V2, we can determine the volume (V1) of our cell stock (C1) needed to get the desired final cell number (C2) in our plating volume (V2)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Plating onto the MEA"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "To ensure the cells land on the electrode grid, we don't fill the entire well with media at first. Instead, we use a 'cell drop' method. A small, calculated volume (e.g., 20-50 µL) containing the desired number of cells is carefully pipetted directly onto the center of the coated MEA surface. The plate is then placed in the incubator for 1-4 hours to allow the cells to attach. After attachment, the well is gently filled with pre-warmed complete culture medium."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A hemocytometer and Trypan Blue are used to determine viable cell concentration."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Correct seeding density is calculated to ensure a healthy, functional network."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The 'cell drop' technique concentrates the initial plating over the electrode area for efficient network formation."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Cell Counting with a Hemocytometer",
          "url": "https://www.thermofisher.com/us/en/home/references/gibco-cell-culture-basics/cell-culture-protocols/counting-cells-hemocytometer.html"
        },
        {
          "title": "Primary Culture of Hippocampal Neurons from P0 Newborn Rats (shows plating)",
          "url": "https://youtube.com/watch?v=CQ76Kr7Tp0A&pp=ygWjKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIFRpdGxlIChvcHRpb25hbCk6IFJhdCBOZXVyb25zCiAgICAgICAgICAgIERlc2NyaXB0aW9uIChvcHRpb25hbCk6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIERpZmZpY3VsdHk6IGludGVybWVkaWF0ZQogICAgICAgICAgICBUb3RhbCBEdXJhdGlvbiAoZGF5cyk6IDMwCiAgICAgICAgICAgIFByZXJlcXVpc2l0ZXM6IGknbSBhIDJuZCB5ZWFyIGJpb2xvZ3kgbWFqb3IKICAgICAgICAgICAgVGltZSBwZXIgRGF5IChtaW51dGVzKTogMTgwCiAgICAgICAgICAgIExlYXJuaW5nIFN0eWxlOiBiYWxhbmNlZAogICAgICAgICAgICBOdW1iZXIgb2YgUHJvamVjdHM6IDQKICAgICAgICAgICAgCiAgICAgICAgICAgIFRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgd2l0aCBhIG1haW4gJ2N1cnJpY3VsdW1fdGl0bGUnIGFuZCAnY3VycmljdWx1bV9kZXNjcmlwdGlvbicsIAogICAgICAgICAgICBhbmQgYSBsaXN0IG9mICdkYXlzJy4gRWFjaCBkYXkgb2JqZWN0IGluIHRoZSBsaXN0IHNob3VsZCBoYXZlOgogICAgICAgICAgICAtICdkYXlfbnVtYmVyJyAoaW50KQogICAgICAgICAgICAtICd0aXRsZScgKHN0ciwgY29uY2lzZSB0aXRsZSBmb3IgdGhlIGRheSkKICAgICAgICAgICAgLSAnaXNfcHJvamVjdF9kYXknIChib29sLCB0cnVlIGlmIHRoaXMgZGF5IGlzIGEgcHJvamVjdCBkYXksIGZhbHNlIG90aGVyd2lzZSkKICAgICAgICAgICAgLSAncHJvamVjdF9kYXRhJyAoZGljdCwgb3B0aW9uYWwsIG9ubHkgaWYgaXNfcHJvamVjdF9kYXkgaXMgdHJ1ZS4gU2hvdWxkIGNvbnRhaW4gJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ29iamVjdGl2ZXMnLCAncmVxdWlyZW1lbnRzJywgJ2RlbGl2ZXJhYmxlcycsIGFuZCAnZXZhbHVhdGlvbl9jcml0ZXJpYScpCiAgICAgICAgICAgIC0gJ2NvbnRlbnQnIChkaWN0LCBUaXBUYXAvUHJvc2VNaXJyb3IgSlNPTiBvYmplY3QgZm9yIHRoZSBsZWFybmluZyBtb2R1bGUuIFRoaXMgb2JqZWN0IE1VU1QgaGF2ZSBhIHJvb3QgJ3R5cGUnOiAnZG9jJyBhbmQgYSAnY29udGVudCcgYXJyYXkuIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnRhaW4gYSBzZXF1ZW5jZSBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIGRheSdzIGxlc3Nvbi4gU3RydWN0dXJlIGVhY2ggZGF5J3MgbGVzc29uIGNvbnRlbnQgd2l0aCB0aGUgZm9sbG93aW5nIHNlY3Rpb25zLCB1c2luZyBhcHByb3ByaWF0ZSBUaXBUYXAvUHJvc2VNaXJyb3Igbm9kZXMgKGxpa2UgJ2hlYWRpbmcnIHdpdGggbGV2ZWxzIDEtMywgJ3BhcmFncmFwaCcsICdidWxsZXRMaXN0JywgJ29yZGVyZWRMaXN0JywgJ2xpc3RJdGVtJywgJ2NvZGVCbG9jaycgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCAndGV4dCcgbm9kZXMgd2l0aCBtYXJrcyBmb3IgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnKToKICAgICAgICAgICAgICAgIDEuICAiSW50cm9kdWN0aW9uIjogKFJlcXVpcmVkKSBBIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBkYXkncyB0b3BpYyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDIsIGZvbGxvd2VkIGJ5IG9uZSBvciB0d28gJ3BhcmFncmFwaCcgbm9kZXMpLgogICAgICAgICAgICAgICAgMi4gICJMZWFybmluZyBPYmplY3RpdmVzIjogKFJlcXVpcmVkKSAyLTQgY2xlYXIsIGFjdGlvbmFibGUgb2JqZWN0aXZlcyBmb3IgdGhlIGRheSAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUsIHdoZXJlIGVhY2ggJ2xpc3RJdGVtJyBjb250YWlucyBhICdwYXJhZ3JhcGgnIHdpdGggdGhlIG9iamVjdGl2ZSkuCiAgICAgICAgICAgICAgICAzLiAgIktleSBDb25jZXB0cyI6IChSZXF1aXJlZCkgRGV0YWlsZWQgZXhwbGFuYXRpb25zIG9mIHRoZSBjb3JlIGNvbmNlcHRzIGZvciB0aGUgZGF5LiBUaGlzIHNob3VsZCBiZSB0aGUgbW9zdCBzdWJzdGFudGlhbCBwYXJ0LiBVc2UgbXVsdGlwbGUgJ2hlYWRpbmcnIG5vZGVzIChsZXZlbCAzKSBmb3Igc3ViLXRvcGljcyBpZiBuZWVkZWQsIGZvbGxvd2VkIGJ5IGRldGFpbGVkICdwYXJhZ3JhcGgnIG5vZGVzLiBJbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSAnU3VwcG9ydGluZyBSZXNlYXJjaCcgKHdoaWNoIHdpbGwgYmUgcHJvdmlkZWQgdG8geW91KSB0byBtYWtlIHRoZXNlIGV4cGxhbmF0aW9ucyBjb21wcmVoZW5zaXZlLiBJZiBjb2RlIGV4YW1wbGVzIG9yIG1hdGhlbWF0aWNhbCBmb3JtdWxhcyBhcmUgcmVsZXZhbnQgYW5kIGZvdW5kIGluIHJlc2VhcmNoLCByZXByZXNlbnQgdGhlbSBhY2N1cmF0ZWx5LCBwZXJoYXBzIHdpdGhpbiAncGFyYWdyYXBoJyBub2RlcyBvciB1c2luZyAnY29kZUJsb2NrJyBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgICAgIDQuICAiRXhhbXBsZXMiOiAoT3B0aW9uYWwsIGJ1dCBoaWdobHkgZW5jb3VyYWdlZCkgMS0yIHdvcmtlZCBleGFtcGxlcyBvciBpbGx1c3RyYXRpdmUgc2NlbmFyaW9zIHJlbGF0ZWQgdG8gdGhlIGtleSBjb25jZXB0cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5ICdwYXJhZ3JhcGgnIG9yICdvcmRlcmVkTGlzdCcgbm9kZXMgZXhwbGFpbmluZyB0aGUgZXhhbXBsZSBzdGVwLWJ5LXN0ZXApLgogICAgICAgICAgICAgICAgNS4gICJTdW1tYXJ5IjogKFJlcXVpcmVkKSBBIGNvbmNpc2UgcmVjYXAgb2YgdGhlIGRheSdzIG1haW4gcG9pbnRzIChlLmcuLCBhICdoZWFkaW5nJyBub2RlIHdpdGggbGV2ZWwgMywgZm9sbG93ZWQgYnkgYSAnYnVsbGV0TGlzdCcgbm9kZSkuCiAgICAgICAgICAgICAgICBFbnN1cmUgYWxsIHRleHQgY29udGVudCBpcyB3ZWxsLXdyaXR0ZW4sIGNsZWFyLCBhbmQgZW5nYWdpbmcuCiAgICAgICAgICAgIC0gJ3Jlc291cmNlcycgKGxpc3Qgb2YgZGljdHMsIGVhY2ggd2l0aCAndGl0bGUnIGFuZCAndXJsJykKICAgICAgICAgICAgLSAnZXN0aW1hdGVkX2hvdXJzJyAoZmxvYXQsIG9wdGlvbmFsKQogICAgICAgICAgICAKICAgICAgICAgICAgRm9jdXMgb24gY3JlYXRpbmcgcHJhY3RpY2FsLCBhY3Rpb25hYmxlIGNvbnRlbnQgZm9yIGVhY2ggZGF5LgogICAgICAgICAgICBFbnN1cmUgdGhlIGN1cnJpY3VsdW0gc3BhbnMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy4KICAgICAgICAgICAgCiAgICAgICAgICAgIENSSVRJQ0FMIElOU1RSVUNUSU9OUyBGT1IgUkVTT1VSQ0VTOgogICAgICAgICAgICAxLiBUaGUgU3VwcG9ydGluZyBSZXNlYXJjaCBzZWN0aW9uIHdpbGwgY29udGFpbiBZb3VUdWJlIHZpZGVvcyB3aXRoIGlkZW50aWZpZXJzIGxpa2UgW1lUMV0sIFtZVDJdLCBldGMuCiAgICAgICAgICAgIDIuIFlvdSBNVVNUIHVzZSB0aGVzZSBpZGVudGlmaWVycyBpbiB0aGUgJ3VybCcgZmllbGQgd2hlbiBhZGRpbmcgWW91VHViZSB2aWRlb3MgdG8gcmVzb3VyY2VzCiAgICAgICAgICAgIDMuIEZvciBleGFtcGxlOiB7InRpdGxlIjogIkludHJvZHVjdGlvbiB0byBSZWFjdCBIb29rcyIsICJ1cmwiOiAiW1lUM10ifQogICAgICAgICAgICA0LiBBbHNvIGluY2x1ZGUgbm9uLVlvdVR1YmUgcmVzb3VyY2VzIChhcnRpY2xlcywgZG9jdW1lbnRhdGlvbikgd2l0aCB0aGVpciBmdWxsIFVSTHMKICAgICAgICAgICAgNS4gRWFjaCBkYXkgc2hvdWxkIGhhdmUgMi00IHJlbGV2YW50IHJlc291cmNlcyBtaXhpbmcgWW91VHViZSB2aWRlb3MgYW5kIG90aGVyIHNvdXJjZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIFdoZW4gZ2VuZXJhdGluZyB0aGUgJ2NvbnRlbnQnIGZvciBlYWNoIGRheSwgdXRpbGl6ZSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSBhbG9uZyB3aXRoIHRoZXNlIHByZWZlcmVuY2VzKSB0byBtYWtlIHRoZSBleHBsYW5hdGlvbnMgYW5kIGNvbmNlcHRzIGFzIGRldGFpbGVkIGFuZCBhY2N1cmF0ZSBhcyBwb3NzaWJsZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIElNUE9SVEFOVDogSWYgbnVtX3Byb2plY3RzIGlzIGdyZWF0ZXIgdGhhbiAwLCBkaXN0cmlidXRlIHRoZSBwcm9qZWN0cyBldmVubHkgdGhyb3VnaG91dCB0aGUgY3VycmljdWx1bS4gRm9yIGV4YW1wbGU6CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTEgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHRoZSBwcm9qZWN0IGFyb3VuZCBkYXkgMjAtMjUKICAgICAgICAgICAgLSBJZiBudW1fcHJvamVjdHM9MiBhbmQgZHVyYXRpb249MzAgZGF5cywgcGxhY2UgcHJvamVjdHMgYXJvdW5kIGRheSAxMC0xMiBhbmQgZGF5IDIyLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTMgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgOC0xMCwgZGF5IDE2LTE4LCBhbmQgZGF5IDI0LTI2CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3IgcHJvamVjdCBkYXlzOgogICAgICAgICAgICAtIFNldCAnaXNfcHJvamVjdF9kYXknIHRvIHRydWUKICAgICAgICAgICAgLSBJbmNsdWRlIGEgJ3Byb2plY3RfZGF0YScgb2JqZWN0IHdpdGggY29tcHJlaGVuc2l2ZSBwcm9qZWN0IGRldGFpbHMKICAgICAgICAgICAgLSBUaGUgcHJvamVjdCBzaG91bGQgaW50ZWdyYXRlIGFuZCBhcHBseSBjb25jZXB0cyBsZWFybmVkIGluIHRoZSBwcmVjZWRpbmcgZGF5cwogICAgICAgICAgICAtIFByb2plY3RzIHNob3VsZCBiZSBwcmFjdGljYWwsIGhhbmRzLW9uIGFjdGl2aXRpZXMgdGhhdCByZWluZm9yY2UgbGVhcm5pbmcKICAgICAgICAgICAgLSBQcm9qZWN0IHRpdGxlcyBzaG91bGQgYmUgZGVzY3JpcHRpdmUgYnV0IG5vdCBvdmVybHkgcGxheWZ1bCAoZS5nLiwgIkJ1aWxkIGEgV2VhdGhlciBEYXRhIEFuYWx5emVyIiBub3QgIldlYXRoZXIgV2l6YXJkIDMwMDAiKQogICAgICAgICAgICA%3D"
        },
        {
          "title": "MEA Preparation and Cell Plating - Axion BioSystems (see 'Cell Plating')",
          "url": "https://www.axionbiosystems.com/sites/default/files/2021-02/tn-003-mea-preparation-and-cell-plating.pdf"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 11,
      "title": "Initial Incubation and Monitoring (First 72 Hours)",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The cells are plated! The first few days in the incubator are a critical period of recovery and adaptation for the neurons. Today, we'll discuss what to expect during the first 24-72 hours, how to monitor the culture's health using a microscope, and the importance of leaving the culture undisturbed."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Describe the morphological changes of neurons in the first 72 hours post-plating."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify signs of a healthy vs. unhealthy culture under a microscope."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain the rationale for minimizing disturbance during initial incubation."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Morphological Development Timeline"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "What you see under the microscope will change rapidly:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "2-4 Hours Post-Plating:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Cells should have settled and begun to attach to the coated surface. They will appear as small, round, bright spheres (phase-bright)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "24 Hours (Day 1 In Vitro - DIV 1):",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Most healthy neurons will have extended small, fine processes called neurites. The cell bodies will still be phase-bright."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "48-72 Hours (DIV 2-3):",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Significant neurite outgrowth should be visible. One of the neurites will typically begin to elongate more rapidly than the others, differentiating into the axon. You may start to see the very first connections between neighboring cells."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Health Indicators"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A healthy culture is characterized by phase-bright cell bodies, clear neurite outgrowth, and a clean background. Signs of an unhealthy culture include many floating cells (poor attachment), dark or grainy cell bodies (necrosis/apoptosis), or the presence of non-neuronal contaminants (e.g., rapidly dividing fibroblasts or cloudy media indicating bacterial growth)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Minimizing Disturbance"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "During this fragile period, it is crucial to handle the culture as little as possible. Avoid moving the incubator, opening the door frequently, or taking the plate out for extended periods. Changes in temperature, pH, and physical jostling can stress the cells and impair their ability to form a healthy network. A quick daily check under the microscope is sufficient."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The first 72 hours are defined by cell attachment and the beginning of neurite outgrowth."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Microscopic observation is key to monitoring culture health, looking for phase-bright somas and clear processes."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Leaving the culture undisturbed is critical to allow the fragile neurons to recover and adapt."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "FINDING THAT CONNECTION© - neurons connecting to one another in a Petri dish",
          "url": "https://youtube.com/shorts/Rvmvt7gscIM"
        },
        {
          "title": "Morphological and functional maturation of neurons in dissociated cultures",
          "url": "https://www.frontiersin.org/articles/10.3389/fncel.2014.00358/full"
        },
        {
          "title": "How to Grow Brain Neurons to Do Hard Things",
          "url": "https://youtube.com/shorts/3SAlYna-8oA"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 12,
      "title": "Long-Term Culture Maintenance: Media Changes and Contamination",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "To keep our neuronal network alive and healthy for weeks, we need to provide fresh nutrients and remove waste products. This is done through periodic media changes. We will learn the proper technique for feeding the culture and how to spot and deal with the ever-present threat of contamination."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the rationale and schedule for performing media changes."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Describe the technique for a partial media exchange to minimize cell stress."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify the visual signs of common contaminants (bacterial, fungal, yeast)."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Partial Media Exchange"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Neurons are sensitive to abrupt changes in their environment. Therefore, we never replace all of the media at once. A "
              },
              {
                "type": "text",
                "text": "partial media exchange",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " is the standard procedure. Typically, one-third to one-half of the 'conditioned' medium is carefully aspirated from the side of the well, and then replaced with an equal volume of fresh, pre-warmed (37°C) complete medium. This is usually done every 3-4 days. This method replenishes nutrients while retaining important autocrine and paracrine signaling factors that the neurons have secreted into the existing medium."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Identifying Contamination"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Contamination is a disaster for a long-term culture. It's crucial to be able to spot it early:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Bacterial Contamination:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " The media will suddenly become cloudy or turbid. Under the microscope, you'll see tiny, moving specks, often shimmering between the cells. The media's pH indicator (phenol red) will often turn yellow, indicating acidic byproducts."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Fungal (Mold) Contamination:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Appears as filamentous, fuzzy structures (mycelia) floating in the medium or attached to the plate surface. They can be white, gray, or black."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Yeast Contamination:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Looks like small, round or oval particles that may be budding. They are larger than bacteria but smaller than your neurons. The media may become slightly cloudy."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "If a culture is contaminated, it must be discarded immediately by aspirating the contents and adding bleach to the well/plate, then disposing of it in a biohazard bag. This prevents it from spreading to other cultures in the incubator."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Regular, partial media changes are essential for long-term neuronal health."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Always use pre-warmed media and replace only a fraction of the total volume."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Vigilant monitoring for signs of bacterial, fungal, or yeast contamination is critical for protecting your experiments."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Maintaining Cells in Culture",
          "url": "https://www.thermofisher.com/us/en/home/references/gibco-cell-culture-basics/cell-culture-protocols/maintaining-cells.html"
        },
        {
          "title": "Common Cell Culture Contaminants",
          "url": "https://www.sigmaaldrich.com/US/en/technical-documents/protocol/cell-culture-and-cell-culture-analysis/mammalian-cell-culture/common-cell-culture-contaminants"
        },
        {
          "title": "Growing Living Rat Neurons To Play... DOOM? | Part 1 (shows long-term culture)",
          "url": "https://youtube.com/watch?v=bEXefdbQDjw&pp=ygWjKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIFRpdGxlIChvcHRpb25hbCk6IFJhdCBOZXVyb25zCiAgICAgICAgICAgIERlc2NyaXB0aW9uIChvcHRpb25hbCk6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIERpZmZpY3VsdHk6IGludGVybWVkaWF0ZQogICAgICAgICAgICBUb3RhbCBEdXJhdGlvbiAoZGF5cyk6IDMwCiAgICAgICAgICAgIFByZXJlcXVpc2l0ZXM6IGknbSBhIDJuZCB5ZWFyIGJpb2xvZ3kgbWFqb3IKICAgICAgICAgICAgVGltZSBwZXIgRGF5IChtaW51dGVzKTogMTgwCiAgICAgICAgICAgIExlYXJuaW5nIFN0eWxlOiBiYWxhbmNlZAogICAgICAgICAgICBOdW1iZXIgb2YgUHJvamVjdHM6IDQKICAgICAgICAgICAgCiAgICAgICAgICAgIFRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgd2l0aCBhIG1haW4gJ2N1cnJpY3VsdW1fdGl0bGUnIGFuZCAnY3VycmljdWx1bV9kZXNjcmlwdGlvbicsIAogICAgICAgICAgICBhbmQgYSBsaXN0IG9mICdkYXlzJy4gRWFjaCBkYXkgb2JqZWN0IGluIHRoZSBsaXN0IHNob3VsZCBoYXZlOgogICAgICAgICAgICAtICdkYXlfbnVtYmVyJyAoaW50KQogICAgICAgICAgICAtICd0aXRsZScgKHN0ciwgY29uY2lzZSB0aXRsZSBmb3IgdGhlIGRheSkKICAgICAgICAgICAgLSAnaXNfcHJvamVjdF9kYXknIChib29sLCB0cnVlIGlmIHRoaXMgZGF5IGlzIGEgcHJvamVjdCBkYXksIGZhbHNlIG90aGVyd2lzZSkKICAgICAgICAgICAgLSAncHJvamVjdF9kYXRhJyAoZGljdCwgb3B0aW9uYWwsIG9ubHkgaWYgaXNfcHJvamVjdF9kYXkgaXMgdHJ1ZS4gU2hvdWxkIGNvbnRhaW4gJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ29iamVjdGl2ZXMnLCAncmVxdWlyZW1lbnRzJywgJ2RlbGl2ZXJhYmxlcycsIGFuZCAnZXZhbHVhdGlvbl9jcml0ZXJpYScpCiAgICAgICAgICAgIC0gJ2NvbnRlbnQnIChkaWN0LCBUaXBUYXAvUHJvc2VNaXJyb3IgSlNPTiBvYmplY3QgZm9yIHRoZSBsZWFybmluZyBtb2R1bGUuIFRoaXMgb2JqZWN0IE1VU1QgaGF2ZSBhIHJvb3QgJ3R5cGUnOiAnZG9jJyBhbmQgYSAnY29udGVudCcgYXJyYXkuIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnRhaW4gYSBzZXF1ZW5jZSBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIGRheSdzIGxlc3Nvbi4gU3RydWN0dXJlIGVhY2ggZGF5J3MgbGVzc29uIGNvbnRlbnQgd2l0aCB0aGUgZm9sbG93aW5nIHNlY3Rpb25zLCB1c2luZyBhcHByb3ByaWF0ZSBUaXBUYXAvUHJvc2VNaXJyb3Igbm9kZXMgKGxpa2UgJ2hlYWRpbmcnIHdpdGggbGV2ZWxzIDEtMywgJ3BhcmFncmFwaCcsICdidWxsZXRMaXN0JywgJ29yZGVyZWRMaXN0JywgJ2xpc3RJdGVtJywgJ2NvZGVCbG9jaycgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCAndGV4dCcgbm9kZXMgd2l0aCBtYXJrcyBmb3IgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnKToKICAgICAgICAgICAgICAgIDEuICAiSW50cm9kdWN0aW9uIjogKFJlcXVpcmVkKSBBIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBkYXkncyB0b3BpYyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDIsIGZvbGxvd2VkIGJ5IG9uZSBvciB0d28gJ3BhcmFncmFwaCcgbm9kZXMpLgogICAgICAgICAgICAgICAgMi4gICJMZWFybmluZyBPYmplY3RpdmVzIjogKFJlcXVpcmVkKSAyLTQgY2xlYXIsIGFjdGlvbmFibGUgb2JqZWN0aXZlcyBmb3IgdGhlIGRheSAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUsIHdoZXJlIGVhY2ggJ2xpc3RJdGVtJyBjb250YWlucyBhICdwYXJhZ3JhcGgnIHdpdGggdGhlIG9iamVjdGl2ZSkuCiAgICAgICAgICAgICAgICAzLiAgIktleSBDb25jZXB0cyI6IChSZXF1aXJlZCkgRGV0YWlsZWQgZXhwbGFuYXRpb25zIG9mIHRoZSBjb3JlIGNvbmNlcHRzIGZvciB0aGUgZGF5LiBUaGlzIHNob3VsZCBiZSB0aGUgbW9zdCBzdWJzdGFudGlhbCBwYXJ0LiBVc2UgbXVsdGlwbGUgJ2hlYWRpbmcnIG5vZGVzIChsZXZlbCAzKSBmb3Igc3ViLXRvcGljcyBpZiBuZWVkZWQsIGZvbGxvd2VkIGJ5IGRldGFpbGVkICdwYXJhZ3JhcGgnIG5vZGVzLiBJbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSAnU3VwcG9ydGluZyBSZXNlYXJjaCcgKHdoaWNoIHdpbGwgYmUgcHJvdmlkZWQgdG8geW91KSB0byBtYWtlIHRoZXNlIGV4cGxhbmF0aW9ucyBjb21wcmVoZW5zaXZlLiBJZiBjb2RlIGV4YW1wbGVzIG9yIG1hdGhlbWF0aWNhbCBmb3JtdWxhcyBhcmUgcmVsZXZhbnQgYW5kIGZvdW5kIGluIHJlc2VhcmNoLCByZXByZXNlbnQgdGhlbSBhY2N1cmF0ZWx5LCBwZXJoYXBzIHdpdGhpbiAncGFyYWdyYXBoJyBub2RlcyBvciB1c2luZyAnY29kZUJsb2NrJyBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgICAgIDQuICAiRXhhbXBsZXMiOiAoT3B0aW9uYWwsIGJ1dCBoaWdobHkgZW5jb3VyYWdlZCkgMS0yIHdvcmtlZCBleGFtcGxlcyBvciBpbGx1c3RyYXRpdmUgc2NlbmFyaW9zIHJlbGF0ZWQgdG8gdGhlIGtleSBjb25jZXB0cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5ICdwYXJhZ3JhcGgnIG9yICdvcmRlcmVkTGlzdCcgbm9kZXMgZXhwbGFpbmluZyB0aGUgZXhhbXBsZSBzdGVwLWJ5LXN0ZXApLgogICAgICAgICAgICAgICAgNS4gICJTdW1tYXJ5IjogKFJlcXVpcmVkKSBBIGNvbmNpc2UgcmVjYXAgb2YgdGhlIGRheSdzIG1haW4gcG9pbnRzIChlLmcuLCBhICdoZWFkaW5nJyBub2RlIHdpdGggbGV2ZWwgMywgZm9sbG93ZWQgYnkgYSAnYnVsbGV0TGlzdCcgbm9kZSkuCiAgICAgICAgICAgICAgICBFbnN1cmUgYWxsIHRleHQgY29udGVudCBpcyB3ZWxsLXdyaXR0ZW4sIGNsZWFyLCBhbmQgZW5nYWdpbmcuCiAgICAgICAgICAgIC0gJ3Jlc291cmNlcycgKGxpc3Qgb2YgZGljdHMsIGVhY2ggd2l0aCAndGl0bGUnIGFuZCAndXJsJykKICAgICAgICAgICAgLSAnZXN0aW1hdGVkX2hvdXJzJyAoZmxvYXQsIG9wdGlvbmFsKQogICAgICAgICAgICAKICAgICAgICAgICAgRm9jdXMgb24gY3JlYXRpbmcgcHJhY3RpY2FsLCBhY3Rpb25hYmxlIGNvbnRlbnQgZm9yIGVhY2ggZGF5LgogICAgICAgICAgICBFbnN1cmUgdGhlIGN1cnJpY3VsdW0gc3BhbnMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy4KICAgICAgICAgICAgCiAgICAgICAgICAgIENSSVRJQ0FMIElOU1RSVUNUSU9OUyBGT1IgUkVTT1VSQ0VTOgogICAgICAgICAgICAxLiBUaGUgU3VwcG9ydGluZyBSZXNlYXJjaCBzZWN0aW9uIHdpbGwgY29udGFpbiBZb3VUdWJlIHZpZGVvcyB3aXRoIGlkZW50aWZpZXJzIGxpa2UgW1lUMV0sIFtZVDJdLCBldGMuCiAgICAgICAgICAgIDIuIFlvdSBNVVNUIHVzZSB0aGVzZSBpZGVudGlmaWVycyBpbiB0aGUgJ3VybCcgZmllbGQgd2hlbiBhZGRpbmcgWW91VHViZSB2aWRlb3MgdG8gcmVzb3VyY2VzCiAgICAgICAgICAgIDMuIEZvciBleGFtcGxlOiB7InRpdGxlIjogIkludHJvZHVjdGlvbiB0byBSZWFjdCBIb29rcyIsICJ1cmwiOiAiW1lUM10ifQogICAgICAgICAgICA0LiBBbHNvIGluY2x1ZGUgbm9uLVlvdVR1YmUgcmVzb3VyY2VzIChhcnRpY2xlcywgZG9jdW1lbnRhdGlvbikgd2l0aCB0aGVpciBmdWxsIFVSTHMKICAgICAgICAgICAgNS4gRWFjaCBkYXkgc2hvdWxkIGhhdmUgMi00IHJlbGV2YW50IHJlc291cmNlcyBtaXhpbmcgWW91VHViZSB2aWRlb3MgYW5kIG90aGVyIHNvdXJjZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIFdoZW4gZ2VuZXJhdGluZyB0aGUgJ2NvbnRlbnQnIGZvciBlYWNoIGRheSwgdXRpbGl6ZSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSBhbG9uZyB3aXRoIHRoZXNlIHByZWZlcmVuY2VzKSB0byBtYWtlIHRoZSBleHBsYW5hdGlvbnMgYW5kIGNvbmNlcHRzIGFzIGRldGFpbGVkIGFuZCBhY2N1cmF0ZSBhcyBwb3NzaWJsZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIElNUE9SVEFOVDogSWYgbnVtX3Byb2plY3RzIGlzIGdyZWF0ZXIgdGhhbiAwLCBkaXN0cmlidXRlIHRoZSBwcm9qZWN0cyBldmVubHkgdGhyb3VnaG91dCB0aGUgY3VycmljdWx1bS4gRm9yIGV4YW1wbGU6CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTEgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHRoZSBwcm9qZWN0IGFyb3VuZCBkYXkgMjAtMjUKICAgICAgICAgICAgLSBJZiBudW1fcHJvamVjdHM9MiBhbmQgZHVyYXRpb249MzAgZGF5cywgcGxhY2UgcHJvamVjdHMgYXJvdW5kIGRheSAxMC0xMiBhbmQgZGF5IDIyLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTMgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgOC0xMCwgZGF5IDE2LTE4LCBhbmQgZGF5IDI0LTI2CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3IgcHJvamVjdCBkYXlzOgogICAgICAgICAgICAtIFNldCAnaXNfcHJvamVjdF9kYXknIHRvIHRydWUKICAgICAgICAgICAgLSBJbmNsdWRlIGEgJ3Byb2plY3RfZGF0YScgb2JqZWN0IHdpdGggY29tcHJlaGVuc2l2ZSBwcm9qZWN0IGRldGFpbHMKICAgICAgICAgICAgLSBUaGUgcHJvamVjdCBzaG91bGQgaW50ZWdyYXRlIGFuZCBhcHBseSBjb25jZXB0cyBsZWFybmVkIGluIHRoZSBwcmVjZWRpbmcgZGF5cwogICAgICAgICAgICAtIFByb2plY3RzIHNob3VsZCBiZSBwcmFjdGljYWwsIGhhbmRzLW9uIGFjdGl2aXRpZXMgdGhhdCByZWluZm9yY2UgbGVhcm5pbmcKICAgICAgICAgICAgLSBQcm9qZWN0IHRpdGxlcyBzaG91bGQgYmUgZGVzY3JpcHRpdmUgYnV0IG5vdCBvdmVybHkgcGxheWZ1bCAoZS5nLiwgIkJ1aWxkIGEgV2VhdGhlciBEYXRhIEFuYWx5emVyIiBub3QgIldlYXRoZXIgV2l6YXJkIDMwMDAiKQogICAgICAgICAgICDSBwkJwQkBhyohjO8%3D"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 13,
      "title": "Observing Neuronal Network Maturation",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "After the first week, our culture is no longer just a collection of individual cells; it's beginning to form a true biological neural network. Today, we'll look at the hallmarks of a maturing network, from the formation of dense connections to the process of synaptic pruning. Understanding this developmental arc is key to knowing when the network is ready for electrophysiological recording."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type":="text",
                        "text": "Describe the appearance of a mature neuronal network at 7-14 days in vitro (DIV)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain the concepts of synaptogenesis and synaptic pruning in culture."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify the optimal time window for starting MEA recordings."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "The Mature Network (DIV 7-14)"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "By the end of the first week, the culture's appearance changes dramatically. Instead of individual cells with thin processes, you'll see dense, interconnected bundles of axons (called fascicles) crisscrossing the dish. The cell bodies may appear less distinct as they become embedded in this intricate web. This dense network of connections is essential for the coordinated electrical activity we want to measure."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Synaptogenesis and Pruning"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Just like in the developing brain, the network in the dish undergoes a process of refinement. "
              },
              {
                "type": "text",
                "text": "Synaptogenesis",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " is the rapid formation of new synapses, which peaks around DIV 7-10. Following this exuberant phase, a process of "
              },
              {
                "type": "text",
                "text": "synaptic pruning",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " begins, where less active or inefficient connections are eliminated. This refines the network, making it more stable and efficient. This is a sign of a healthy, maturing system."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "When to Start Recording?"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "While some spontaneous electrical activity can be detected as early as DIV 4-5, it is often sporadic. The network typically becomes robustly and spontaneously active between DIV 10 and DIV 14. This is the ideal time to begin recording baseline activity and starting stimulation experiments, as the network is both well-connected and relatively stable."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Between DIV 7 and 14, a neuronal culture matures from individual cells into a dense, interconnected network."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The network refines itself through synaptogenesis followed by synaptic pruning."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The optimal window for beginning electrophysiological experiments is typically after DIV 10, when the network exhibits stable, spontaneous activity."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "What your brain cells look like when you learn something NEW",
          "url": "https://youtube.com/shorts/ztPKM0nryY8"
        },
        {
          "title": "Development of Spontaneous Network Activity in Dissociated Neocortical Cultures",
          "url": "https://www.jneurosci.org/content/19/22/9924"
        },
        {
          "title": "FINDING THAT CONNECTION© - neurons connecting to one another in a Petri dish",
          "url": "https://youtube.com/shorts/Rvmvt7gscIM"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 14,
      "title": "Review and Project Preparation",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This week, we covered the entire hands-on process of creating a primary neuronal culture, from sourcing tissue to observing a mature network. Today, we will review this entire sequence, focusing on the critical decision points and techniques. This will prepare you for tomorrow's project, where you'll document and analyze a hypothetical culture process."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Recount the entire culture workflow from P0 pup to mature network (DIV 14)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify the purpose of each major step (dissection, dissociation, plating, feeding)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Anticipate expected results and potential issues at each stage of culture development."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "The Culture Timeline: A Narrative Review"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Let's consolidate the story of our culture:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Day 0 (Plating Day):",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " A hectic day involving humane euthanasia, sterile dissection, enzymatic and mechanical dissociation, cell counting, and careful plating onto a pre-coated MEA. The goal is a specific number of viable cells plated in a central drop."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "DIV 1-3 (Attachment & Outgrowth):",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " The most fragile period. Cells attach and begin extending neurites. The culture is left undisturbed except for brief microscopic checks. We look for phase-bright cells and the first signs of processes."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "DIV 4-7 (Network Formation & First Feed):",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Axons and dendrites are clearly visible, and connections are forming. The first partial media change is performed around DIV 4 to replenish nutrients. We watch for signs of contamination."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "DIV 7-14 (Maturation & Refinement):",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " The network becomes dense and complex. Synaptogenesis peaks and pruning begins. Regular media changes (every 3-4 days) continue. By the end of this period, the network is typically ready for electrophysiological recording."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The first two weeks of a neuronal culture follow a predictable, yet delicate, developmental timeline."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Each stage, from plating to maturation, has specific procedures and observational checkpoints."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understanding this timeline is crucial for planning experiments and interpreting results."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Review: All materials from Day 8-13",
          "url": "#"
        },
        {
          "title": "Primary Culture of Hippocampal Neurons from P0 Newborn Rats",
          "url": "https://youtube.com/watch?v=CQ76Kr7Tp0A&pp=ygWjKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIFRpdGxlIChvcHRpb25hbCk6IFJhdCBOZXVyb25zCiAgICAgICAgICAgIERlc2NyaXB0aW9uIChvcHRpb25hbCk6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIERpZmZpY3VsdHk6IGludGVybWVkaWF0ZQogICAgICAgICAgICBUb3RhbCBEdXJhdGlvbiAoZGF5cyk6IDMwCiAgICAgICAgICAgIFByZXJlcXVpc2l0ZXM6IGknbSBhIDJuZCB5ZWFyIGJpb2xvZ3kgbWFqb3IKICAgICAgICAgICAgVGltZSBwZXIgRGF5IChtaW51dGVzKTogMTgwCiAgICAgICAgICAgIExlYXJuaW5nIFN0eWxlOiBiYWxhbmNlZAogICAgICAgICAgICBOdW1iZXIgb2YgUHJvamVjdHM6IDQKICAgICAgICAgICAgCiAgICAgICAgICAgIFRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgd2l0aCBhIG1haW4gJ2N1cnJpY3VsdW1fdGl0bGUnIGFuZCAnY3VycmljdWx1bV9kZXNjcmlwdGlvbicsIAogICAgICAgICAgICBhbmQgYSBsaXN0IG9mICdkYXlzJy4gRWFjaCBkYXkgb2JqZWN0IGluIHRoZSBsaXN0IHNob3VsZCBoYXZlOgogICAgICAgICAgICAtICdkYXlfbnVtYmVyJyAoaW50KQogICAgICAgICAgICAtICd0aXRsZScgKHN0ciwgY29uY2lzZSB0aXRsZSBmb3IgdGhlIGRheSkKICAgICAgICAgICAgLSAnaXNfcHJvamVjdF9kYXknIChib29sLCB0cnVlIGlmIHRoaXMgZGF5IGlzIGEgcHJvamVjdCBkYXksIGZhbHNlIG90aGVyd2lzZSkKICAgICAgICAgICAgLSAncHJvamVjdF9kYXRhJyAoZGljdCwgb3B0aW9uYWwsIG9ubHkgaWYgaXNfcHJvamVjdF9kYXkgaXMgdHJ1ZS4gU2hvdWxkIGNvbnRhaW4gJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ29iamVjdGl2ZXMnLCAncmVxdWlyZW1lbnRzJywgJ2RlbGl2ZXJhYmxlcycsIGFuZCAnZXZhbHVhdGlvbl9jcml0ZXJpYScpCiAgICAgICAgICAgIC0gJ2NvbnRlbnQnIChkaWN0LCBUaXBUYXAvUHJvc2VNaXJyb3IgSlNPTiBvYmplY3QgZm9yIHRoZSBsZWFybmluZyBtb2R1bGUuIFRoaXMgb2JqZWN0IE1VU1QgaGF2ZSBhIHJvb3QgJ3R5cGUnOiAnZG9jJyBhbmQgYSAnY29udGVudCcgYXJyYXkuIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnRhaW4gYSBzZXF1ZW5jZSBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIGRheSdzIGxlc3Nvbi4gU3RydWN0dXJlIGVhY2ggZGF5J3MgbGVzc29uIGNvbnRlbnQgd2l0aCB0aGUgZm9sbG93aW5nIHNlY3Rpb25zLCB1c2luZyBhcHByb3ByaWF0ZSBUaXBUYXAvUHJvc2VNaXJyb3Igbm9kZXMgKGxpa2UgJ2hlYWRpbmcnIHdpdGggbGV2ZWxzIDEtMywgJ3BhcmFncmFwaCcsICdidWxsZXRMaXN0JywgJ29yZGVyZWRMaXN0JywgJ2xpc3RJdGVtJywgJ2NvZGVCbG9jaycgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCAndGV4dCcgbm9kZXMgd2l0aCBtYXJrcyBmb3IgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnKToKICAgICAgICAgICAgICAgIDEuICAiSW50cm9kdWN0aW9uIjogKFJlcXVpcmVkKSBBIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBkYXkncyB0b3BpYyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDIsIGZvbGxvd2VkIGJ5IG9uZSBvciB0d28gJ3BhcmFncmFwaCcgbm9kZXMpLgogICAgICAgICAgICAgICAgMi4gICJMZWFybmluZyBPYmplY3RpdmVzIjogKFJlcXVpcmVkKSAyLTQgY2xlYXIsIGFjdGlvbmFibGUgb2JqZWN0aXZlcyBmb3IgdGhlIGRheSAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUsIHdoZXJlIGVhY2ggJ2xpc3RJdGVtJyBjb250YWlucyBhICdwYXJhZ3JhcGgnIHdpdGggdGhlIG9iamVjdGl2ZSkuCiAgICAgICAgICAgICAgICAzLiAgIktleSBDb25jZXB0cyI6IChSZXF1aXJlZCkgRGV0YWlsZWQgZXhwbGFuYXRpb25zIG9mIHRoZSBjb3JlIGNvbmNlcHRzIGZvciB0aGUgZGF5LiBUaGlzIHNob3VsZCBiZSB0aGUgbW9zdCBzdWJzdGFudGlhbCBwYXJ0LiBVc2UgbXVsdGlwbGUgJ2hlYWRpbmcnIG5vZGVzIChsZXZlbCAzKSBmb3Igc3ViLXRvcGljcyBpZiBuZWVkZWQsIGZvbGxvd2VkIGJ5IGRldGFpbGVkICdwYXJhZ3JhcGgnIG5vZGVzLiBJbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSAnU3VwcG9ydGluZyBSZXNlYXJjaCcgKHdoaWNoIHdpbGwgYmUgcHJvdmlkZWQgdG8geW91KSB0byBtYWtlIHRoZXNlIGV4cGxhbmF0aW9ucyBjb21wcmVoZW5zaXZlLiBJZiBjb2RlIGV4YW1wbGVzIG9yIG1hdGhlbWF0aWNhbCBmb3JtdWxhcyBhcmUgcmVsZXZhbnQgYW5kIGZvdW5kIGluIHJlc2VhcmNoLCByZXByZXNlbnQgdGhlbSBhY2N1cmF0ZWx5LCBwZXJoYXBzIHdpdGhpbiAncGFyYWdyYXBoJyBub2RlcyBvciB1c2luZyAnY29kZUJsb2NrJyBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgICAgIDQuICAiRXhhbXBsZXMiOiAoT3B0aW9uYWwsIGJ1dCBoaWdobHkgZW5jb3VyYWdlZCkgMS0yIHdvcmtlZCBleGFtcGxlcyBvciBpbGx1c3RyYXRpdmUgc2NlbmFyaW9zIHJlbGF0ZWQgdG8gdGhlIGtleSBjb25jZXB0cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5ICdwYXJhZ3JhcGgnIG9yICdvcmRlcmVkTGlzdCcgbm9kZXMgZXhwbGFpbmluZyB0aGUgZXhhbXBsZSBzdGVwLWJ5LXN0ZXApLgogICAgICAgICAgICAgICAgNS4gICJTdW1tYXJ5IjogKFJlcXVpcmVkKSBBIGNvbmNpc2UgcmVjYXAgb2YgdGhlIGRheSdzIG1haW4gcG9pbnRzIChlLmcuLCBhICdoZWFkaW5nJyBub2RlIHdpdGggbGV2ZWwgMywgZm9sbG93ZWQgYnkgYSAnYnVsbGV0TGlzdCcgbm9kZSkuCiAgICAgICAgICAgICAgICBFbnN1cmUgYWxsIHRleHQgY29udGVudCBpcyB3ZWxsLXdyaXR0ZW4sIGNsZWFyLCBhbmQgZW5nYWdpbmcuCiAgICAgICAgICAgIC0gJ3Jlc291cmNlcycgKGxpc3Qgb2YgZGljdHMsIGVhY2ggd2l0aCAndGl0bGUnIGFuZCAndXJsJykKICAgICAgICAgICAgLSAnZXN0aW1hdGVkX2hvdXJzJyAoZmxvYXQsIG9wdGlvbmFsKQogICAgICAgICAgICAKICAgICAgICAgICAgRm9jdXMgb24gY3JlYXRpbmcgcHJhY3RpY2FsLCBhY3Rpb25hYmxlIGNvbnRlbnQgZm9yIGVhY2ggZGF5LgogICAgICAgICAgICBFbnN1cmUgdGhlIGN1cnJpY3VsdW0gc3BhbnMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy4KICAgICAgICAgICAgCiAgICAgICAgICAgIENSSVRJQ0FMIElOU1RSVUNUSU9OUyBGT1IgUkVTT1VSQ0VTOgogICAgICAgICAgICAxLiBUaGUgU3VwcG9ydGluZyBSZXNlYXJjaCBzZWN0aW9uIHdpbGwgY29udGFpbiBZb3VUdWJlIHZpZGVvcyB3aXRoIGlkZW50aWZpZXJzIGxpa2UgW1lUMV0sIFtZVDJdLCBldGMuCiAgICAgICAgICAgIDIuIFlvdSBNVVNUIHVzZSB0aGVzZSBpZGVudGlmaWVycyBpbiB0aGUgJ3VybCcgZmllbGQgd2hlbiBhZGRpbmcgWW91VHViZSB2aWRlb3MgdG8gcmVzb3VyY2VzCiAgICAgICAgICAgIDMuIEZvciBleGFtcGxlOiB7InRpdGxlIjogIkludHJvZHVjdGlvbiB0byBSZWFjdCBIb29rcyIsICJ1cmwiOiAiW1lUM10ifQogICAgICAgICAgICA0LiBBbHNvIGluY2x1ZGUgbm9uLVlvdVR1YmUgcmVzb3VyY2VzIChhcnRpY2xlcywgZG9jdW1lbnRhdGlvbikgd2l0aCB0aGVpciBmdWxsIFVSTHMKICAgICAgICAgICAgNS4gRWFjaCBkYXkgc2hvdWxkIGhhdmUgMi00IHJlbGV2YW50IHJlc291cmNlcyBtaXhpbmcgWW91VHViZSB2aWRlb3MgYW5kIG90aGVyIHNvdXJjZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIFdoZW4gZ2VuZXJhdGluZyB0aGUgJ2NvbnRlbnQnIGZvciBlYWNoIGRheSwgdXRpbGl6ZSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSBhbG9uZyB3aXRoIHRoZXNlIHByZWZlcmVuY2VzKSB0byBtYWtlIHRoZSBleHBsYW5hdGlvbnMgYW5kIGNvbmNlcHRzIGFzIGRldGFpbGVkIGFuZCBhY2N1cmF0ZSBhcyBwb3NzaWJsZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIElNUE9SVEFOVDogSWYgbnVtX3Byb2plY3RzIGlzIGdyZWF0ZXIgdGhhbiAwLCBkaXN0cmlidXRlIHRoZSBwcm9qZWN0cyBldmVubHkgdGhyb3VnaG91dCB0aGUgY3VycmljdWx1bS4gRm9yIGV4YW1wbGU6CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTEgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHRoZSBwcm9qZWN0IGFyb3VuZCBkYXkgMjAtMjUKICAgICAgICAgICAgLSBJZiBudW1fcHJvamVjdHM9MiBhbmQgZHVyYXRpb249MzAgZGF5cywgcGxhY2UgcHJvamVjdHMgYXJvdW5kIGRheSAxMC0xMiBhbmQgZGF5IDIyLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTMgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgOC0xMCwgZGF5IDE2LTE4LCBhbmQgZGF5IDI0LTI2CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3IgcHJvamVjdCBkYXlzOgogICAgICAgICAgICAtIFNldCAnaXNfcHJvamVjdF9kYXknIHRvIHRydWUKICAgICAgICAgICAgLSBJbmNsdWRlIGEgJ3Byb2plY3RfZGF0YScgb2JqZWN0IHdpdGggY29tcHJlaGVuc2l2ZSBwcm9qZWN0IGRldGFpbHMKICAgICAgICAgICAgLSBUaGUgcHJvamVjdCBzaG91bGQgaW50ZWdyYXRlIGFuZCBhcHBseSBjb25jZXB0cyBsZWFybmVkIGluIHRoZSBwcmVjZWRpbmcgZGF5cwogICAgICAgICAgICAtIFByb2plY3RzIHNob3VsZCBiZSBwcmFjdGljYWwsIGhhbmRzLW9uIGFjdGl2aXRpZXMgdGhhdCByZWluZm9yY2UgbGVhcm5pbmcKICAgICAgICAgICAgLSBQcm9qZWN0IHRpdGxlcyBzaG91bGQgYmUgZGVzY3JpcHRpdmUgYnV0IG5vdCBvdmVybHkgcGxheWZ1bCAoZS5nLiwgIkJ1aWxkIGEgV2VhdGhlciBEYXRhIEFuYWx5emVyIiBub3QgIldlYXRoZXIgV2l6YXJkIDMwMDAiKQogICAgICAgICAgICA%3D"
        },
        {
          "title": "How to prepare neuronal cell cultures",
          "url": "https://youtube.com/watch?v=TBjPDW5zM_g&pp=ygWjKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIFRpdGxlIChvcHRpb25hbCk6IFJhdCBOZXVyb25zCiAgICAgICAgICAgIERlc2NyaXB0aW9uIChvcHRpb25hbCk6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIERpZmZpY3VsdHk6IGludGVybWVkaWF0ZQogICAgICAgICAgICBUb3RhbCBEdXJhdGlvbiAoZGF5cyk6IDMwCiAgICAgICAgICAgIFByZXJlcXVpc2l0ZXM6IGknbSBhIDJuZCB5ZWFyIGJpb2xvZ3kgbWFqb3IKICAgICAgICAgICAgVGltZSBwZXIgRGF5IChtaW51dGVzKTogMTgwCiAgICAgICAgICAgIExlYXJuaW5nIFN0eWxlOiBiYWxhbmNlZAogICAgICAgICAgICBOdW1iZXIgb2YgUHJvamVjdHM6IDQKICAgICAgICAgICAgCiAgICAgICAgICAgIFRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgd2l0aCBhIG1haW4gJ2N1cnJpY3VsdW1fdGl0bGUnIGFuZCAnY3VycmljdWx1bV9kZXNjcmlwdGlvbicsIAogICAgICAgICAgICBhbmQgYSBsaXN0IG9mICdkYXlzJy4gRWFjaCBkYXkgb2JqZWN0IGluIHRoZSBsaXN0IHNob3VsZCBoYXZlOgogICAgICAgICAgICAtICdkYXlfbnVtYmVyJyAoaW50KQogICAgICAgICAgICAtICd0aXRsZScgKHN0ciwgY29uY2lzZSB0aXRsZSBmb3IgdGhlIGRheSkKICAgICAgICAgICAgLSAnaXNfcHJvamVjdF9kYXknIChib29sLCB0cnVlIGlmIHRoaXMgZGF5IGlzIGEgcHJvamVjdCBkYXksIGZhbHNlIG90aGVyd2lzZSkKICAgICAgICAgICAgLSAncHJvamVjdF9kYXRhJyAoZGljdCwgb3B0aW9uYWwsIG9ubHkgaWYgaXNfcHJvamVjdF9kYXkgaXMgdHJ1ZS4gU2hvdWxkIGNvbnRhaW4gJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ29iamVjdGl2ZXMnLCAncmVxdWlyZW1lbnRzJywgJ2RlbGl2ZXJhYmxlcycsIGFuZCAnZXZhbHVhdGlvbl9jcml0ZXJpYScpCiAgICAgICAgICAgIC0gJ2NvbnRlbnQnIChkaWN0LCBUaXBUYXAvUHJvc2VNaXJyb3IgSlNPTiBvYmplY3QgZm9yIHRoZSBsZWFybmluZyBtb2R1bGUuIFRoaXMgb2JqZWN0IE1VU1QgaGF2ZSBhIHJvb3QgJ3R5cGUnOiAnZG9jJyBhbmQgYSAnY29udGVudCcgYXJyYXkuIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnRhaW4gYSBzZXF1ZW5jZSBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIGRheSdzIGxlc3Nvbi4gU3RydWN0dXJlIGVhY2ggZGF5J3MgbGVzc29uIGNvbnRlbnQgd2l0aCB0aGUgZm9sbG93aW5nIHNlY3Rpb25zLCB1c2luZyBhcHByb3ByaWF0ZSBUaXBUYXAvUHJvc2VNaXJyb3Igbm9kZXMgKGxpa2UgJ2hlYWRpbmcnIHdpdGggbGV2ZWxzIDEtMywgJ3BhcmFncmFwaCcsICdidWxsZXRMaXN0JywgJ29yZGVyZWRMaXN0JywgJ2xpc3RJdGVtJywgJ2NvZGVCbG9jaycgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCAndGV4dCcgbm9kZXMgd2l0aCBtYXJrcyBmb3IgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnKToKICAgICAgICAgICAgICAgIDEuICAiSW50cm9kdWN0aW9uIjogKFJlcXVpcmVkKSBBIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBkYXkncyB0b3BpYyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDIsIGZvbGxvd2VkIGJ5IG9uZSBvciB0d28gJ3BhcmFncmFwaCcgbm9kZXMpLgogICAgICAgICAgICAgICAgMi4gICJMZWFybmluZyBPYmplY3RpdmVzIjogKFJlcXVpcmVkKSAyLTQgY2xlYXIsIGFjdGlvbmFibGUgb2JqZWN0aXZlcyBmb3IgdGhlIGRheSAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUsIHdoZXJlIGVhY2ggJ2xpc3RJdGVtJyBjb250YWlucyBhICdwYXJhZ3JhcGgnIHdpdGggdGhlIG9iamVjdGl2ZSkuCiAgICAgICAgICAgICAgICAzLiAgIktleSBDb25jZXB0cyI6IChSZXF1aXJlZCkgRGV0YWlsZWQgZXhwbGFuYXRpb25zIG9mIHRoZSBjb3JlIGNvbmNlcHRzIGZvciB0aGUgZGF5LiBUaGlzIHNob3VsZCBiZSB0aGUgbW9zdCBzdWJzdGFudGlhbCBwYXJ0LiBVc2UgbXVsdGlwbGUgJ2hlYWRpbmcnIG5vZGVzIChsZXZlbCAzKSBmb3Igc3ViLXRvcGljcyBpZiBuZWVkZWQsIGZvbGxvd2VkIGJ5IGRldGFpbGVkICdwYXJhZ3JhcGgnIG5vZGVzLiBJbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSAnU3VwcG9ydGluZyBSZXNlYXJjaCcgKHdoaWNoIHdpbGwgYmUgcHJvdmlkZWQgdG8geW91KSB0byBtYWtlIHRoZXNlIGV4cGxhbmF0aW9ucyBjb21wcmVoZW5zaXZlLiBJZiBjb2RlIGV4YW1wbGVzIG9yIG1hdGhlbWF0aWNhbCBmb3JtdWxhcyBhcmUgcmVsZXZhbnQgYW5kIGZvdW5kIGluIHJlc2VhcmNoLCByZXByZXNlbnQgdGhlbSBhY2N1cmF0ZWx5LCBwZXJoYXBzIHdpdGhpbiAncGFyYWdyYXBoJyBub2RlcyBvciB1c2luZyAnY29kZUJsb2NrJyBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgICAgIDQuICAiRXhhbXBsZXMiOiAoT3B0aW9uYWwsIGJ1dCBoaWdobHkgZW5jb3VyYWdlZCkgMS0yIHdvcmtlZCBleGFtcGxlcyBvciBpbGx1c3RyYXRpdmUgc2NlbmFyaW9zIHJlbGF0ZWQgdG8gdGhlIGtleSBjb25jZXB0cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5ICdwYXJhZ3JhcGgnIG9yICdvcmRlcmVkTGlzdCcgbm9kZXMgZXhwbGFpbmluZyB0aGUgZXhhbXBsZSBzdGVwLWJ5LXN0ZXApLgogICAgICAgICAgICAgICAgNS4gICJTdW1tYXJ5IjogKFJlcXVpcmVkKSBBIGNvbmNpc2UgcmVjYXAgb2YgdGhlIGRheSdzIG1haW4gcG9pbnRzIChlLmcuLCBhICdoZWFkaW5nJyBub2RlIHdpdGggbGV2ZWwgMywgZm9sbG93ZWQgYnkgYSAnYnVsbGV0TGlzdCcgbm9kZSkuCiAgICAgICAgICAgICAgICBFbnN1cmUgYWxsIHRleHQgY29udGVudCBpcyB3ZWxsLXdyaXR0ZW4sIGNsZWFyLCBhbmQgZW5nYWdpbmcuCiAgICAgICAgICAgIC0gJ3Jlc291cmNlcycgKGxpc3Qgb2YgZGljdHMsIGVhY2ggd2l0aCAndGl0bGUnIGFuZCAndXJsJykKICAgICAgICAgICAgLSAnZXN0aW1hdGVkX2hvdXJzJyAoZmxvYXQsIG9wdGlvbmFsKQogICAgICAgICAgICAKICAgICAgICAgICAgRm9jdXMgb24gY3JlYXRpbmcgcHJhY3RpY2FsLCBhY3Rpb25hYmxlIGNvbnRlbnQgZm9yIGVhY2ggZGF5LgogICAgICAgICAgICBFbnN1cmUgdGhlIGN1cnJpY3VsdW0gc3BhbnMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy4KICAgICAgICAgICAgCiAgICAgICAgICAgIENSSVRJQ0FMIElOU1RSVUNUSU9OUyBGT1IgUkVTT1VSQ0VTOgogICAgICAgICAgICAxLiBUaGUgU3VwcG9ydGluZyBSZXNlYXJjaCBzZWN0aW9uIHdpbGwgY29udGFpbiBZb3VUdWJlIHZpZGVvcyB3aXRoIGlkZW50aWZpZXJzIGxpa2UgW1lUMV0sIFtZVDJdLCBldGMuCiAgICAgICAgICAgIDIuIFlvdSBNVVNUIHVzZSB0aGVzZSBpZGVudGlmaWVycyBpbiB0aGUgJ3VybCcgZmllbGQgd2hlbiBhZGRpbmcgWW91VHViZSB2aWRlb3MgdG8gcmVzb3VyY2VzCiAgICAgICAgICAgIDMuIEZvciBleGFtcGxlOiB7InRpdGxlIjogIkludHJvZHVjdGlvbiB0byBSZWFjdCBIb29rcyIsICJ1cmwiOiAiW1lUM10ifQogICAgICAgICAgICA0LiBBbHNvIGluY2x1ZGUgbm9uLVlvdVR1YmUgcmVzb3VyY2VzIChhcnRpY2xlcywgZG9jdW1lbnRhdGlvbikgd2l0aCB0aGVpciBmdWxsIFVSTHMKICAgICAgICAgICAgNS4gRWFjaCBkYXkgc2hvdWxkIGhhdmUgMi00IHJlbGV2YW50IHJlc291cmNlcyBtaXhpbmcgWW91VHViZSB2aWRlb3MgYW5kIG90aGVyIHNvdXJjZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIFdoZW4gZ2VuZXJhdGluZyB0aGUgJ2NvbnRlbnQnIGZvciBlYWNoIGRheSwgdXRpbGl6ZSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSBhbG9uZyB3aXRoIHRoZXNlIHByZWZlcmVuY2VzKSB0byBtYWtlIHRoZSBleHBsYW5hdGlvbnMgYW5kIGNvbmNlcHRzIGFzIGRldGFpbGVkIGFuZCBhY2N1cmF0ZSBhcyBwb3NzaWJsZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIElNUE9SVEFOVDogSWYgbnVtX3Byb2plY3RzIGlzIGdyZWF0ZXIgdGhhbiAwLCBkaXN0cmlidXRlIHRoZSBwcm9qZWN0cyBldmVubHkgdGhyb3VnaG91dCB0aGUgY3VycmljdWx1bS4gRm9yIGV4YW1wbGU6CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTEgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHRoZSBwcm9qZWN0IGFyb3VuZCBkYXkgMjAtMjUKICAgICAgICAgICAgLSBJZiBudW1fcHJvamVjdHM9MiBhbmQgZHVyYXRpb249MzAgZGF5cywgcGxhY2UgcHJvamVjdHMgYXJvdW5kIGRheSAxMC0xMiBhbmQgZGF5IDIyLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTMgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgOC0xMCwgZGF5IDE2LTE4LCBhbmQgZGF5IDI0LTI2CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3IgcHJvamVjdCBkYXlzOgogICAgICAgICAgICAtIFNldCAnaXNfcHJvamVjdF9kYXknIHRvIHRydWUKICAgICAgICAgICAgLSBJbmNsdWRlIGEgJ3Byb2plY3RfZGF0YScgb2JqZWN0IHdpdGggY29tcHJlaGVuc2l2ZSBwcm9qZWN0IGRldGFpbHMKICAgICAgICAgICAgLSBUaGUgcHJvamVjdCBzaG91bGQgaW50ZWdyYXRlIGFuZCBhcHBseSBjb25jZXB0cyBsZWFybmVkIGluIHRoZSBwcmVjZWRpbmcgZGF5cwogICAgICAgICAgICAtIFByb2plY3RzIHNob3VsZCBiZSBwcmFjdGljYWwsIGhhbmRzLW9uIGFjdGl2aXRpZXMgdGhhdCByZWluZm9yY2UgbGVhcm5pbmcKICAgICAgICAgICAgLSBQcm9qZWN0IHRpdGxlcyBzaG91bGQgYmUgZGVzY3JpcHRpdmUgYnV0IG5vdCBvdmVybHkgcGxheWZ1bCAoZS5nLiwgIkJ1aWxkIGEgV2VhdGhlciBEYXRhIEFuYWx5emVyIiBub3QgIldlYXRoZXIgV2l6YXJkIDMwMDAiKQogICAgICAgICAgICA%3D"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 15,
      "title": "Project 2: Virtual Neuron Culture Log",
      "is_project_day": true,
      "project_data": {
        "title": "Documenting a Simulated Neuronal Culture",
        "description": "In this project, you will create a detailed lab notebook entry documenting a hypothetical 14-day neuronal culture experiment. You will describe the key procedures, expected observations, and decisions made at each critical time point (DIV 0, 1, 4, 7, 10, 14). This project simulates the process of meticulous record-keeping, which is essential for reproducible science.",
        "objectives": [
          "Demonstrate a comprehensive understanding of the entire culture process.",
          "Accurately describe expected morphological changes at different DIVs.",
          "Correctly apply procedures like media changes at the appropriate times.",
          "Practice clear and concise scientific documentation.",
          "Hypothesize potential problems (e.g., contamination, poor growth) and propose solutions."
        ],
        "requirements": [
          "A word processor or text editor.",
          "Access to the resources and concepts from Days 8-14."
        ],
        "deliverables": [
          "A single document formatted as a lab notebook. It should contain dated entries for at least DIV 0, 1, 4, 7, 10, and 14. Each entry should include: 1. Procedures Performed (e.g., 'Plated cells', '50% media change'). 2. Observations (e.g., 'Phase-contrast microscopy shows cells are ~80% confluent with extensive neurite bundling'). 3. Notes/Troubleshooting (e.g., 'Well A3 shows signs of potential yeast contamination, will monitor closely')."
        ],
        "evaluation_criteria": [
          "Accuracy and realism of the described procedures and observations.",
          "Logical progression of the culture's development over 14 days.",
          "Clarity and organization of the lab notebook format.",
          "Thoughtful inclusion of potential issues and decision-making processes.",
          "Demonstrated understanding of the concepts from the past week."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Day: Virtual Culture Log"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today's project is a 'thought experiment' where you put yourself in the shoes of a researcher carrying out a two-week culture. Your task is to create the documentation for this experiment. A detailed, accurate lab notebook is the cornerstone of good science, allowing you or others to understand exactly what happened, troubleshoot problems, and reproduce the results."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Brief"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Refer to the 'project_data' for the full description, objectives, and deliverables. Your goal is to create a realistic narrative of a culture's life over two weeks."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Guidance and Tips"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Be Quantitative:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Instead of 'changed the media,' write 'Performed a 50% media exchange, removing 100µL of conditioned media and adding 100µL of fresh, pre-warmed complete medium'."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Be Descriptive:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " For observations, describe what you would see. 'DIV 7: Extensive neurite outgrowth observed, with clear fasciculation (bundling) of axons between cell clusters. Cell bodies remain phase-bright.'"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Introduce a Problem:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " To make it more realistic, consider having one of your hypothetical wells experience an issue. Maybe the cells didn't attach well, or you spot something that looks like contamination. Describe how you would respond."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This project reinforces the entire culture workflow by requiring you to actively recall and document each stage. It bridges the gap between knowing the steps and understanding the day-to-day reality of managing a cell culture experiment."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Review: All materials from Day 8-14",
          "url": "#"
        },
        {
          "title": "Guidelines for Keeping a Lab Notebook",
          "url": "https://www.swarthmore.edu/NatSci/cpurrin1/notebook.htm"
        },
        {
          "title": "What your brain cells look like when you learn something NEW",
          "url": "https://youtube.com/shorts/ztPKM0nryY8"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 16,
      "title": "Introduction to Electrophysiology: Spikes, Bursts, and Action Potentials",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Our neural network is mature. Now, how do we listen to it? Today, we transition from cell biology to electrophysiology. We'll learn the language of neurons: the action potential (or 'spike'). We'll explore what these electrical signals represent and how they organize into meaningful patterns like 'bursts' and 'network bursts'."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Define action potential and what an MEA electrode measures (extracellular field potential)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Distinguish between a single spike, a burst, and a network burst."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand how these electrical events represent information processing in the network."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "The Action Potential ('Spike')"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "An action potential is a rapid, transient change in the electrical potential across a neuron's membrane. It is the fundamental unit of communication in the nervous system. When we record from an MEA, we are not measuring the intracellular voltage directly. Instead, we measure the small, brief change in the "
              },
              {
                "type": "text",
                "text": "extracellular field potential",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " caused by the flow of ions during an action potential in a nearby neuron. This recorded event is what we call a 'spike'."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "From Spikes to Bursts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Neurons rarely fire just a single spike. Often, they fire a rapid succession of spikes in a short period. This is called a "
              },
              {
                "type": "text",
                "text": "burst",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": ". A burst can encode more information than a single spike and is a common firing pattern in neuronal networks. We can define a burst with parameters like a minimum number of spikes and a maximum time between spikes."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Network Bursts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The most interesting phenomenon in a mature MEA culture is the "
              },
              {
                "type": "text",
                "text": "network burst",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type":="text",
                "text": ". This is a period of synchronized, high-frequency firing across many electrodes in the network simultaneously. It represents a moment of global, coordinated communication within the culture. These network bursts are a key indicator of a healthy, functional network and are the primary phenomenon we will analyze and modulate during 'training'."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "MEA electrodes measure extracellular spikes, which are the footprint of a neuron's action potential."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Spikes can be organized into bursts (rapid firing from one electrode) and network bursts (synchronized firing across many electrodes)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "These hierarchical patterns of activity are the language of the neural network, which we can now begin to decode."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Introduction to MEA Recording and Analysis",
          "url": "https://www.axionbiosystems.com/sites/default/files/2021-02/an-001-an-introduction-to-mea-recording-and-analysis.pdf"
        },
        {
          "title": "Action potential - Khan Academy",
          "url": "https://www.khanacademy.org/science/biology/human-biology/neuron-nervous-system/a/the-action-potential"
        },
        {
          "title": "Lab-Grown Brain Learns Pong - Is This Biological Neural Network 'Sentient'?",
          "url": "https://youtube.com/shorts/lG83gePtgV8"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 17,
      "title": "MEA Data Acquisition Systems: Hardware and Software",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "How do we get the tiny electrical signals from the neurons in the dish to a computer screen? This requires a sophisticated data acquisition (DAQ) system. Today, we'll demystify the hardware and software components that bridge the biological and digital worlds, including the headstage, amplifier, and recording software."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Describe the signal path from the MEA plate to the computer."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain the function of the amplifier, digitizer, and filter in an MEA system."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify key settings in MEA recording software, such as sampling rate and voltage threshold."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "The Hardware Chain"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The signal travels through several hardware components:"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "MEA Plate:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " The source of the raw, analog biological signals (microvolt range)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Headstage/Amplifier:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " The MEA plate docks into a headstage. This device amplifies the tiny signals (by 1000x or more) to make them measurable and performs initial filtering to remove noise."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Digitizer (DAQ Card):",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " This crucial component converts the continuous, analog voltage signal into a discrete, digital signal that a computer can understand. The speed at which it does this is the sampling rate."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Computer:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Runs the software that controls the recording, visualizes the data in real-time, and saves it to a file."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Key Software Settings"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "In the recording software (e.g., Axion's Axis Navigator, Multi Channel Systems' Multiwell-Screen), you'll configure several key parameters:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Sampling Rate:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " How many data points are recorded per second (e.g., 25,000 Hz or 25 kHz). A high sampling rate is needed to accurately capture the fast shape of a spike."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Filtering:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " A digital band-pass filter (e.g., 300-5000 Hz) is applied to the data to remove low-frequency noise (field potentials) and high-frequency noise, isolating the spike signals."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Spike Detection Threshold:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " To avoid counting noise as spikes, a voltage threshold is set. Only signals that cross this threshold (e.g., +/- 5 times the standard deviation of the baseline noise) are registered as spikes. This is a critical step for clean data."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A chain of hardware (MEA -> amplifier -> digitizer -> computer) is required to record neuronal signals."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Amplification, filtering, and digitization are key processes that convert the biological signal into usable data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Software settings like sampling rate and spike threshold must be set appropriately to ensure high-quality data acquisition."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "MEA Systems Overview - Multi Channel Systems",
          "url": "https://www.multichannelsystems.com/products/mea-systems"
        },
        {
          "title": "Maestro MEA System - Axion BioSystems",
          "url": "https://www.axionbiosystems.com/products/systems/maestro-pro"
        },
        {
          "title": "These brain cells can play Pong",
          "url": "https://youtube.com/shorts/4Lhtn4g_ZRY"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 18,
      "title": "Recording Spontaneous Neuronal Activity",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The moment of truth: listening to our network for the first time. Today, we'll cover the practical steps of making a baseline recording of spontaneous activity. This involves setting up the MEA system, configuring the software, and observing the real-time data stream. This initial recording serves as a crucial 'health check' and a baseline against which we can compare any changes induced by stimulation."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Outline the workflow for starting a new recording session."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Interpret real-time data visualizations like the activity map and raw voltage traces."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify the characteristics of a good baseline recording."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "The Recording Workflow"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Acclimatization: Place the MEA plate into the recording headstage inside the incubator. Allow it to acclimatize for 10-15 minutes to ensure temperature and CO2 stability."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Software Setup: Launch the recording software. Create a new experiment file and configure the settings (sampling rate, filter, spike detection threshold) as discussed yesterday."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Live View: Start the live data stream. You will see several visualizations."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Baseline Recording: Once the signal is stable, start the official recording. A typical baseline recording lasts for 5-10 minutes to capture a representative sample of the network's spontaneous activity."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Save Data: Stop the recording and ensure the data file is saved correctly. Common file formats include .h5 (HDF5) or proprietary formats."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Interpreting Real-Time Visuals"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Raw Traces:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " A scrolling view of the voltage vs. time for each electrode. This is where you can see the actual shape of the spikes."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Activity Map:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " A color-coded map of the MEA grid, where the color of each electrode represents its current firing rate. This gives an at-a-glance view of network activity. You can see network bursts as flashes of high activity across the whole grid."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "What Makes a Good Recording?"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A good baseline recording shows a high signal-to-noise ratio (spikes are clearly distinguishable from the baseline), activity on a significant percentage of electrodes, and the presence of periodic, synchronized network bursts."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Recording spontaneous activity involves acclimatizing the plate, setting up software, and recording for a set duration."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Real-time visualizations like the activity map provide immediate feedback on network health and behavior."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A stable baseline recording with clear network bursts is the goal before proceeding to stimulation experiments."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "These brain cells can play Pong",
          "url": "https://youtube.com/shorts/4Lhtn4g_ZRY"
        },
        {
          "title": "Growing Living Rat Neurons To Play... DOOM? | Part 1 (shows recording setup)",
          "url": "https://youtube.com/watch?v=bEXefdbQDjw&pp=ygWjKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIFRpdGxlIChvcHRpb25hbCk6IFJhdCBOZXVyb25zCiAgICAgICAgICAgIERlc2NyaXB0aW9uIChvcHRpb25hbCk6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIERpZmZpY3VsdHk6IGludGVybWVkaWF0ZQogICAgICAgICAgICBUb3RhbCBEdXJhdGlvbiAoZGF5cyk6IDMwCiAgICAgICAgICAgIFByZXJlcXVpc2l0ZXM6IGknbSBhIDJuZCB5ZWFyIGJpb2xvZ3kgbWFqb3IKICAgICAgICAgICAgVGltZSBwZXIgRGF5IChtaW51dGVzKTogMTgwCiAgICAgICAgICAgIExlYXJuaW5nIFN0eWxlOiBiYWxhbmNlZAogICAgICAgICAgICBOdW1iZXIgb2YgUHJvamVjdHM6IDQKICAgICAgICAgICAgCiAgICAgICAgICAgIFRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgd2l0aCBhIG1haW4gJ2N1cnJpY3VsdW1fdGl0bGUnIGFuZCAnY3VycmljdWx1bV9kZXNjcmlwdGlvbicsIAogICAgICAgICAgICBhbmQgYSBsaXN0IG9mICdkYXlzJy4gRWFjaCBkYXkgb2JqZWN0IGluIHRoZSBsaXN0IHNob3VsZCBoYXZlOgogICAgICAgICAgICAtICdkYXlfbnVtYmVyJyAoaW50KQogICAgICAgICAgICAtICd0aXRsZScgKHN0ciwgY29uY2lzZSB0aXRsZSBmb3IgdGhlIGRheSkKICAgICAgICAgICAgLSAnaXNfcHJvamVjdF9kYXknIChib29sLCB0cnVlIGlmIHRoaXMgZGF5IGlzIGEgcHJvamVjdCBkYXksIGZhbHNlIG90aGVyd2lzZSkKICAgICAgICAgICAgLSAncHJvamVjdF9kYXRhJyAoZGljdCwgb3B0aW9uYWwsIG9ubHkgaWYgaXNfcHJvamVjdF9kYXkgaXMgdHJ1ZS4gU2hvdWxkIGNvbnRhaW4gJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ29iamVjdGl2ZXMnLCAncmVxdWlyZW1lbnRzJywgJ2RlbGl2ZXJhYmxlcycsIGFuZCAnZXZhbHVhdGlvbl9jcml0ZXJpYScpCiAgICAgICAgICAgIC0gJ2NvbnRlbnQnIChkaWN0LCBUaXBUYXAvUHJvc2VNaXJyb3IgSlNPTiBvYmplY3QgZm9yIHRoZSBsZWFybmluZyBtb2R1bGUuIFRoaXMgb2JqZWN0IE1VU1QgaGF2ZSBhIHJvb3QgJ3R5cGUnOiAnZG9jJyBhbmQgYSAnY29udGVudCcgYXJyYXkuIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnRhaW4gYSBzZXF1ZW5jZSBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIGRheSdzIGxlc3Nvbi4gU3RydWN0dXJlIGVhY2ggZGF5J3MgbGVzc29uIGNvbnRlbnQgd2l0aCB0aGUgZm9sbG93aW5nIHNlY3Rpb25zLCB1c2luZyBhcHByb3ByaWF0ZSBUaXBUYXAvUHJvc2VNaXJyb3Igbm9kZXMgKGxpa2UgJ2hlYWRpbmcnIHdpdGggbGV2ZWxzIDEtMywgJ3BhcmFncmFwaCcsICdidWxsZXRMaXN0JywgJ29yZGVyZWRMaXN0JywgJ2xpc3RJdGVtJywgJ2NvZGVCbG9jaycgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCAndGV4dCcgbm9kZXMgd2l0aCBtYXJrcyBmb3IgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnKToKICAgICAgICAgICAgICAgIDEuICAiSW50cm9kdWN0aW9uIjogKFJlcXVpcmVkKSBBIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBkYXkncyB0b3BpYyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDIsIGZvbGxvd2VkIGJ5IG9uZSBvciB0d28gJ3BhcmFncmFwaCcgbm9kZXMpLgogICAgICAgICAgICAgICAgMi4gICJMZWFybmluZyBPYmplY3RpdmVzIjogKFJlcXVpcmVkKSAyLTQgY2xlYXIsIGFjdGlvbmFibGUgb2JqZWN0aXZlcyBmb3IgdGhlIGRheSAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUsIHdoZXJlIGVhY2ggJ2xpc3RJdGVtJyBjb250YWlucyBhICdwYXJhZ3JhcGgnIHdpdGggdGhlIG9iamVjdGl2ZSkuCiAgICAgICAgICAgICAgICAzLiAgIktleSBDb25jZXB0cyI6IChSZXF1aXJlZCkgRGV0YWlsZWQgZXhwbGFuYXRpb25zIG9mIHRoZSBjb3JlIGNvbmNlcHRzIGZvciB0aGUgZGF5LiBUaGlzIHNob3VsZCBiZSB0aGUgbW9zdCBzdWJzdGFudGlhbCBwYXJ0LiBVc2UgbXVsdGlwbGUgJ2hlYWRpbmcnIG5vZGVzIChsZXZlbCAzKSBmb3Igc3ViLXRvcGljcyBpZiBuZWVkZWQsIGZvbGxvd2VkIGJ5IGRldGFpbGVkICdwYXJhZ3JhcGgnIG5vZGVzLiBJbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSAnU3VwcG9ydGluZyBSZXNlYXJjaCcgKHdoaWNoIHdpbGwgYmUgcHJvdmlkZWQgdG8geW91KSB0byBtYWtlIHRoZXNlIGV4cGxhbmF0aW9ucyBjb21wcmVoZW5zaXZlLiBJZiBjb2RlIGV4YW1wbGVzIG9yIG1hdGhlbWF0aWNhbCBmb3JtdWxhcyBhcmUgcmVsZXZhbnQgYW5kIGZvdW5kIGluIHJlc2VhcmNoLCByZXByZXNlbnQgdGhlbSBhY2N1cmF0ZWx5LCBwZXJoYXBzIHdpdGhpbiAncGFyYWdyYXBoJyBub2RlcyBvciB1c2luZyAnY29kZUJsb2NrJyBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgICAgIDQuICAiRXhhbXBsZXMiOiAoT3B0aW9uYWwsIGJ1dCBoaWdobHkgZW5jb3VyYWdlZCkgMS0yIHdvcmtlZCBleGFtcGxlcyBvciBpbGx1c3RyYXRpdmUgc2NlbmFyaW9zIHJlbGF0ZWQgdG8gdGhlIGtleSBjb25jZXB0cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5ICdwYXJhZ3JhcGgnIG9yICdvcmRlcmVkTGlzdCcgbm9kZXMgZXhwbGFpbmluZyB0aGUgZXhhbXBsZSBzdGVwLWJ5LXN0ZXApLgogICAgICAgICAgICAgICAgNS4gICJTdW1tYXJ5IjogKFJlcXVpcmVkKSBBIGNvbmNpc2UgcmVjYXAgb2YgdGhlIGRheSdzIG1haW4gcG9pbnRzIChlLmcuLCBhICdoZWFkaW5nJyBub2RlIHdpdGggbGV2ZWwgMywgZm9sbG93ZWQgYnkgYSAnYnVsbGV0TGlzdCcgbm9kZSkuCiAgICAgICAgICAgICAgICBFbnN1cmUgYWxsIHRleHQgY29udGVudCBpcyB3ZWxsLXdyaXR0ZW4sIGNsZWFyLCBhbmQgZW5nYWdpbmcuCiAgICAgICAgICAgIC0gJ3Jlc291cmNlcycgKGxpc3Qgb2YgZGljdHMsIGVhY2ggd2l0aCAndGl0bGUnIGFuZCAndXJsJykKICAgICAgICAgICAgLSAnZXN0aW1hdGVkX2hvdXJzJyAoZmxvYXQsIG9wdGlvbmFsKQogICAgICAgICAgICAKICAgICAgICAgICAgRm9jdXMgb24gY3JlYXRpbmcgcHJhY3RpY2FsLCBhY3Rpb25hYmxlIGNvbnRlbnQgZm9yIGVhY2ggZGF5LgogICAgICAgICAgICBFbnN1cmUgdGhlIGN1cnJpY3VsdW0gc3BhbnMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy4KICAgICAgICAgICAgCiAgICAgICAgICAgIENSSVRJQ0FMIElOU1RSVUNUSU9OUyBGT1IgUkVTT1VSQ0VTOgogICAgICAgICAgICAxLiBUaGUgU3VwcG9ydGluZyBSZXNlYXJjaCBzZWN0aW9uIHdpbGwgY29udGFpbiBZb3VUdWJlIHZpZGVvcyB3aXRoIGlkZW50aWZpZXJzIGxpa2UgW1lUMV0sIFtZVDJdLCBldGMuCiAgICAgICAgICAgIDIuIFlvdSBNVVNUIHVzZSB0aGVzZSBpZGVudGlmaWVycyBpbiB0aGUgJ3VybCcgZmllbGQgd2hlbiBhZGRpbmcgWW91VHViZSB2aWRlb3MgdG8gcmVzb3VyY2VzCiAgICAgICAgICAgIDMuIEZvciBleGFtcGxlOiB7InRpdGxlIjogIkludHJvZHVjdGlvbiB0byBSZWFjdCBIb29rcyIsICJ1cmwiOiAiW1lUM10ifQogICAgICAgICAgICA0LiBBbHNvIGluY2x1ZGUgbm9uLVlvdVR1YmUgcmVzb3VyY2VzIChhcnRpY2xlcywgZG9jdW1lbnRhdGlvbikgd2l0aCB0aGVpciBmdWxsIFVSTHMKICAgICAgICAgICAgNS4gRWFjaCBkYXkgc2hvdWxkIGhhdmUgMi00IHJlbGV2YW50IHJlc291cmNlcyBtaXhpbmcgWW91VHViZSB2aWRlb3MgYW5kIG90aGVyIHNvdXJjZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIFdoZW4gZ2VuZXJhdGluZyB0aGUgJ2NvbnRlbnQnIGZvciBlYWNoIGRheSwgdXRpbGl6ZSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSBhbG9uZyB3aXRoIHRoZXNlIHByZWZlcmVuY2VzKSB0byBtYWtlIHRoZSBleHBsYW5hdGlvbnMgYW5kIGNvbmNlcHRzIGFzIGRldGFpbGVkIGFuZCBhY2N1cmF0ZSBhcyBwb3NzaWJsZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIElNUE9SVEFOVDogSWYgbnVtX3Byb2plY3RzIGlzIGdyZWF0ZXIgdGhhbiAwLCBkaXN0cmlidXRlIHRoZSBwcm9qZWN0cyBldmVubHkgdGhyb3VnaG91dCB0aGUgY3VycmljdWx1bS4gRm9yIGV4YW1wbGU6CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTEgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHRoZSBwcm9qZWN0IGFyb3VuZCBkYXkgMjAtMjUKICAgICAgICAgICAgLSBJZiBudW1fcHJvamVjdHM9MiBhbmQgZHVyYXRpb249MzAgZGF5cywgcGxhY2UgcHJvamVjdHMgYXJvdW5kIGRheSAxMC0xMiBhbmQgZGF5IDIyLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTMgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgOC0xMCwgZGF5IDE2LTE4LCBhbmQgZGF5IDI0LTI2CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3IgcHJvamVjdCBkYXlzOgogICAgICAgICAgICAtIFNldCAnaXNfcHJvamVjdF9kYXknIHRvIHRydWUKICAgICAgICAgICAgLSBJbmNsdWRlIGEgJ3Byb2plY3RfZGF0YScgb2JqZWN0IHdpdGggY29tcHJlaGVuc2l2ZSBwcm9qZWN0IGRldGFpbHMKICAgICAgICAgICAgLSBUaGUgcHJvamVjdCBzaG91bGQgaW50ZWdyYXRlIGFuZCBhcHBseSBjb25jZXB0cyBsZWFybmVkIGluIHRoZSBwcmVjZWRpbmcgZGF5cwogICAgICAgICAgICAtIFByb2plY3RzIHNob3VsZCBiZSBwcmFjdGljYWwsIGhhbmRzLW9uIGFjdGl2aXRpZXMgdGhhdCByZWluZm9yY2UgbGVhcm5pbmcKICAgICAgICAgICAgLSBQcm9qZWN0IHRpdGxlcyBzaG91bGQgYmUgZGVzY3JpcHRpdmUgYnV0IG5vdCBvdmVybHkgcGxheWZ1bCAoZS5nLiwgIkJ1aWxkIGEgV2VhdGhlciBEYXRhIEFuYWx5emVyIiBub3QgIldlYXRoZXIgV2l6YXJkIDMwMDAiKQogICAgICAgICAgICDSBwkJwQkBhyohjO8%3D"
        },
        {
          "title": "Maestro Z Platform and Axis Z Software",
          "url": "https://www.axionbiosystems.com/resources/videos/maestro-z-platform-and-axis-z-software"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 19,
      "title": "Basic Data Analysis: Spike Sorting and Raster Plots",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "We have a data file full of spikes. What do we do with it? Today we'll cover the first steps of offline data analysis. We'll discuss the concept of spike sorting to distinguish between different neurons on the same electrode and introduce the most fundamental visualization in neuroscience: the raster plot."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain the purpose and basic principle of spike sorting."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type":="paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Generate and interpret a raster plot to visualize network activity."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Calculate basic metrics like mean firing rate."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Spike Sorting"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A single MEA electrode might be close enough to record spikes from several different neurons. These neurons will likely have slightly different spike shapes (waveforms) due to their size and distance from the electrode. "
              },
              {
                "type": "text",
                "text": "Spike sorting",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " is a computational process that groups the recorded spikes on a single channel into clusters based on their waveform similarity. Each cluster is assumed to represent the activity of a single neuron, or 'unit'. While complex, this allows for a more fine-grained analysis of the network. For many MEA analyses, however, we often work with 'multi-unit activity' (all spikes on a channel) for simplicity."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "The Raster Plot"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The most powerful way to visualize spike data is the "
              },
              {
                "type": "text",
                "text": "raster plot",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": ". In a raster plot, time is on the x-axis, and each active electrode (or sorted unit) is on the y-axis. Every time a spike occurs, a small tick mark or dot is placed at the corresponding time and electrode location. This simple plot elegantly reveals the temporal dynamics of the entire network. Network bursts are immediately obvious as vertical columns of ticks, where many electrodes fire in synchrony."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Basic Metrics"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "From the spike times, we can calculate simple but important metrics. The most basic is the "
              },
              {
                "type": "text",
                "text": "mean firing rate (MFR)",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " for each electrode, calculated as (Total number of spikes) / (Recording duration in seconds). This gives a measure of the overall activity level of each neuron or channel."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Spike sorting can be used to isolate the activity of individual neurons from a single electrode's signal."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Raster plots are essential for visualizing the timing of spikes across the entire network and identifying patterns like network bursts."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Simple metrics like mean firing rate provide a quantitative measure of network activity."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Spike Sorting - Scholarpedia",
          "url": "http://www.scholarpedia.org/article/Spike_sorting"
        },
        {
          "title": "Visualizing MEA Data: Raster Plots and Beyond",
          "url": "https://www.axionbiosystems.com/blog/visualizing-mea-data-raster-plots-and-beyond"
        },
        {
          "title": "Neural Spike Train Analysis in Python",
          "url": "https://medium.com/analytics-vidhya/neural-spike-train-analysis-in-python-part-1-a87895115686"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 20,
      "title": "Electrical Stimulation: Principles and Parameters",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Listening to the network is only half of the equation. To 'train' it, we need to talk back. This is done through electrical stimulation. Today, we'll cover the principles of how applying a voltage pulse to an electrode can make a neuron fire, and the key parameters we can control, such as amplitude, duration, and frequency."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain how electrical stimulation can evoke an action potential."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Define the key parameters of a stimulation pulse: amplitude, duration, and polarity."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the concept of a stimulation artifact and how to handle it."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Evoking Action Potentials"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Applying a voltage pulse through an MEA electrode causes a change in the local electric field. If this change is strong enough to depolarize the membrane of a nearby neuron to its threshold potential, it will trigger an action potential. We can essentially 'force' a neuron to fire on command. This allows us to inject information into the network."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Stimulation Parameters"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The effect of stimulation is controlled by several parameters:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Waveform:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Usually a biphasic pulse (one positive phase, one negative phase) is used. This charge-balanced approach minimizes electrode damage and harm to the cells."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Amplitude:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " The voltage or current of the pulse (e.g., +/- 200 mV). Higher amplitude can recruit more neurons over a larger area."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Pulse Width:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " The duration of each phase of the pulse (e.g., 100 microseconds). Longer pulses deliver more charge."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "The Stimulation Artifact"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "When we apply a stimulation pulse, the voltage is so large compared to a neural spike that it completely saturates the amplifier on all electrodes. This creates a massive, short-lived electrical "
              },
              {
                "type": "text",
                "text": "artifact",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " in the recording. This artifact blinds the system for a few milliseconds, obscuring any immediate neuronal responses. In data analysis, we must 'blank' or ignore the data during and immediately after the artifact to avoid misinterpreting it as neural activity."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Electrical stimulation allows us to actively input signals into the neural network."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Biphasic pulses with controlled amplitude and duration are used to safely evoke action potentials."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The stimulation artifact is a necessary byproduct that must be accounted for during data analysis."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Electrical Stimulation with MEAs - Multi Channel Systems",
          "url": "https://www.multichannelsystems.com/applications/electrical-stimulation"
        },
        {
          "title": "Growing Living Rat Neurons To Play... DOOM? | Part 1 (discusses stimulation)",
          "url": "https://youtube.com/watch?v=bEXefdbQDjw&pp=ygWjKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIFRpdGxlIChvcHRpb25hbCk6IFJhdCBOZXVyb25zCiAgICAgICAgICAgIERlc2NyaXB0aW9uIChvcHRpb25hbCk6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIERpZmZpY3VsdHk6IGludGVybWVkaWF0ZQogICAgICAgICAgICBUb3RhbCBEdXJhdGlvbiAoZGF5cyk6IDMwCiAgICAgICAgICAgIFByZXJlcXVpc2l0ZXM6IGknbSBhIDJuZCB5ZWFyIGJpb2xvZ3kgbWFqb3IKICAgICAgICAgICAgVGltZSBwZXIgRGF5IChtaW51dGVzKTogMTgwCiAgICAgICAgICAgIExlYXJuaW5nIFN0eWxlOiBiYWxhbmNlZAogICAgICAgICAgICBOdW1iZXIgb2YgUHJvamVjdHM6IDQKICAgICAgICAgICAgCiAgICAgICAgICAgIFRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgd2l0aCBhIG1haW4gJ2N1cnJpY3VsdW1fdGl0bGUnIGFuZCAnY3VycmljdWx1bV9kZXNjcmlwdGlvbicsIAogICAgICAgICAgICBhbmQgYSBsaXN0IG9mICdkYXlzJy4gRWFjaCBkYXkgb2JqZWN0IGluIHRoZSBsaXN0IHNob3VsZCBoYXZlOgogICAgICAgICAgICAtICdkYXlfbnVtYmVyJyAoaW50KQogICAgICAgICAgICAtICd0aXRsZScgKHN0ciwgY29uY2lzZSB0aXRsZSBmb3IgdGhlIGRheSkKICAgICAgICAgICAgLSAnaXNfcHJvamVjdF9kYXknIChib29sLCB0cnVlIGlmIHRoaXMgZGF5IGlzIGEgcHJvamVjdCBkYXksIGZhbHNlIG90aGVyd2lzZSkKICAgICAgICAgICAgLSAncHJvamVjdF9kYXRhJyAoZGljdCwgb3B0aW9uYWwsIG9ubHkgaWYgaXNfcHJvamVjdF9kYXkgaXMgdHJ1ZS4gU2hvdWxkIGNvbnRhaW4gJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ29iamVjdGl2ZXMnLCAncmVxdWlyZW1lbnRzJywgJ2RlbGl2ZXJhYmxlcycsIGFuZCAnZXZhbHVhdGlvbl9jcml0ZXJpYScpCiAgICAgICAgICAgIC0gJ2NvbnRlbnQnIChkaWN0LCBUaXBUYXAvUHJvc2VNaXJyb3IgSlNPTiBvYmplY3QgZm9yIHRoZSBsZWFybmluZyBtb2R1bGUuIFRoaXMgb2JqZWN0IE1VU1QgaGF2ZSBhIHJvb3QgJ3R5cGUnOiAnZG9jJyBhbmQgYSAnY29udGVudCcgYXJyYXkuIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnRhaW4gYSBzZXF1ZW5jZSBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIGRheSdzIGxlc3Nvbi4gU3RydWN0dXJlIGVhY2ggZGF5J3MgbGVzc29uIGNvbnRlbnQgd2l0aCB0aGUgZm9sbG93aW5nIHNlY3Rpb25zLCB1c2luZyBhcHByb3ByaWF0ZSBUaXBUYXAvUHJvc2VNaXJyb3Igbm9kZXMgKGxpa2UgJ2hlYWRpbmcnIHdpdGggbGV2ZWxzIDEtMywgJ3BhcmFncmFwaCcsICdidWxsZXRMaXN0JywgJ29yZGVyZWRMaXN0JywgJ2xpc3RJdGVtJywgJ2NvZGVCbG9jaycgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCAndGV4dCcgbm9kZXMgd2l0aCBtYXJrcyBmb3IgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnKToKICAgICAgICAgICAgICAgIDEuICAiSW50cm9kdWN0aW9uIjogKFJlcXVpcmVkKSBBIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBkYXkncyB0b3BpYyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDIsIGZvbGxvd2VkIGJ5IG9uZSBvciB0d28gJ3BhcmFncmFwaCcgbm9kZXMpLgogICAgICAgICAgICAgICAgMi4gICJMZWFybmluZyBPYmplY3RpdmVzIjogKFJlcXVpcmVkKSAyLTQgY2xlYXIsIGFjdGlvbmFibGUgb2JqZWN0aXZlcyBmb3IgdGhlIGRheSAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUsIHdoZXJlIGVhY2ggJ2xpc3RJdGVtJyBjb250YWlucyBhICdwYXJhZ3JhcGgnIHdpdGggdGhlIG9iamVjdGl2ZSkuCiAgICAgICAgICAgICAgICAzLiAgIktleSBDb25jZXB0cyI6IChSZXF1aXJlZCkgRGV0YWlsZWQgZXhwbGFuYXRpb25zIG9mIHRoZSBjb3JlIGNvbmNlcHRzIGZvciB0aGUgZGF5LiBUaGlzIHNob3VsZCBiZSB0aGUgbW9zdCBzdWJzdGFudGlhbCBwYXJ0LiBVc2UgbXVsdGlwbGUgJ2hlYWRpbmcnIG5vZGVzIChsZXZlbCAzKSBmb3Igc3ViLXRvcGljcyBpZiBuZWVkZWQsIGZvbGxvd2VkIGJ5IGRldGFpbGVkICdwYXJhZ3JhcGgnIG5vZGVzLiBJbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSAnU3VwcG9ydGluZyBSZXNlYXJjaCcgKHdoaWNoIHdpbGwgYmUgcHJvdmlkZWQgdG8geW91KSB0byBtYWtlIHRoZXNlIGV4cGxhbmF0aW9ucyBjb21wcmVoZW5zaXZlLiBJZiBjb2RlIGV4YW1wbGVzIG9yIG1hdGhlbWF0aWNhbCBmb3JtdWxhcyBhcmUgcmVsZXZhbnQgYW5kIGZvdW5kIGluIHJlc2VhcmNoLCByZXByZXNlbnQgdGhlbSBhY2N1cmF0ZWx5LCBwZXJoYXBzIHdpdGhpbiAncGFyYWdyYXBoJyBub2RlcyBvciB1c2luZyAnY29kZUJsb2NrJyBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgICAgIDQuICAiRXhhbXBsZXMiOiAoT3B0aW9uYWwsIGJ1dCBoaWdobHkgZW5jb3VyYWdlZCkgMS0yIHdvcmtlZCBleGFtcGxlcyBvciBpbGx1c3RyYXRpdmUgc2NlbmFyaW9zIHJlbGF0ZWQgdG8gdGhlIGtleSBjb25jZXB0cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5ICdwYXJhZ3JhcGgnIG9yICdvcmRlcmVkTGlzdCcgbm9kZXMgZXhwbGFpbmluZyB0aGUgZXhhbXBsZSBzdGVwLWJ5LXN0ZXApLgogICAgICAgICAgICAgICAgNS4gICJTdW1tYXJ5IjogKFJlcXVpcmVkKSBBIGNvbmNpc2UgcmVjYXAgb2YgdGhlIGRheSdzIG1haW4gcG9pbnRzIChlLmcuLCBhICdoZWFkaW5nJyBub2RlIHdpdGggbGV2ZWwgMywgZm9sbG93ZWQgYnkgYSAnYnVsbGV0TGlzdCcgbm9kZSkuCiAgICAgICAgICAgICAgICBFbnN1cmUgYWxsIHRleHQgY29udGVudCBpcyB3ZWxsLXdyaXR0ZW4sIGNsZWFyLCBhbmQgZW5nYWdpbmcuCiAgICAgICAgICAgIC0gJ3Jlc291cmNlcycgKGxpc3Qgb2YgZGljdHMsIGVhY2ggd2l0aCAndGl0bGUnIGFuZCAndXJsJykKICAgICAgICAgICAgLSAnZXN0aW1hdGVkX2hvdXJzJyAoZmxvYXQsIG9wdGlvbmFsKQogICAgICAgICAgICAKICAgICAgICAgICAgRm9jdXMgb24gY3JlYXRpbmcgcHJhY3RpY2FsLCBhY3Rpb25hYmxlIGNvbnRlbnQgZm9yIGVhY2ggZGF5LgogICAgICAgICAgICBFbnN1cmUgdGhlIGN1cnJpY3VsdW0gc3BhbnMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy4KICAgICAgICAgICAgCiAgICAgICAgICAgIENSSVRJQ0FMIElOU1RSVUNUSU9OUyBGT1IgUkVTT1VSQ0VTOgogICAgICAgICAgICAxLiBUaGUgU3VwcG9ydGluZyBSZXNlYXJjaCBzZWN0aW9uIHdpbGwgY29udGFpbiBZb3VUdWJlIHZpZGVvcyB3aXRoIGlkZW50aWZpZXJzIGxpa2UgW1lUMV0sIFtZVDJdLCBldGMuCiAgICAgICAgICAgIDIuIFlvdSBNVVNUIHVzZSB0aGVzZSBpZGVudGlmaWVycyBpbiB0aGUgJ3VybCcgZmllbGQgd2hlbiBhZGRpbmcgWW91VHViZSB2aWRlb3MgdG8gcmVzb3VyY2VzCiAgICAgICAgICAgIDMuIEZvciBleGFtcGxlOiB7InRpdGxlIjogIkludHJvZHVjdGlvbiB0byBSZWFjdCBIb29rcyIsICJ1cmwiOiAiW1lUM10ifQogICAgICAgICAgICA0LiBBbHNvIGluY2x1ZGUgbm9uLVlvdVR1YmUgcmVzb3VyY2VzIChhcnRpY2xlcywgZG9jdW1lbnRhdGlvbikgd2l0aCB0aGVpciBmdWxsIFVSTHMKICAgICAgICAgICAgNS4gRWFjaCBkYXkgc2hvdWxkIGhhdmUgMi00IHJlbGV2YW50IHJlc291cmNlcyBtaXhpbmcgWW91VHViZSB2aWRlb3MgYW5kIG90aGVyIHNvdXJjZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIFdoZW4gZ2VuZXJhdGluZyB0aGUgJ2NvbnRlbnQnIGZvciBlYWNoIGRheSwgdXRpbGl6ZSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSBhbG9uZyB3aXRoIHRoZXNlIHByZWZlcmVuY2VzKSB0byBtYWtlIHRoZSBleHBsYW5hdGlvbnMgYW5kIGNvbmNlcHRzIGFzIGRldGFpbGVkIGFuZCBhY2N1cmF0ZSBhcyBwb3NzaWJsZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIElNUE9SVEFOVDogSWYgbnVtX3Byb2plY3RzIGlzIGdyZWF0ZXIgdGhhbiAwLCBkaXN0cmlidXRlIHRoZSBwcm9qZWN0cyBldmVubHkgdGhyb3VnaG91dCB0aGUgY3VycmljdWx1bS4gRm9yIGV4YW1wbGU6CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTEgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHRoZSBwcm9qZWN0IGFyb3VuZCBkYXkgMjAtMjUKICAgICAgICAgICAgLSBJZiBudW1fcHJvamVjdHM9MiBhbmQgZHVyYXRpb249MzAgZGF5cywgcGxhY2UgcHJvamVjdHMgYXJvdW5kIGRheSAxMC0xMiBhbmQgZGF5IDIyLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTMgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgOC0xMCwgZGF5IDE2LTE4LCBhbmQgZGF5IDI0LTI2CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3IgcHJvamVjdCBkYXlzOgogICAgICAgICAgICAtIFNldCAnaXNfcHJvamVjdF9kYXknIHRvIHRydWUKICAgICAgICAgICAgLSBJbmNsdWRlIGEgJ3Byb2plY3RfZGF0YScgb2JqZWN0IHdpdGggY29tcHJlaGVuc2l2ZSBwcm9qZWN0IGRldGFpbHMKICAgICAgICAgICAgLSBUaGUgcHJvamVjdCBzaG91bGQgaW50ZWdyYXRlIGFuZCBhcHBseSBjb25jZXB0cyBsZWFybmVkIGluIHRoZSBwcmVjZWRpbmcgZGF5cwogICAgICAgICAgICAtIFByb2plY3RzIHNob3VsZCBiZSBwcmFjdGljYWwsIGhhbmRzLW9uIGFjdGl2aXRpZXMgdGhhdCByZWluZm9yY2UgbGVhcm5pbmcKICAgICAgICAgICAgLSBQcm9qZWN0IHRpdGxlcyBzaG91bGQgYmUgZGVzY3JpcHRpdmUgYnV0IG5vdCBvdmVybHkgcGxheWZ1bCAoZS5nLiwgIkJ1aWxkIGEgV2VhdGhlciBEYXRhIEFuYWx5emVyIiBub3QgIldlYXRoZXIgV2l6YXJkIDMwMDAiKQogICAgICAgICAgICDSBwkJwQkBhyohjO8%3D"
        },
        {
          "title": "Principles of Electrical Stimulation of the Nervous System",
          "url": "https://www.frontiersin.org/articles/10.3389/fnins.2018.00557/full"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 21,
      "title": "Review and Project Preparation",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This week, we've bridged the gap between biology and data science. We've learned the language of neurons (spikes, bursts), how to record this language using an MEA system, how to visualize it with raster plots, and how to talk back with electrical stimulation. Today, we'll review these electrophysiology fundamentals to prepare for tomorrow's data analysis project."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Trace the journey of a neural signal from action potential to a tick on a raster plot."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain the relationship between spontaneous activity, network bursts, and stimulation."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify the key parameters for both recording and stimulating a neuronal network."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "The Electrophysiology Loop"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Let's synthesize this week's topics into a cohesive loop:"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Record Baseline:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Capture the network's intrinsic, spontaneous dynamics. This is your 'before' picture."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Analyze Baseline:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Generate raster plots and calculate metrics (firing rates, burst properties) to characterize the network's default state."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Stimulate:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Apply a defined electrical pulse to one or more electrodes to perturb the system."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Record Response:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Capture how the network's activity changes in response to the stimulation."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Analyze Response:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Compare the post-stimulation activity to the baseline. Did the firing rate change? Did the network burst pattern shift? This comparison is the essence of probing the network."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Electrophysiology on an MEA is a cycle of recording, analyzing, and stimulating."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understanding the fundamental units of activity (spikes, bursts) and analysis tools (raster plots) is essential."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "This foundation allows us to design experiments that can probe and even modify network function."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Review: All materials from Day 16-20",
          "url": "#"
        },
        {
          "title": "Introduction to MEA Recording and Analysis - Axion BioSystems",
          "url": "https://www.axionbiosystems.com/sites/default/files/2021-02/an-001-an-introduction-to-mea-recording-and-analysis.pdf"
        },
        {
          "title": "Lab-Grown Brain Learns Pong - Is This Biological Neural Network 'Sentient'?",
          "url": "https://youtube.com/shorts/lG83gePtgV8"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 22,
      "title": "Project 3: Analyzing Spontaneous MEA Data",
      "is_project_day": true,
      "project_data": {
        "title": "Characterizing a Spontaneous Network Recording",
        "description": "In this project, you will be provided with a sample MEA dataset (a file containing spike times and corresponding electrode IDs). Your task is to perform a basic analysis of this data using a programming language like Python or MATLAB, or even spreadsheet software for simpler metrics. You will visualize the data and calculate key metrics to characterize the network's behavior.",
        "objectives": [
          "Load and parse MEA spike data.",
          "Generate a publication-quality raster plot of the network activity.",
          "Calculate the mean firing rate for each active electrode.",
          "Identify and quantify network bursts based on a given definition (e.g., >10 electrodes firing within a 100ms window).",
          "Summarize your findings in a brief report."
        ],
        "requirements": [
          "A sample MEA dataset (e.g., a .csv file with two columns: 'timestamp', 'electrode_id').",
          "Access to data analysis software (Python with libraries like Matplotlib/Numpy, MATLAB, or Excel/Google Sheets).",
          "Knowledge of the concepts from Days 16-21."
        ],
        "deliverables": [
          "A report document containing: 1. The generated raster plot. 2. A table or bar chart of the mean firing rates per electrode. 3. The total number of network bursts detected and their average frequency (bursts/minute). 4. A short written summary interpreting these results (e.g., 'The network exhibits robust, synchronous activity, characterized by network bursts occurring approximately every 10 seconds...')."
        ],
        "evaluation_criteria": [
          "Correctness of the raster plot visualization.",
          "Accuracy of the calculated metrics (firing rate, burst count).",
          "Clarity and professionalism of the final report.",
          "Demonstrated ability to translate raw spike data into meaningful biological insights."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Day: Data Analysis"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today, you'll get hands-on with real (or simulated) data. This project moves beyond theory and into the practical skills of a computational neuroscientist. You will take a raw list of spike times and transform it into visualizations and metrics that tell a story about the neural network's behavior. This is a crucial skill for interpreting any MEA experiment."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Brief"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Refer to the 'project_data' for the full description, objectives, and deliverables. You will be provided with a link to a sample dataset to download and analyze."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Guidance and Tips"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Start with the Raster Plot:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " This is the best way to get an initial 'feel' for the data. It will immediately show you if the activity is sparse, dense, random, or organized into bursts."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Break Down the Problem:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Don't try to do everything at once. First, just load the data. Then, figure out how to plot it. Then, calculate the firing rates. Finally, tackle the burst detection logic."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Code Examples:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " The resources include links to tutorials on how to create raster plots and analyze spike trains in Python. Use these as a starting point."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This project provides a tangible experience in MEA data analysis, solidifying the concepts of the past week and preparing you for the more complex task of analyzing 'training' experiments."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Sample MEA Spike Data (.csv file)",
          "url": "https://raw.githubusercontent.com/spikeinterface/spikeinterface/master/spikeinterface/extractors/tests/data/mearec/mearec_test_10s.csv"
        },
        {
          "title": "Neural Spike Train Analysis in Python - Tutorial",
          "url": "https://praneethnamburi.com/2020/07/11/neural-spike-train-analysis/"
        },
        {
          "title": "Creating a Raster Plot in Matplotlib",
          "url": "https://matplotlib.org/stable/gallery/lines_bars_and_markers/eventplot_demo.html"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 23,
      "title": "Principles of Hebbian Learning and Closed-Loop Systems",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "How can a collection of neurons in a dish 'learn'? The answer lies in the principles of synaptic plasticity. Today, we'll introduce the famous Hebbian theory ('neurons that fire together, wire together') and the concept of a closed-loop system, where the network's own activity influences the stimulation it receives. This is the theoretical foundation for 'training' our culture."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "State Hebb's rule and its implication for synaptic strength."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Define what a closed-loop system is in the context of MEA experiments."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain how closed-loop feedback can induce learning in a neural network."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Hebbian Learning: 'Fire Together, Wire Together'"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "In 1949, Donald Hebb postulated that when an axon of cell A is near enough to excite cell B and repeatedly or persistently takes part in firing it, some growth process or metabolic change takes place in one or both cells such that A's efficiency, as one of the cells firing B, is increased. In simpler terms: "
              },
              {
                "type": "text",
                "text": "neurons that fire together, wire together.",
                "marks": [
                  {
                    "type": "italic"
                  }
                ]
              },
              {
                "type": "text",
                "text": " This means that the synaptic connection between two neurons is strengthened if they are active at the same time. This is a fundamental mechanism of learning and memory, known as long-term potentiation (LTP)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Open-Loop vs. Closed-Loop Systems"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "An "
              },
              {
                "type": "text",
                "text": "open-loop",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " system is one where we apply a pre-programmed pattern of stimulation regardless of what the neurons are doing. A "
              },
              {
                "type": "text",
                "text": "closed-loop",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " system is much more interesting: the system records the neural activity in real-time, analyzes it, and uses that information to decide what stimulation to deliver next, all within milliseconds. The network's output becomes the system's input, creating a feedback loop."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Inducing Learning with Feedback"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "We can leverage Hebbian plasticity using a closed-loop system. Imagine we want the network to perform a 'task,' like producing a specific pattern of activity. We can monitor the network, and whenever it spontaneously produces an activity pattern that is "
              },
              {
                "type": "text",
                "text": "close",
                "marks": [
                  {
                    "type": "italic"
                  }
                ]
              },
              {
                "type": "text",
                "text": " to our target, we immediately provide a 'reward'—a gentle stimulation pulse to a specific set of neurons. This reward stimulation causes those neurons to fire at the same time as the neurons that produced the desired pattern. According to Hebb's rule, this will strengthen the connections that led to the good pattern, making it more likely to occur in the future. Over time, we can 'shape' the network's behavior."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Hebbian learning posits that correlated activity strengthens synaptic connections."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Closed-loop systems create a feedback loop where neural activity influences subsequent stimulation."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "By providing targeted feedback (stimulation) contingent on network behavior, we can guide synaptic plasticity and 'teach' the network."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Hebbian Theory - Scholarpedia",
          "url": "http://www.scholarpedia.org/article/Hebbian_theory"
        },
        {
          "title": "These brain cells can play Pong",
          "url": "https://youtube.com/shorts/4Lhtn4g_ZRY"
        },
        {
          "title": "Closed-Loop Neuroscience and Neuroengineering",
          "url": "https://www.frontiersin.org/research-topics/5042/closed-loop-neuroscience-and-neuroengineering"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 24,
      "title": "Designing a Stimulation Protocol for Training (e.g., 'DishBrain')",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Let's get concrete. How would you actually teach a dish of neurons to play a game like Pong? Today, we'll break down the design of a closed-loop training protocol, using the famous 'DishBrain' experiment as our case study. We'll discuss how to encode information, define a 'correct' response, and deliver feedback."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Describe how to encode sensory information (like a Pong ball's position) into electrical stimulation."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain how to interpret the network's output (firing patterns) as a behavioral response (moving a paddle)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Differentiate between predictable (informative) and unpredictable (reward/punishment) feedback."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Step 1: Encoding Sensory Input"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The neurons have no eyes. We must provide them with information about the game world. In the DishBrain experiment, the position of the Pong ball was encoded by stimulating specific electrodes. For example, electrodes on the left side of the MEA were stimulated if the ball was on the left, and electrodes on the right were stimulated if it was on the right. The frequency of stimulation could encode the ball's distance from the paddle. This provides the network with a continuous stream of 'sensory' data."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Step 2: Decoding Motor Output"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The network's response must be interpreted as an action. This was done by assigning 'motor' functions to different regions of the culture. The system monitored the average firing rate of neurons on the left vs. the right side of the dish. If the firing rate on the left was higher, the virtual paddle moved left. If the rate on the right was higher, the paddle moved right. The network learns to control the paddle by modulating the spatial pattern of its own activity."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Step 3: Providing Feedback"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This is the crucial learning step. The DishBrain system used feedback based on the Free Energy Principle. A simplified view is: when the neurons successfully hit the ball, they received a "
              },
              {
                "type": "text",
                "text": "predictable",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " stimulation pulse at the location where the ball hit the paddle. This is an informative, low-surprise signal. If they "
              },
              {
                "type": "text",
                "text": "missed",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " the ball, they received an "
              },
              {
                "type": "text",
                "text": "unpredictable",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " (or 'surprising') stimulation pulse—a brief, noisy burst at a random location. The theory is that neural systems inherently work to minimize surprise. By hitting the ball, the network learns to keep its world predictable, thus reinforcing the successful behavior."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Training a neural culture requires a protocol for encoding input, decoding output, and providing feedback."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Information can be encoded spatially (which electrode) and temporally (what frequency)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Feedback that allows the network to make its environment more predictable can drive learning."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "In vitro neurons learn and exhibit sentience when embodied in a simulated game-world (The DishBrain Paper)",
          "url": "https://www.cell.com/neuron/fulltext/S0896-6273(22)00806-6"
        },
        {
          "title": "These brain cells can play Pong",
          "url": "https://youtube.com/shorts/4Lhtn4g_ZRY"
        },
        {
          "title": "Growing Living Rat Neurons To Play... DOOM? | Part 1",
          "url": "https://youtube.com/watch?v=bEXefdbQDjw&pp=ygWjKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIFRpdGxlIChvcHRpb25hbCk6IFJhdCBOZXVyb25zCiAgICAgICAgICAgIERlc2NyaXB0aW9uIChvcHRpb25hbCk6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIERpZmZpY3VsdHk6IGludGVybWVkaWF0ZQogICAgICAgICAgICBUb3RhbCBEdXJhdGlvbiAoZGF5cyk6IDMwCiAgICAgICAgICAgIFByZXJlcXVpc2l0ZXM6IGknbSBhIDJuZCB5ZWFyIGJpb2xvZ3kgbWFqb3IKICAgICAgICAgICAgVGltZSBwZXIgRGF5IChtaW51dGVzKTogMTgwCiAgICAgICAgICAgIExlYXJuaW5nIFN0eWxlOiBiYWxhbmNlZAogICAgICAgICAgICBOdW1iZXIgb2YgUHJvamVjdHM6IDQKICAgICAgICAgICAgCiAgICAgICAgICAgIFRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgd2l0aCBhIG1haW4gJ2N1cnJpY3VsdW1fdGl0bGUnIGFuZCAnY3VycmljdWx1bV9kZXNjcmlwdGlvbicsIAogICAgICAgICAgICBhbmQgYSBsaXN0IG9mICdkYXlzJy4gRWFjaCBkYXkgb2JqZWN0IGluIHRoZSBsaXN0IHNob3VsZCBoYXZlOgogICAgICAgICAgICAtICdkYXlfbnVtYmVyJyAoaW50KQogICAgICAgICAgICAtICd0aXRsZScgKHN0ciwgY29uY2lzZSB0aXRsZSBmb3IgdGhlIGRheSkKICAgICAgICAgICAgLSAnaXNfcHJvamVjdF9kYXknIChib29sLCB0cnVlIGlmIHRoaXMgZGF5IGlzIGEgcHJvamVjdCBkYXksIGZhbHNlIG90aGVyd2lzZSkKICAgICAgICAgICAgLSAncHJvamVjdF9kYXRhJyAoZGljdCwgb3B0aW9uYWwsIG9ubHkgaWYgaXNfcHJvamVjdF9kYXkgaXMgdHJ1ZS4gU2hvdWxkIGNvbnRhaW4gJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ29iamVjdGl2ZXMnLCAncmVxdWlyZW1lbnRzJywgJ2RlbGl2ZXJhYmxlcycsIGFuZCAnZXZhbHVhdGlvbl9jcml0ZXJpYScpCiAgICAgICAgICAgIC0gJ2NvbnRlbnQnIChkaWN0LCBUaXBUYXAvUHJvc2VNaXJyb3IgSlNPTiBvYmplY3QgZm9yIHRoZSBsZWFybmluZyBtb2R1bGUuIFRoaXMgb2JqZWN0IE1VU1QgaGF2ZSBhIHJvb3QgJ3R5cGUnOiAnZG9jJyBhbmQgYSAnY29udGVudCcgYXJyYXkuIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnRhaW4gYSBzZXF1ZW5jZSBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIGRheSdzIGxlc3Nvbi4gU3RydWN0dXJlIGVhY2ggZGF5J3MgbGVzc29uIGNvbnRlbnQgd2l0aCB0aGUgZm9sbG93aW5nIHNlY3Rpb25zLCB1c2luZyBhcHByb3ByaWF0ZSBUaXBUYXAvUHJvc2VNaXJyb3Igbm9kZXMgKGxpa2UgJ2hlYWRpbmcnIHdpdGggbGV2ZWxzIDEtMywgJ3BhcmFncmFwaCcsICdidWxsZXRMaXN0JywgJ29yZGVyZWRMaXN0JywgJ2xpc3RJdGVtJywgJ2NvZGVCbG9jaycgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCAndGV4dCcgbm9kZXMgd2l0aCBtYXJrcyBmb3IgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnKToKICAgICAgICAgICAgICAgIDEuICAiSW50cm9kdWN0aW9uIjogKFJlcXVpcmVkKSBBIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBkYXkncyB0b3BpYyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDIsIGZvbGxvd2VkIGJ5IG9uZSBvciB0d28gJ3BhcmFncmFwaCcgbm9kZXMpLgogICAgICAgICAgICAgICAgMi4gICJMZWFybmluZyBPYmplY3RpdmVzIjogKFJlcXVpcmVkKSAyLTQgY2xlYXIsIGFjdGlvbmFibGUgb2JqZWN0aXZlcyBmb3IgdGhlIGRheSAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUsIHdoZXJlIGVhY2ggJ2xpc3RJdGVtJyBjb250YWlucyBhICdwYXJhZ3JhcGgnIHdpdGggdGhlIG9iamVjdGl2ZSkuCiAgICAgICAgICAgICAgICAzLiAgIktleSBDb25jZXB0cyI6IChSZXF1aXJlZCkgRGV0YWlsZWQgZXhwbGFuYXRpb25zIG9mIHRoZSBjb3JlIGNvbmNlcHRzIGZvciB0aGUgZGF5LiBUaGlzIHNob3VsZCBiZSB0aGUgbW9zdCBzdWJzdGFudGlhbCBwYXJ0LiBVc2UgbXVsdGlwbGUgJ2hlYWRpbmcnIG5vZGVzIChsZXZlbCAzKSBmb3Igc3ViLXRvcGljcyBpZiBuZWVkZWQsIGZvbGxvd2VkIGJ5IGRldGFpbGVkICdwYXJhZ3JhcGgnIG5vZGVzLiBJbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSAnU3VwcG9ydGluZyBSZXNlYXJjaCcgKHdoaWNoIHdpbGwgYmUgcHJvdmlkZWQgdG8geW91KSB0byBtYWtlIHRoZXNlIGV4cGxhbmF0aW9ucyBjb21wcmVoZW5zaXZlLiBJZiBjb2RlIGV4YW1wbGVzIG9yIG1hdGhlbWF0aWNhbCBmb3JtdWxhcyBhcmUgcmVsZXZhbnQgYW5kIGZvdW5kIGluIHJlc2VhcmNoLCByZXByZXNlbnQgdGhlbSBhY2N1cmF0ZWx5LCBwZXJoYXBzIHdpdGhpbiAncGFyYWdyYXBoJyBub2RlcyBvciB1c2luZyAnY29kZUJsb2NrJyBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgICAgIDQuICAiRXhhbXBsZXMiOiAoT3B0aW9uYWwsIGJ1dCBoaWdobHkgZW5jb3VyYWdlZCkgMS0yIHdvcmtlZCBleGFtcGxlcyBvciBpbGx1c3RyYXRpdmUgc2NlbmFyaW9zIHJlbGF0ZWQgdG8gdGhlIGtleSBjb25jZXB0cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5ICdwYXJhZ3JhcGgnIG9yICdvcmRlcmVkTGlzdCcgbm9kZXMgZXhwbGFpbmluZyB0aGUgZXhhbXBsZSBzdGVwLWJ5LXN0ZXApLgogICAgICAgICAgICAgICAgNS4gICJTdW1tYXJ5IjogKFJlcXVpcmVkKSBBIGNvbmNpc2UgcmVjYXAgb2YgdGhlIGRheSdzIG1haW4gcG9pbnRzIChlLmcuLCBhICdoZWFkaW5nJyBub2RlIHdpdGggbGV2ZWwgMywgZm9sbG93ZWQgYnkgYSAnYnVsbGV0TGlzdCcgbm9kZSkuCiAgICAgICAgICAgICAgICBFbnN1cmUgYWxsIHRleHQgY29udGVudCBpcyB3ZWxsLXdyaXR0ZW4sIGNsZWFyLCBhbmQgZW5nYWdpbmcuCiAgICAgICAgICAgIC0gJ3Jlc291cmNlcycgKGxpc3Qgb2YgZGljdHMsIGVhY2ggd2l0aCAndGl0bGUnIGFuZCAndXJsJykKICAgICAgICAgICAgLSAnZXN0aW1hdGVkX2hvdXJzJyAoZmxvYXQsIG9wdGlvbmFsKQogICAgICAgICAgICAKICAgICAgICAgICAgRm9jdXMgb24gY3JlYXRpbmcgcHJhY3RpY2FsLCBhY3Rpb25hYmxlIGNvbnRlbnQgZm9yIGVhY2ggZGF5LgogICAgICAgICAgICBFbnN1cmUgdGhlIGN1cnJpY3VsdW0gc3BhbnMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy4KICAgICAgICAgICAgCiAgICAgICAgICAgIENSSVRJQ0FMIElOU1RSVUNUSU9OUyBGT1IgUkVTT1VSQ0VTOgogICAgICAgICAgICAxLiBUaGUgU3VwcG9ydGluZyBSZXNlYXJjaCBzZWN0aW9uIHdpbGwgY29udGFpbiBZb3VUdWJlIHZpZGVvcyB3aXRoIGlkZW50aWZpZXJzIGxpa2UgW1lUMV0sIFtZVDJdLCBldGMuCiAgICAgICAgICAgIDIuIFlvdSBNVVNUIHVzZSB0aGVzZSBpZGVudGlmaWVycyBpbiB0aGUgJ3VybCcgZmllbGQgd2hlbiBhZGRpbmcgWW91VHViZSB2aWRlb3MgdG8gcmVzb3VyY2VzCiAgICAgICAgICAgIDMuIEZvciBleGFtcGxlOiB7InRpdGxlIjogIkludHJvZHVjdGlvbiB0byBSZWFjdCBIb29rcyIsICJ1cmwiOiAiW1lUM10ifQogICAgICAgICAgICA0LiBBbHNvIGluY2x1ZGUgbm9uLVlvdVR1YmUgcmVzb3VyY2VzIChhcnRpY2xlcywgZG9jdW1lbnRhdGlvbikgd2l0aCB0aGVpciBmdWxsIFVSTHMKICAgICAgICAgICAgNS4gRWFjaCBkYXkgc2hvdWxkIGhhdmUgMi00IHJlbGV2YW50IHJlc291cmNlcyBtaXhpbmcgWW91VHViZSB2aWRlb3MgYW5kIG90aGVyIHNvdXJjZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIFdoZW4gZ2VuZXJhdGluZyB0aGUgJ2NvbnRlbnQnIGZvciBlYWNoIGRheSwgdXRpbGl6ZSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSBhbG9uZyB3aXRoIHRoZXNlIHByZWZlcmVuY2VzKSB0byBtYWtlIHRoZSBleHBsYW5hdGlvbnMgYW5kIGNvbmNlcHRzIGFzIGRldGFpbGVkIGFuZCBhY2N1cmF0ZSBhcyBwb3NzaWJsZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIElNUE9SVEFOVDogSWYgbnVtX3Byb2plY3RzIGlzIGdyZWF0ZXIgdGhhbiAwLCBkaXN0cmlidXRlIHRoZSBwcm9qZWN0cyBldmVubHkgdGhyb3VnaG91dCB0aGUgY3VycmljdWx1bS4gRm9yIGV4YW1wbGU6CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTEgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHRoZSBwcm9qZWN0IGFyb3VuZCBkYXkgMjAtMjUKICAgICAgICAgICAgLSBJZiBudW1fcHJvamVjdHM9MiBhbmQgZHVyYXRpb249MzAgZGF5cywgcGxhY2UgcHJvamVjdHMgYXJvdW5kIGRheSAxMC0xMiBhbmQgZGF5IDIyLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTMgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgOC0xMCwgZGF5IDE2LTE4LCBhbmQgZGF5IDI0LTI2CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3IgcHJvamVjdCBkYXlzOgogICAgICAgICAgICAtIFNldCAnaXNfcHJvamVjdF9kYXknIHRvIHRydWUKICAgICAgICAgICAgLSBJbmNsdWRlIGEgJ3Byb2plY3RfZGF0YScgb2JqZWN0IHdpdGggY29tcHJlaGVuc2l2ZSBwcm9qZWN0IGRldGFpbHMKICAgICAgICAgICAgLSBUaGUgcHJvamVjdCBzaG91bGQgaW50ZWdyYXRlIGFuZCBhcHBseSBjb25jZXB0cyBsZWFybmVkIGluIHRoZSBwcmVjZWRpbmcgZGF5cwogICAgICAgICAgICAtIFByb2plY3RzIHNob3VsZCBiZSBwcmFjdGljYWwsIGhhbmRzLW9uIGFjdGl2aXRpZXMgdGhhdCByZWluZm9yY2UgbGVhcm5pbmcKICAgICAgICAgICAgLSBQcm9qZWN0IHRpdGxlcyBzaG91bGQgYmUgZGVzY3JpcHRpdmUgYnV0IG5vdCBvdmVybHkgcGxheWZ1bCAoZS5nLiwgIkJ1aWxkIGEgV2VhdGhlciBEYXRhIEFuYWx5emVyIiBub3QgIldlYXRoZXIgV2l6YXJkIDMwMDAiKQogICAgICAgICAgICDSBwkJwQkBhyohjO8%3D"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 25,
      "title": "Implementing a Simple Closed-Loop System",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "We've covered the theory and design; now let's look at the implementation. How do you physically and computationally connect the MEA system to a simulation like Pong? Today, we'll explore the software and hardware architecture needed to create a real-time, closed-loop system, focusing on the data flow and timing challenges."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Draw a block diagram of a closed-loop MEA system."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain the role of an API in connecting the MEA software to an external program."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the importance of low-latency processing for effective feedback."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "System Architecture"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A typical closed-loop system consists of three main software components running in parallel:"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The MEA Acquisition Software:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " This is the proprietary software from the MEA manufacturer (e.g., Axion's Axis). It directly controls the hardware, records the raw data, and detects spikes."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The Simulation Environment:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " This is the program running the 'game' or task (e.g., a Pong game written in Python with Pygame). It needs to send sensory information and receive motor commands."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The 'Brain' Interface (Middleware):",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " This is a custom script that acts as the translator. It reads data from the MEA software, decodes it into a motor command for the simulation, gets the new game state from the simulation, encodes it into a stimulation command, and sends that command back to the MEA software."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "The Role of the API"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This communication is made possible by an "
              },
              {
                "type": "text",
                "text": "Application Programming Interface (API)",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": ". Most MEA manufacturers provide an API (e.g., a Python or C++ library) that allows external programs to programmatically access the data stream and trigger stimulation in real-time. The middleware script uses this API to 'talk' to the MEA system."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "The Need for Speed: Latency"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "For Hebbian learning to work, the feedback (stimulation) must occur very close in time to the activity that triggered it. The total time it takes for a signal to go from the neuron, through the hardware, through all three software components, and back to the neuron as stimulation is called the "
              },
              {
                "type": "text",
                "text": "loop latency",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": ". Keeping this latency as low as possible (ideally under 10-20 milliseconds) is a major technical challenge and is critical for the success of the experiment."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A closed-loop system requires at least three software components: acquisition, simulation, and middleware."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "An API allows the custom middleware to communicate with the MEA system."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Minimizing loop latency is critical for effective, biologically-relevant feedback."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Axion BioSystems SDK for custom analysis and closed-loop",
          "url": "https://www.axionbiosystems.com/products/software/axion-sdk"
        },
        {
          "title": "Real-time Closed-Loop Systems - Multi Channel Systems",
          "url": "https://www.multichannelsystems.com/applications/real-time-closed-loop"
        },
        {
          "title": "Lab-Grown Brain Learns Pong - Is This Biological Neural Network 'Sentient'?",
          "url": "https://youtube.com/shorts/lG83gePtgV8"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 26,
      "title": "Interpreting 'Learning': Changes in Network Activity",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "We've run our training protocol for several hours. The Pong score improved. But did the network actually *learn* anything? To answer this, we need to go beyond game scores and look for changes in the neural activity itself. Today, we'll discuss the analytical methods used to demonstrate that learning has occurred at the network level."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Compare pre-training and post-training neural activity to identify changes."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Define 'information transfer' and how it can be used as a metric for learning."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain how changes in network synchrony or complexity can indicate plasticity."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Beyond Performance Metrics"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "An improved Pong score is suggestive, but not proof, of learning. The improvement could be due to random chance or simple, non-learning-based changes in firing rates. True evidence comes from showing that the network's "
              },
              {
                "type": "text",
                "text": "internal dynamics",
                "marks": [
                  {
                    "type": "italic"
                  }
                ]
              },
              {
                "type": "text",
                "text": " have reorganized in a meaningful way."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Measuring Information Transfer"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "One powerful technique is to measure the mutual information between the sensory input and the neural response. In the context of Pong, we can ask: 'How much information does the activity of the 'motor' neurons give me about the position of the ball (the 'sensory' stimulation)?' If the network has learned, this information transfer should increase over the course of training. The network's response becomes more reliably predictive of the stimulus."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Changes in Network State"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Learning should also change the overall 'shape' of the network's activity. We can look for changes in several properties by comparing data from before and after training:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Bursting Properties:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Does the frequency or duration of network bursts change?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Synchrony:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Does the degree to which neurons fire together increase or decrease?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Complexity/Entropy:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Does the repertoire of activity patterns become richer and more varied, or more stereotyped and efficient? The DishBrain paper found that learning was associated with an increase in the predictability of responses."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "To demonstrate learning, we must analyze changes in the neural activity itself, not just performance."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "An increase in information transfer between stimulus and response is a strong indicator of learning."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Changes in global network properties like bursting, synchrony, and complexity can also provide evidence of plasticity."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "In vitro neurons learn and exhibit sentience when embodied in a simulated game-world (The DishBrain Paper)",
          "url": "https://www.cell.com/neuron/fulltext/S0896-6273(22)00806-6"
        },
        {
          "title": "What your brain cells look like when you learn something NEW",
          "url": "https://youtube.com/shorts/ztPKM0nryY8"
        },
        {
          "title": "Information Theory in Neuroscience",
          "url": "https://www.nature.com/articles/nrn2124"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 27,
      "title": "Advanced Topics: Optogenetics, Chemical Stimulation, Human Neurons",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Electrical stimulation is a powerful but blunt tool. Today, we'll briefly explore more advanced and specific methods for interacting with neural cultures. We will touch upon optogenetics for cell-type-specific control, chemical stimulation for mimicking neurotransmitters, and the exciting but ethically complex frontier of using human-derived neurons."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Describe the basic principle of optogenetics."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Provide an example of how chemical stimulation could be used with an MEA."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Discuss the potential and ethical considerations of using human neurons in these experiments."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Optogenetics: Control with Light"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Optogenetics involves genetically modifying specific neurons to express light-sensitive ion channels (opsins). For example, expressing Channelrhodopsin-2 allows you to activate neurons by shining blue light on them. This provides incredible specificity, as you can control only the genetically-tagged cells (e.g., only excitatory neurons) without affecting their neighbors. MEA systems with integrated light-delivery capabilities (like LEDs for each electrode) make this possible."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Chemical Stimulation"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "We can also probe the network by adding drugs or neurotransmitters directly to the culture medium while recording on the MEA. For example, one could add a GABA receptor antagonist like bicuculline to block inhibitory neurotransmission and observe how the network's activity pattern changes, often leading to more frequent and intense network bursts. This allows for testing pharmacological hypotheses in a high-throughput way."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "The Human Element: iPSC-Derived Neurons"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Instead of using rat neurons, it is now possible to take human skin or blood cells, reprogram them into induced Pluripotent Stem Cells (iPSCs), and then differentiate those iPSCs into human neurons. Culturing these human neurons on an MEA opens up incredible possibilities for modeling human neurological diseases (like Alzheimer's or epilepsy) and testing drugs on a human-relevant platform. However, it also raises profound ethical questions about the moral status of these cultures, especially as they become more complex or are integrated with animal brains, blurring the lines between human and non-human."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type":="text",
                        "text": "Optogenetics offers highly specific control over neural activity using light."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Chemical stimulation allows for testing the effects of drugs and neurotransmitters on network function."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Using iPSC-derived human neurons is a powerful but ethically challenging frontier in neuroscience."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Optogenetics: Controlling the Brain with Light",
          "url": "https://www.youtube.com/watch?v=883y-g0a_b0"
        },
        {
          "title": "Human neurons implanted into brains of rats with damaged cortices",
          "url": "https://youtube.com/shorts/3ji-9cfus4E"
        },
        {
          "title": "Scientists Gave Human Brain Cells to a Rat. Why?",
          "url": "https://youtube.com/watch?v=a7waWv0uWG0&pp=ygWjKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIFRpdGxlIChvcHRpb25hbCk6IFJhdCBOZXVyb25zCiAgICAgICAgICAgIERlc2NyaXB0aW9uIChvcHRpb25hbCk6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIERpZmZpY3VsdHk6IGludGVybWVkaWF0ZQogICAgICAgICAgICBUb3RhbCBEdXJhdGlvbiAoZGF5cyk6IDMwCiAgICAgICAgICAgIFByZXJlcXVpc2l0ZXM6IGknbSBhIDJuZCB5ZWFyIGJpb2xvZ3kgbWFqb3IKICAgICAgICAgICAgVGltZSBwZXIgRGF5IChtaW51dGVzKTogMTgwCiAgICAgICAgICAgIExlYXJuaW5nIFN0eWxlOiBiYWxhbmNlZAogICAgICAgICAgICBOdW1iZXIgb2YgUHJvamVjdHM6IDQKICAgICAgICAgICAgCiAgICAgICAgICAgIFRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgd2l0aCBhIG1haW4gJ2N1cnJpY3VsdW1fdGl0bGUnIGFuZCAnY3VycmljdWx1bV9kZXNjcmlwdGlvbicsIAogICAgICAgICAgICBhbmQgYSBsaXN0IG9mICdkYXlzJy4gRWFjaCBkYXkgb2JqZWN0IGluIHRoZSBsaXN0IHNob3VsZCBoYXZlOgogICAgICAgICAgICAtICdkYXlfbnVtYmVyJyAoaW50KQogICAgICAgICAgICAtICd0aXRsZScgKHN0ciwgY29uY2lzZSB0aXRsZSBmb3IgdGhlIGRheSkKICAgICAgICAgICAgLSAnaXNfcHJvamVjdF9kYXknIChib29sLCB0cnVlIGlmIHRoaXMgZGF5IGlzIGEgcHJvamVjdCBkYXksIGZhbHNlIG90aGVyd2lzZSkKICAgICAgICAgICAgLSAncHJvamVjdF9kYXRhJyAoZGljdCwgb3B0aW9uYWwsIG9ubHkgaWYgaXNfcHJvamVjdF9kYXkgaXMgdHJ1ZS4gU2hvdWxkIGNvbnRhaW4gJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ29iamVjdGl2ZXMnLCAncmVxdWlyZW1lbnRzJywgJ2RlbGl2ZXJhYmxlcycsIGFuZCAnZXZhbHVhdGlvbl9jcml0ZXJpYScpCiAgICAgICAgICAgIC0gJ2NvbnRlbnQnIChkaWN0LCBUaXBUYXAvUHJvc2VNaXJyb3IgSlNPTiBvYmplY3QgZm9yIHRoZSBsZWFybmluZyBtb2R1bGUuIFRoaXMgb2JqZWN0IE1VU1QgaGF2ZSBhIHJvb3QgJ3R5cGUnOiAnZG9jJyBhbmQgYSAnY29udGVudCcgYXJyYXkuIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnRhaW4gYSBzZXF1ZW5jZSBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIGRheSdzIGxlc3Nvbi4gU3RydWN0dXJlIGVhY2ggZGF5J3MgbGVzc29uIGNvbnRlbnQgd2l0aCB0aGUgZm9sbG93aW5nIHNlY3Rpb25zLCB1c2luZyBhcHByb3ByaWF0ZSBUaXBUYXAvUHJvc2VNaXJyb3Igbm9kZXMgKGxpa2UgJ2hlYWRpbmcnIHdpdGggbGV2ZWxzIDEtMywgJ3BhcmFncmFwaCcsICdidWxsZXRMaXN0JywgJ29yZGVyZWRMaXN0JywgJ2xpc3RJdGVtJywgJ2NvZGVCbG9jaycgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCAndGV4dCcgbm9kZXMgd2l0aCBtYXJrcyBmb3IgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnKToKICAgICAgICAgICAgICAgIDEuICAiSW50cm9kdWN0aW9uIjogKFJlcXVpcmVkKSBBIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBkYXkncyB0b3BpYyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDIsIGZvbGxvd2VkIGJ5IG9uZSBvciB0d28gJ3BhcmFncmFwaCcgbm9kZXMpLgogICAgICAgICAgICAgICAgMi4gICJMZWFybmluZyBPYmplY3RpdmVzIjogKFJlcXVpcmVkKSAyLTQgY2xlYXIsIGFjdGlvbmFibGUgb2JqZWN0aXZlcyBmb3IgdGhlIGRheSAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUsIHdoZXJlIGVhY2ggJ2xpc3RJdGVtJyBjb250YWlucyBhICdwYXJhZ3JhcGgnIHdpdGggdGhlIG9iamVjdGl2ZSkuCiAgICAgICAgICAgICAgICAzLiAgIktleSBDb25jZXB0cyI6IChSZXF1aXJlZCkgRGV0YWlsZWQgZXhwbGFuYXRpb25zIG9mIHRoZSBjb3JlIGNvbmNlcHRzIGZvciB0aGUgZGF5LiBUaGlzIHNob3VsZCBiZSB0aGUgbW9zdCBzdWJzdGFudGlhbCBwYXJ0LiBVc2UgbXVsdGlwbGUgJ2hlYWRpbmcnIG5vZGVzIChsZXZlbCAzKSBmb3Igc3ViLXRvcGljcyBpZiBuZWVkZWQsIGZvbGxvd2VkIGJ5IGRldGFpbGVkICdwYXJhZ3JhcGgnIG5vZGVzLiBJbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSAnU3VwcG9ydGluZyBSZXNlYXJjaCcgKHdoaWNoIHdpbGwgYmUgcHJvdmlkZWQgdG8geW91KSB0byBtYWtlIHRoZXNlIGV4cGxhbmF0aW9ucyBjb21wcmVoZW5zaXZlLiBJZiBjb2RlIGV4YW1wbGVzIG9yIG1hdGhlbWF0aWNhbCBmb3JtdWxhcyBhcmUgcmVsZXZhbnQgYW5kIGZvdW5kIGluIHJlc2VhcmNoLCByZXByZXNlbnQgdGhlbSBhY2N1cmF0ZWx5LCBwZXJoYXBzIHdpdGhpbiAncGFyYWdyYXBoJyBub2RlcyBvciB1c2luZyAnY29kZUJsb2NrJyBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgICAgIDQuICAiRXhhbXBsZXMiOiAoT3B0aW9uYWwsIGJ1dCBoaWdobHkgZW5jb3VyYWdlZCkgMS0yIHdvcmtlZCBleGFtcGxlcyBvciBpbGx1c3RyYXRpdmUgc2NlbmFyaW9zIHJlbGF0ZWQgdG8gdGhlIGtleSBjb25jZXB0cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5ICdwYXJhZ3JhcGgnIG9yICdvcmRlcmVkTGlzdCcgbm9kZXMgZXhwbGFpbmluZyB0aGUgZXhhbXBsZSBzdGVwLWJ5LXN0ZXApLgogICAgICAgICAgICAgICAgNS4gICJTdW1tYXJ5IjogKFJlcXVpcmVkKSBBIGNvbmNpc2UgcmVjYXAgb2YgdGhlIGRheSdzIG1haW4gcG9pbnRzIChlLmcuLCBhICdoZWFkaW5nJyBub2RlIHdpdGggbGV2ZWwgMywgZm9sbG93ZWQgYnkgYSAnYnVsbGV0TGlzdCcgbm9kZSkuCiAgICAgICAgICAgICAgICBFbnN1cmUgYWxsIHRleHQgY29udGVudCBpcyB3ZWxsLXdyaXR0ZW4sIGNsZWFyLCBhbmQgZW5nYWdpbmcuCiAgICAgICAgICAgIC0gJ3Jlc291cmNlcycgKGxpc3Qgb2YgZGljdHMsIGVhY2ggd2l0aCAndGl0bGUnIGFuZCAndXJsJykKICAgICAgICAgICAgLSAnZXN0aW1hdGVkX2hvdXJzJyAoZmxvYXQsIG9wdGlvbmFsKQogICAgICAgICAgICAKICAgICAgICAgICAgRm9jdXMgb24gY3JlYXRpbmcgcHJhY3RpY2FsLCBhY3Rpb25hYmxlIGNvbnRlbnQgZm9yIGVhY2ggZGF5LgogICAgICAgICAgICBFbnN1cmUgdGhlIGN1cnJpY3VsdW0gc3BhbnMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy4KICAgICAgICAgICAgCiAgICAgICAgICAgIENSSVRJQ0FMIElOU1RSVUNUSU9OUyBGT1IgUkVTT1VSQ0VTOgogICAgICAgICAgICAxLiBUaGUgU3VwcG9ydGluZyBSZXNlYXJjaCBzZWN0aW9uIHdpbGwgY29udGFpbiBZb3VUdWJlIHZpZGVvcyB3aXRoIGlkZW50aWZpZXJzIGxpa2UgW1lUMV0sIFtZVDJdLCBldGMuCiAgICAgICAgICAgIDIuIFlvdSBNVVNUIHVzZSB0aGVzZSBpZGVudGlmaWVycyBpbiB0aGUgJ3VybCcgZmllbGQgd2hlbiBhZGRpbmcgWW91VHViZSB2aWRlb3MgdG8gcmVzb3VyY2VzCiAgICAgICAgICAgIDMuIEZvciBleGFtcGxlOiB7InRpdGxlIjogIkludHJvZHVjdGlvbiB0byBSZWFjdCBIb29rcyIsICJ1cmwiOiAiW1lUM10ifQogICAgICAgICAgICA0LiBBbHNvIGluY2x1ZGUgbm9uLVlvdVR1YmUgcmVzb3VyY2VzIChhcnRpY2xlcywgZG9jdW1lbnRhdGlvbikgd2l0aCB0aGVpciBmdWxsIFVSTHMKICAgICAgICAgICAgNS4gRWFjaCBkYXkgc2hvdWxkIGhhdmUgMi00IHJlbGV2YW50IHJlc291cmNlcyBtaXhpbmcgWW91VHViZSB2aWRlb3MgYW5kIG90aGVyIHNvdXJjZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIFdoZW4gZ2VuZXJhdGluZyB0aGUgJ2NvbnRlbnQnIGZvciBlYWNoIGRheSwgdXRpbGl6ZSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSBhbG9uZyB3aXRoIHRoZXNlIHByZWZlcmVuY2VzKSB0byBtYWtlIHRoZSBleHBsYW5hdGlvbnMgYW5kIGNvbmNlcHRzIGFzIGRldGFpbGVkIGFuZCBhY2N1cmF0ZSBhcyBwb3NzaWJsZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIElNUE9SVEFOVDogSWYgbnVtX3Byb2plY3RzIGlzIGdyZWF0ZXIgdGhhbiAwLCBkaXN0cmlidXRlIHRoZSBwcm9qZWN0cyBldmVubHkgdGhyb3VnaG91dCB0aGUgY3VycmljdWx1bS4gRm9yIGV4YW1wbGU6CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTEgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHRoZSBwcm9qZWN0IGFyb3VuZCBkYXkgMjAtMjUKICAgICAgICAgICAgLSBJZiBudW1fcHJvamVjdHM9MiBhbmQgZHVyYXRpb249MzAgZGF5cywgcGxhY2UgcHJvamVjdHMgYXJvdW5kIGRheSAxMC0xMiBhbmQgZGF5IDIyLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTMgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgOC0xMCwgZGF5IDE2LTE4LCBhbmQgZGF5IDI0LTI2CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3IgcHJvamVjdCBkYXlzOgogICAgICAgICAgICAtIFNldCAnaXNfcHJvamVjdF9kYXknIHRvIHRydWUKICAgICAgICAgICAgLSBJbmNsdWRlIGEgJ3Byb2plY3RfZGF0YScgb2JqZWN0IHdpdGggY29tcHJlaGVuc2l2ZSBwcm9qZWN0IGRldGFpbHMKICAgICAgICAgICAgLSBUaGUgcHJvamVjdCBzaG91bGQgaW50ZWdyYXRlIGFuZCBhcHBseSBjb25jZXB0cyBsZWFybmVkIGluIHRoZSBwcmVjZWRpbmcgZGF5cwogICAgICAgICAgICAtIFByb2plY3RzIHNob3VsZCBiZSBwcmFjdGljYWwsIGhhbmRzLW9uIGFjdGl2aXRpZXMgdGhhdCByZWluZm9yY2UgbGVhcm5pbmcKICAgICAgICAgICAgLSBQcm9qZWN0IHRpdGxlcyBzaG91bGQgYmUgZGVzY3JpcHRpdmUgYnV0IG5vdCBvdmVybHkgcGxheWZ1bCAoZS5nLiwgIkJ1aWxkIGEgV2VhdGhlciBEYXRhIEFuYWx5emVyIiBub3QgIldlYXRoZXIgV2l6YXJkIDMwMDAiKQogICAgICAgICAgICA%3D"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 28,
      "title": "Review and Final Project Preparation",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This week, we delved into the most exciting part of this field: teaching neurons. We've covered the theory of Hebbian learning, the design of closed-loop protocols like DishBrain, the technical implementation, and how to analyze the results. Today, we consolidate this knowledge in preparation for your final project: designing your own closed-loop training experiment."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Synthesize the concepts of synaptic plasticity, closed-loop feedback, and data analysis."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Articulate the three core components of a training protocol: input encoding, output decoding, and feedback."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Formulate a testable hypothesis for a novel training experiment."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "The Blueprint for a Learning Experiment"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Any closed-loop training experiment you design must answer the following questions:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The Goal: What 'skill' are you trying to teach the network? (e.g., navigate a simple maze, generate a specific rhythm, distinguish between two patterns)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Input Encoding: How will you represent the 'world' to the neurons? (e.g., stimulate left electrodes for 'wall on left', stimulate with high frequency for 'danger')."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Output Decoding: How will you interpret the network's activity as an 'action'? (e.g., higher firing rate in top half means 'move up', a specific burst pattern means 'turn right')."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Feedback Rule: How will you reinforce correct behavior? (e.g., predictable stimulation for correct choices, unpredictable/noisy stimulation for incorrect choices)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Analysis Plan: How will you prove that learning occurred? (e.g., compare pre- vs. post-training performance, measure information transfer, analyze changes in network synchrony)."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Designing a training experiment requires a clear definition of the task, inputs, outputs, and feedback rules."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "This blueprint combines principles of biology, engineering, and data science."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Your final project will challenge you to create your own blueprint for a novel experiment."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Review: All materials from Day 23-27",
          "url": "#"
        },
        {
          "title": "In vitro neurons learn and exhibit sentience when embodied in a simulated game-world (The DishBrain Paper)",
          "url": "https://www.cell.com/neuron/fulltext/S0896-6273(22)00806-6"
        },
        {
          "title": "Growing Living Rat Neurons To Play... DOOM? | Part 1",
          "url": "https://youtube.com/watch?v=bEXefdbQDjw&pp=ygWjKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIFRpdGxlIChvcHRpb25hbCk6IFJhdCBOZXVyb25zCiAgICAgICAgICAgIERlc2NyaXB0aW9uIChvcHRpb25hbCk6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIERpZmZpY3VsdHk6IGludGVybWVkaWF0ZQogICAgICAgICAgICBUb3RhbCBEdXJhdGlvbiAoZGF5cyk6IDMwCiAgICAgICAgICAgIFByZXJlcXVpc2l0ZXM6IGknbSBhIDJuZCB5ZWFyIGJpb2xvZ3kgbWFqb3IKICAgICAgICAgICAgVGltZSBwZXIgRGF5IChtaW51dGVzKTogMTgwCiAgICAgICAgICAgIExlYXJuaW5nIFN0eWxlOiBiYWxhbmNlZAogICAgICAgICAgICBOdW1iZXIgb2YgUHJvamVjdHM6IDQKICAgICAgICAgICAgCiAgICAgICAgICAgIFRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgd2l0aCBhIG1haW4gJ2N1cnJpY3VsdW1fdGl0bGUnIGFuZCAnY3VycmljdWx1bV9kZXNjcmlwdGlvbicsIAogICAgICAgICAgICBhbmQgYSBsaXN0IG9mICdkYXlzJy4gRWFjaCBkYXkgb2JqZWN0IGluIHRoZSBsaXN0IHNob3VsZCBoYXZlOgogICAgICAgICAgICAtICdkYXlfbnVtYmVyJyAoaW50KQogICAgICAgICAgICAtICd0aXRsZScgKHN0ciwgY29uY2lzZSB0aXRsZSBmb3IgdGhlIGRheSkKICAgICAgICAgICAgLSAnaXNfcHJvamVjdF9kYXknIChib29sLCB0cnVlIGlmIHRoaXMgZGF5IGlzIGEgcHJvamVjdCBkYXksIGZhbHNlIG90aGVyd2lzZSkKICAgICAgICAgICAgLSAncHJvamVjdF9kYXRhJyAoZGljdCwgb3B0aW9uYWwsIG9ubHkgaWYgaXNfcHJvamVjdF9kYXkgaXMgdHJ1ZS4gU2hvdWxkIGNvbnRhaW4gJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ29iamVjdGl2ZXMnLCAncmVxdWlyZW1lbnRzJywgJ2RlbGl2ZXJhYmxlcycsIGFuZCAnZXZhbHVhdGlvbl9jcml0ZXJpYScpCiAgICAgICAgICAgIC0gJ2NvbnRlbnQnIChkaWN0LCBUaXBUYXAvUHJvc2VNaXJyb3IgSlNPTiBvYmplY3QgZm9yIHRoZSBsZWFybmluZyBtb2R1bGUuIFRoaXMgb2JqZWN0IE1VU1QgaGF2ZSBhIHJvb3QgJ3R5cGUnOiAnZG9jJyBhbmQgYSAnY29udGVudCcgYXJyYXkuIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnRhaW4gYSBzZXF1ZW5jZSBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIGRheSdzIGxlc3Nvbi4gU3RydWN0dXJlIGVhY2ggZGF5J3MgbGVzc29uIGNvbnRlbnQgd2l0aCB0aGUgZm9sbG93aW5nIHNlY3Rpb25zLCB1c2luZyBhcHByb3ByaWF0ZSBUaXBUYXAvUHJvc2VNaXJyb3Igbm9kZXMgKGxpa2UgJ2hlYWRpbmcnIHdpdGggbGV2ZWxzIDEtMywgJ3BhcmFncmFwaCcsICdidWxsZXRMaXN0JywgJ29yZGVyZWRMaXN0JywgJ2xpc3RJdGVtJywgJ2NvZGVCbG9jaycgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCAndGV4dCcgbm9kZXMgd2l0aCBtYXJrcyBmb3IgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnKToKICAgICAgICAgICAgICAgIDEuICAiSW50cm9kdWN0aW9uIjogKFJlcXVpcmVkKSBBIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBkYXkncyB0b3BpYyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDIsIGZvbGxvd2VkIGJ5IG9uZSBvciB0d28gJ3BhcmFncmFwaCcgbm9kZXMpLgogICAgICAgICAgICAgICAgMi4gICJMZWFybmluZyBPYmplY3RpdmVzIjogKFJlcXVpcmVkKSAyLTQgY2xlYXIsIGFjdGlvbmFibGUgb2JqZWN0aXZlcyBmb3IgdGhlIGRheSAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUsIHdoZXJlIGVhY2ggJ2xpc3RJdGVtJyBjb250YWlucyBhICdwYXJhZ3JhcGgnIHdpdGggdGhlIG9iamVjdGl2ZSkuCiAgICAgICAgICAgICAgICAzLiAgIktleSBDb25jZXB0cyI6IChSZXF1aXJlZCkgRGV0YWlsZWQgZXhwbGFuYXRpb25zIG9mIHRoZSBjb3JlIGNvbmNlcHRzIGZvciB0aGUgZGF5LiBUaGlzIHNob3VsZCBiZSB0aGUgbW9zdCBzdWJzdGFudGlhbCBwYXJ0LiBVc2UgbXVsdGlwbGUgJ2hlYWRpbmcnIG5vZGVzIChsZXZlbCAzKSBmb3Igc3ViLXRvcGljcyBpZiBuZWVkZWQsIGZvbGxvd2VkIGJ5IGRldGFpbGVkICdwYXJhZ3JhcGgnIG5vZGVzLiBJbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSAnU3VwcG9ydGluZyBSZXNlYXJjaCcgKHdoaWNoIHdpbGwgYmUgcHJvdmlkZWQgdG8geW91KSB0byBtYWtlIHRoZXNlIGV4cGxhbmF0aW9ucyBjb21wcmVoZW5zaXZlLiBJZiBjb2RlIGV4YW1wbGVzIG9yIG1hdGhlbWF0aWNhbCBmb3JtdWxhcyBhcmUgcmVsZXZhbnQgYW5kIGZvdW5kIGluIHJlc2VhcmNoLCByZXByZXNlbnQgdGhlbSBhY2N1cmF0ZWx5LCBwZXJoYXBzIHdpdGhpbiAncGFyYWdyYXBoJyBub2RlcyBvciB1c2luZyAnY29kZUJsb2NrJyBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgICAgIDQuICAiRXhhbXBsZXMiOiAoT3B0aW9uYWwsIGJ1dCBoaWdobHkgZW5jb3VyYWdlZCkgMS0yIHdvcmtlZCBleGFtcGxlcyBvciBpbGx1c3RyYXRpdmUgc2NlbmFyaW9zIHJlbGF0ZWQgdG8gdGhlIGtleSBjb25jZXB0cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5ICdwYXJhZ3JhcGgnIG9yICdvcmRlcmVkTGlzdCcgbm9kZXMgZXhwbGFpbmluZyB0aGUgZXhhbXBsZSBzdGVwLWJ5LXN0ZXApLgogICAgICAgICAgICAgICAgNS4gICJTdW1tYXJ5IjogKFJlcXVpcmVkKSBBIGNvbmNpc2UgcmVjYXAgb2YgdGhlIGRheSdzIG1haW4gcG9pbnRzIChlLmcuLCBhICdoZWFkaW5nJyBub2RlIHdpdGggbGV2ZWwgMywgZm9sbG93ZWQgYnkgYSAnYnVsbGV0TGlzdCcgbm9kZSkuCiAgICAgICAgICAgICAgICBFbnN1cmUgYWxsIHRleHQgY29udGVudCBpcyB3ZWxsLXdyaXR0ZW4sIGNsZWFyLCBhbmQgZW5nYWdpbmcuCiAgICAgICAgICAgIC0gJ3Jlc291cmNlcycgKGxpc3Qgb2YgZGljdHMsIGVhY2ggd2l0aCAndGl0bGUnIGFuZCAndXJsJykKICAgICAgICAgICAgLSAnZXN0aW1hdGVkX2hvdXJzJyAoZmxvYXQsIG9wdGlvbmFsKQogICAgICAgICAgICAKICAgICAgICAgICAgRm9jdXMgb24gY3JlYXRpbmcgcHJhY3RpY2FsLCBhY3Rpb25hYmxlIGNvbnRlbnQgZm9yIGVhY2ggZGF5LgogICAgICAgICAgICBFbnN1cmUgdGhlIGN1cnJpY3VsdW0gc3BhbnMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy4KICAgICAgICAgICAgCiAgICAgICAgICAgIENSSVRJQ0FMIElOU1RSVUNUSU9OUyBGT1IgUkVTT1VSQ0VTOgogICAgICAgICAgICAxLiBUaGUgU3VwcG9ydGluZyBSZXNlYXJjaCBzZWN0aW9uIHdpbGwgY29udGFpbiBZb3VUdWJlIHZpZGVvcyB3aXRoIGlkZW50aWZpZXJzIGxpa2UgW1lUMV0sIFtZVDJdLCBldGMuCiAgICAgICAgICAgIDIuIFlvdSBNVVNUIHVzZSB0aGVzZSBpZGVudGlmaWVycyBpbiB0aGUgJ3VybCcgZmllbGQgd2hlbiBhZGRpbmcgWW91VHViZSB2aWRlb3MgdG8gcmVzb3VyY2VzCiAgICAgICAgICAgIDMuIEZvciBleGFtcGxlOiB7InRpdGxlIjogIkludHJvZHVjdGlvbiB0byBSZWFjdCBIb29rcyIsICJ1cmwiOiAiW1lUM10ifQogICAgICAgICAgICA0LiBBbHNvIGluY2x1ZGUgbm9uLVlvdVR1YmUgcmVzb3VyY2VzIChhcnRpY2xlcywgZG9jdW1lbnRhdGlvbikgd2l0aCB0aGVpciBmdWxsIFVSTHMKICAgICAgICAgICAgNS4gRWFjaCBkYXkgc2hvdWxkIGhhdmUgMi00IHJlbGV2YW50IHJlc291cmNlcyBtaXhpbmcgWW91VHViZSB2aWRlb3MgYW5kIG90aGVyIHNvdXJjZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIFdoZW4gZ2VuZXJhdGluZyB0aGUgJ2NvbnRlbnQnIGZvciBlYWNoIGRheSwgdXRpbGl6ZSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSBhbG9uZyB3aXRoIHRoZXNlIHByZWZlcmVuY2VzKSB0byBtYWtlIHRoZSBleHBsYW5hdGlvbnMgYW5kIGNvbmNlcHRzIGFzIGRldGFpbGVkIGFuZCBhY2N1cmF0ZSBhcyBwb3NzaWJsZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIElNUE9SVEFOVDogSWYgbnVtX3Byb2plY3RzIGlzIGdyZWF0ZXIgdGhhbiAwLCBkaXN0cmlidXRlIHRoZSBwcm9qZWN0cyBldmVubHkgdGhyb3VnaG91dCB0aGUgY3VycmljdWx1bS4gRm9yIGV4YW1wbGU6CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTEgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHRoZSBwcm9qZWN0IGFyb3VuZCBkYXkgMjAtMjUKICAgICAgICAgICAgLSBJZiBudW1fcHJvamVjdHM9MiBhbmQgZHVyYXRpb249MzAgZGF5cywgcGxhY2UgcHJvamVjdHMgYXJvdW5kIGRheSAxMC0xMiBhbmQgZGF5IDIyLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTMgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgOC0xMCwgZGF5IDE2LTE4LCBhbmQgZGF5IDI0LTI2CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3IgcHJvamVjdCBkYXlzOgogICAgICAgICAgICAtIFNldCAnaXNfcHJvamVjdF9kYXknIHRvIHRydWUKICAgICAgICAgICAgLSBJbmNsdWRlIGEgJ3Byb2plY3RfZGF0YScgb2JqZWN0IHdpdGggY29tcHJlaGVuc2l2ZSBwcm9qZWN0IGRldGFpbHMKICAgICAgICAgICAgLSBUaGUgcHJvamVjdCBzaG91bGQgaW50ZWdyYXRlIGFuZCBhcHBseSBjb25jZXB0cyBsZWFybmVkIGluIHRoZSBwcmVjZWRpbmcgZGF5cwogICAgICAgICAgICAtIFByb2plY3RzIHNob3VsZCBiZSBwcmFjdGljYWwsIGhhbmRzLW9uIGFjdGl2aXRpZXMgdGhhdCByZWluZm9yY2UgbGVhcm5pbmcKICAgICAgICAgICAgLSBQcm9qZWN0IHRpdGxlcyBzaG91bGQgYmUgZGVzY3JpcHRpdmUgYnV0IG5vdCBvdmVybHkgcGxheWZ1bCAoZS5nLiwgIkJ1aWxkIGEgV2VhdGhlciBEYXRhIEFuYWx5emVyIiBub3QgIldlYXRoZXIgV2l6YXJkIDMwMDAiKQogICAgICAgICAgICDSBwkJwQkBhyohjO8%3D"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 29,
      "title": "Project 4: Designing a Closed-Loop Training Experiment",
      "is_project_day": true,
      "project_data": {
        "title": "Experimental Design for In-Vitro Learning",
        "description": "This is the capstone project. Your task is to design a complete, novel closed-loop experiment to teach a neuronal culture a simple task. You are not limited to Pong; you can choose any simple task you can imagine (e.g., navigating a T-maze, distinguishing two different frequencies of stimulation, generating a musical rhythm). You will produce a formal experimental proposal outlining your idea.",
        "objectives": [
          "Apply the principles of Hebbian learning and closed-loop feedback to a novel problem.",
          "Creatively design a task suitable for an in-vitro neural network.",
          "Clearly define the input encoding, output decoding, and feedback mechanisms.",
          "Propose a clear analytical plan to validate whether learning occurred.",
          "Demonstrate a comprehensive understanding of the entire course material."
        ],
        "requirements": [
          "A word processor or diagramming tool (optional).",
          "All knowledge from the 30-day course."
        ],
        "deliverables": [
          "A 2-3 page experimental proposal document with the following sections: 1. Introduction & Hypothesis (What are you trying to teach and why?). 2. Experimental Design (Describe the task, input encoding, output decoding, and feedback rule in detail. A diagram is encouraged). 3. Analysis Plan (How will you measure performance and what neural correlates of learning will you look for?). 4. Expected Outcomes & Significance (What do you expect to find, and why is it important?)."
        ],
        "evaluation_criteria": [
          "Originality and feasibility of the proposed task.",
          "Clarity and logical consistency of the experimental design (input, output, feedback).",
          "Rigor of the proposed analysis plan.",
          "Demonstrated synthesis of concepts from across the entire curriculum.",
          "Overall quality and professionalism of the written proposal."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Day: Experimental Design"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today, you become the principal investigator. Your final project is to design a complete experiment from the ground up. This is your chance to be creative and apply everything you've learned about culturing neurons, interfacing with them via MEAs, and shaping their activity through closed-loop feedback. The goal is to produce a professional-quality research proposal."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Brief"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Refer to the 'project_data' for the full description, objectives, and deliverables. Think beyond Pong. What other simple, rule-based tasks could a disembodied neural network learn?"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Example Ideas to Get You Started"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The T-Maze:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Stimulate a 'start' electrode. The network must 'turn left' or 'turn right' (by activating left-side or right-side electrodes) to get a 'reward' stimulation."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Pattern Recognition:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Present two different temporal patterns of stimulation (e.g., 'beep-boop' vs 'boop-beep'). The network must respond with two different spatial patterns of activity to indicate which one it 'heard'."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Rhythm Generation:",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Reward the network for producing network bursts at a specific, regular interval (e.g., once every 5 seconds)."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This capstone project is the ultimate test of your understanding. It requires you to integrate biology, engineering, and data analysis into a single, coherent research plan. Good luck!"
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Review: All course materials",
          "url": "#"
        },
        {
          "title": "How to Write a Research Proposal",
          "url": "https://www.scribbr.com/dissertation/research-proposal/"
        },
        {
          "title": "These brain cells can play Pong",
          "url": "https://youtube.com/shorts/4Lhtn4g_ZRY"
        }
      ],
      "estimated_hours": 3.0
    },
    {
      "day_number": 30,
      "title": "Course Wrap-up, Future Directions, and Ethical Implications",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Congratulations on completing this 30-day journey! You have traced the path from a single rat neuron to a computational entity capable of learning. Today, we will review the key takeaways from the entire course, look at the exciting future directions of this research, and revisit the profound ethical questions it raises."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Summarize the three main pillars of this course: Culture, Interfacing, and Training."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify potential future applications of this technology."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Reflect on the ethical responsibilities of researchers in this field."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Course Review: The Three Pillars"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Our learning was built on three pillars: "
              },
              {
                "type": "text",
                "text": "1) Cell Culture:",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " The wet-lab skills of aseptic technique, media prep, dissection, and maintenance needed to keep neurons alive in a dish. "
              },
              {
                "type": "text",
                "text": "2) Interfacing:",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " The hardware and software used to record and analyze the electrical language of neurons (spikes, bursts) and to stimulate them. "
              },
              {
                "type": "text",
                "text": "3) Training:",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " The theoretical and practical application of closed-loop feedback to induce Hebbian plasticity and guide the network toward learning a task."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Future Directions"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This field is rapidly advancing. Future applications include: "
              },
              {
                "type": "text",
                "text": "Disease Modeling",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " (using patient-derived iPSC neurons to study epilepsy, Alzheimer's, etc.), "
              },
              {
                "type": "text",
                "text": "Drug Discovery",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " (high-throughput screening of compounds on human neural networks), and "
              },
              {
                "type": "text",
                "text": "Biological Computing",
                "marks": [
                  {
                    "type": "bold"
                  }
                ]
              },
              {
                "type": "text",
                "text": " (exploring the potential of neural tissue as a new, highly efficient form of computer)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "text": "Revisiting the Ethics: Sentience and Responsibility"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "As these 'dish brains' become more complex, we must continually ask difficult questions. Is it possible for them to be sentient? To feel? To suffer? While current cultures are a long way from this, the line is blurring. The scientific community has a profound responsibility to proceed with caution, transparency, and a robust ethical framework. The goal is not to create conscious artifacts, but to understand the principles of intelligence and to heal the diseased brain. This distinction must always remain at the forefront of the research."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "You have gained a comprehensive, end-to-end understanding of how to culture, interface with, and train neural networks in-vitro."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "This technology has immense potential for medicine and computing."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "With great power comes great ethical responsibility, requiring constant dialogue and oversight."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Scientists Gave Human Brain Cells to a Rat. Why?",
          "url": "https://youtube.com/watch?v=a7waWv0uWG0&pp=ygWjKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIFRpdGxlIChvcHRpb25hbCk6IFJhdCBOZXVyb25zCiAgICAgICAgICAgIERlc2NyaXB0aW9uIChvcHRpb25hbCk6IGxlYXJuIGhvdyB0byBjdWx0dXJlIGFuZCBncm93IHJhdCBuZXVyb25zIG9uIGFuIE1FQSBhbmQgdHJhaW4gdGhlbSB0byBwZXJmb3JtIHRhc2tzCiAgICAgICAgICAgIERpZmZpY3VsdHk6IGludGVybWVkaWF0ZQogICAgICAgICAgICBUb3RhbCBEdXJhdGlvbiAoZGF5cyk6IDMwCiAgICAgICAgICAgIFByZXJlcXVpc2l0ZXM6IGknbSBhIDJuZCB5ZWFyIGJpb2xvZ3kgbWFqb3IKICAgICAgICAgICAgVGltZSBwZXIgRGF5IChtaW51dGVzKTogMTgwCiAgICAgICAgICAgIExlYXJuaW5nIFN0eWxlOiBiYWxhbmNlZAogICAgICAgICAgICBOdW1iZXIgb2YgUHJvamVjdHM6IDQKICAgICAgICAgICAgCiAgICAgICAgICAgIFRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgd2l0aCBhIG1haW4gJ2N1cnJpY3VsdW1fdGl0bGUnIGFuZCAnY3VycmljdWx1bV9kZXNjcmlwdGlvbicsIAogICAgICAgICAgICBhbmQgYSBsaXN0IG9mICdkYXlzJy4gRWFjaCBkYXkgb2JqZWN0IGluIHRoZSBsaXN0IHNob3VsZCBoYXZlOgogICAgICAgICAgICAtICdkYXlfbnVtYmVyJyAoaW50KQogICAgICAgICAgICAtICd0aXRsZScgKHN0ciwgY29uY2lzZSB0aXRsZSBmb3IgdGhlIGRheSkKICAgICAgICAgICAgLSAnaXNfcHJvamVjdF9kYXknIChib29sLCB0cnVlIGlmIHRoaXMgZGF5IGlzIGEgcHJvamVjdCBkYXksIGZhbHNlIG90aGVyd2lzZSkKICAgICAgICAgICAgLSAncHJvamVjdF9kYXRhJyAoZGljdCwgb3B0aW9uYWwsIG9ubHkgaWYgaXNfcHJvamVjdF9kYXkgaXMgdHJ1ZS4gU2hvdWxkIGNvbnRhaW4gJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ29iamVjdGl2ZXMnLCAncmVxdWlyZW1lbnRzJywgJ2RlbGl2ZXJhYmxlcycsIGFuZCAnZXZhbHVhdGlvbl9jcml0ZXJpYScpCiAgICAgICAgICAgIC0gJ2NvbnRlbnQnIChkaWN0LCBUaXBUYXAvUHJvc2VNaXJyb3IgSlNPTiBvYmplY3QgZm9yIHRoZSBsZWFybmluZyBtb2R1bGUuIFRoaXMgb2JqZWN0IE1VU1QgaGF2ZSBhIHJvb3QgJ3R5cGUnOiAnZG9jJyBhbmQgYSAnY29udGVudCcgYXJyYXkuIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnRhaW4gYSBzZXF1ZW5jZSBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIGRheSdzIGxlc3Nvbi4gU3RydWN0dXJlIGVhY2ggZGF5J3MgbGVzc29uIGNvbnRlbnQgd2l0aCB0aGUgZm9sbG93aW5nIHNlY3Rpb25zLCB1c2luZyBhcHByb3ByaWF0ZSBUaXBUYXAvUHJvc2VNaXJyb3Igbm9kZXMgKGxpa2UgJ2hlYWRpbmcnIHdpdGggbGV2ZWxzIDEtMywgJ3BhcmFncmFwaCcsICdidWxsZXRMaXN0JywgJ29yZGVyZWRMaXN0JywgJ2xpc3RJdGVtJywgJ2NvZGVCbG9jaycgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCAndGV4dCcgbm9kZXMgd2l0aCBtYXJrcyBmb3IgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnKToKICAgICAgICAgICAgICAgIDEuICAiSW50cm9kdWN0aW9uIjogKFJlcXVpcmVkKSBBIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBkYXkncyB0b3BpYyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDIsIGZvbGxvd2VkIGJ5IG9uZSBvciB0d28gJ3BhcmFncmFwaCcgbm9kZXMpLgogICAgICAgICAgICAgICAgMi4gICJMZWFybmluZyBPYmplY3RpdmVzIjogKFJlcXVpcmVkKSAyLTQgY2xlYXIsIGFjdGlvbmFibGUgb2JqZWN0aXZlcyBmb3IgdGhlIGRheSAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUsIHdoZXJlIGVhY2ggJ2xpc3RJdGVtJyBjb250YWlucyBhICdwYXJhZ3JhcGgnIHdpdGggdGhlIG9iamVjdGl2ZSkuCiAgICAgICAgICAgICAgICAzLiAgIktleSBDb25jZXB0cyI6IChSZXF1aXJlZCkgRGV0YWlsZWQgZXhwbGFuYXRpb25zIG9mIHRoZSBjb3JlIGNvbmNlcHRzIGZvciB0aGUgZGF5LiBUaGlzIHNob3VsZCBiZSB0aGUgbW9zdCBzdWJzdGFudGlhbCBwYXJ0LiBVc2UgbXVsdGlwbGUgJ2hlYWRpbmcnIG5vZGVzIChsZXZlbCAzKSBmb3Igc3ViLXRvcGljcyBpZiBuZWVkZWQsIGZvbGxvd2VkIGJ5IGRldGFpbGVkICdwYXJhZ3JhcGgnIG5vZGVzLiBJbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSAnU3VwcG9ydGluZyBSZXNlYXJjaCcgKHdoaWNoIHdpbGwgYmUgcHJvdmlkZWQgdG8geW91KSB0byBtYWtlIHRoZXNlIGV4cGxhbmF0aW9ucyBjb21wcmVoZW5zaXZlLiBJZiBjb2RlIGV4YW1wbGVzIG9yIG1hdGhlbWF0aWNhbCBmb3JtdWxhcyBhcmUgcmVsZXZhbnQgYW5kIGZvdW5kIGluIHJlc2VhcmNoLCByZXByZXNlbnQgdGhlbSBhY2N1cmF0ZWx5LCBwZXJoYXBzIHdpdGhpbiAncGFyYWdyYXBoJyBub2RlcyBvciB1c2luZyAnY29kZUJsb2NrJyBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgICAgIDQuICAiRXhhbXBsZXMiOiAoT3B0aW9uYWwsIGJ1dCBoaWdobHkgZW5jb3VyYWdlZCkgMS0yIHdvcmtlZCBleGFtcGxlcyBvciBpbGx1c3RyYXRpdmUgc2NlbmFyaW9zIHJlbGF0ZWQgdG8gdGhlIGtleSBjb25jZXB0cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5ICdwYXJhZ3JhcGgnIG9yICdvcmRlcmVkTGlzdCcgbm9kZXMgZXhwbGFpbmluZyB0aGUgZXhhbXBsZSBzdGVwLWJ5LXN0ZXApLgogICAgICAgICAgICAgICAgNS4gICJTdW1tYXJ5IjogKFJlcXVpcmVkKSBBIGNvbmNpc2UgcmVjYXAgb2YgdGhlIGRheSdzIG1haW4gcG9pbnRzIChlLmcuLCBhICdoZWFkaW5nJyBub2RlIHdpdGggbGV2ZWwgMywgZm9sbG93ZWQgYnkgYSAnYnVsbGV0TGlzdCcgbm9kZSkuCiAgICAgICAgICAgICAgICBFbnN1cmUgYWxsIHRleHQgY29udGVudCBpcyB3ZWxsLXdyaXR0ZW4sIGNsZWFyLCBhbmQgZW5nYWdpbmcuCiAgICAgICAgICAgIC0gJ3Jlc291cmNlcycgKGxpc3Qgb2YgZGljdHMsIGVhY2ggd2l0aCAndGl0bGUnIGFuZCAndXJsJykKICAgICAgICAgICAgLSAnZXN0aW1hdGVkX2hvdXJzJyAoZmxvYXQsIG9wdGlvbmFsKQogICAgICAgICAgICAKICAgICAgICAgICAgRm9jdXMgb24gY3JlYXRpbmcgcHJhY3RpY2FsLCBhY3Rpb25hYmxlIGNvbnRlbnQgZm9yIGVhY2ggZGF5LgogICAgICAgICAgICBFbnN1cmUgdGhlIGN1cnJpY3VsdW0gc3BhbnMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy4KICAgICAgICAgICAgCiAgICAgICAgICAgIENSSVRJQ0FMIElOU1RSVUNUSU9OUyBGT1IgUkVTT1VSQ0VTOgogICAgICAgICAgICAxLiBUaGUgU3VwcG9ydGluZyBSZXNlYXJjaCBzZWN0aW9uIHdpbGwgY29udGFpbiBZb3VUdWJlIHZpZGVvcyB3aXRoIGlkZW50aWZpZXJzIGxpa2UgW1lUMV0sIFtZVDJdLCBldGMuCiAgICAgICAgICAgIDIuIFlvdSBNVVNUIHVzZSB0aGVzZSBpZGVudGlmaWVycyBpbiB0aGUgJ3VybCcgZmllbGQgd2hlbiBhZGRpbmcgWW91VHViZSB2aWRlb3MgdG8gcmVzb3VyY2VzCiAgICAgICAgICAgIDMuIEZvciBleGFtcGxlOiB7InRpdGxlIjogIkludHJvZHVjdGlvbiB0byBSZWFjdCBIb29rcyIsICJ1cmwiOiAiW1lUM10ifQogICAgICAgICAgICA0LiBBbHNvIGluY2x1ZGUgbm9uLVlvdVR1YmUgcmVzb3VyY2VzIChhcnRpY2xlcywgZG9jdW1lbnRhdGlvbikgd2l0aCB0aGVpciBmdWxsIFVSTHMKICAgICAgICAgICAgNS4gRWFjaCBkYXkgc2hvdWxkIGhhdmUgMi00IHJlbGV2YW50IHJlc291cmNlcyBtaXhpbmcgWW91VHViZSB2aWRlb3MgYW5kIG90aGVyIHNvdXJjZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIFdoZW4gZ2VuZXJhdGluZyB0aGUgJ2NvbnRlbnQnIGZvciBlYWNoIGRheSwgdXRpbGl6ZSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSBhbG9uZyB3aXRoIHRoZXNlIHByZWZlcmVuY2VzKSB0byBtYWtlIHRoZSBleHBsYW5hdGlvbnMgYW5kIGNvbmNlcHRzIGFzIGRldGFpbGVkIGFuZCBhY2N1cmF0ZSBhcyBwb3NzaWJsZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIElNUE9SVEFOVDogSWYgbnVtX3Byb2plY3RzIGlzIGdyZWF0ZXIgdGhhbiAwLCBkaXN0cmlidXRlIHRoZSBwcm9qZWN0cyBldmVubHkgdGhyb3VnaG91dCB0aGUgY3VycmljdWx1bS4gRm9yIGV4YW1wbGU6CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTEgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHRoZSBwcm9qZWN0IGFyb3VuZCBkYXkgMjAtMjUKICAgICAgICAgICAgLSBJZiBudW1fcHJvamVjdHM9MiBhbmQgZHVyYXRpb249MzAgZGF5cywgcGxhY2UgcHJvamVjdHMgYXJvdW5kIGRheSAxMC0xMiBhbmQgZGF5IDIyLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTMgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgOC0xMCwgZGF5IDE2LTE4LCBhbmQgZGF5IDI0LTI2CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3IgcHJvamVjdCBkYXlzOgogICAgICAgICAgICAtIFNldCAnaXNfcHJvamVjdF9kYXknIHRvIHRydWUKICAgICAgICAgICAgLSBJbmNsdWRlIGEgJ3Byb2plY3RfZGF0YScgb2JqZWN0IHdpdGggY29tcHJlaGVuc2l2ZSBwcm9qZWN0IGRldGFpbHMKICAgICAgICAgICAgLSBUaGUgcHJvamVjdCBzaG91bGQgaW50ZWdyYXRlIGFuZCBhcHBseSBjb25jZXB0cyBsZWFybmVkIGluIHRoZSBwcmVjZWRpbmcgZGF5cwogICAgICAgICAgICAtIFByb2plY3RzIHNob3VsZCBiZSBwcmFjdGljYWwsIGhhbmRzLW9uIGFjdGl2aXRpZXMgdGhhdCByZWluZm9yY2UgbGVhcm5pbmcKICAgICAgICAgICAgLSBQcm9qZWN0IHRpdGxlcyBzaG91bGQgYmUgZGVzY3JpcHRpdmUgYnV0IG5vdCBvdmVybHkgcGxheWZ1bCAoZS5nLiwgIkJ1aWxkIGEgV2VhdGhlciBEYXRhIEFuYWx5emVyIiBub3QgIldlYXRoZXIgV2l6YXJkIDMwMDAiKQogICAgICAgICAgICA%3D"
        },
        {
          "title": "Lab-Grown Brain Learns Pong - Is This Biological Neural Network 'Sentient'?",
          "url": "https://youtube.com/shorts/lG83gePtgV8"
        },
        {
          "title": "The ethics of brain-like computing",
          "url": "https://www.nature.com/articles/d41586-023-00598-8"
        }
      ],
      "estimated_hours": 3.0
    }
  ]
}
```
--- End of Response ---



=== PYDANTIC VALIDATION FAILED at 2025-07-12 00:09:04.974165 ===
Error: 1 validation error for CurriculumResponse
days.25.resources
  Field required [type=missing, input_value={'day_number': 26, 'title... for this example'}]}]}}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing
Data keys: ['curriculum_title', 'curriculum_description', 'days']
--- New Curriculum Generation ---
Curriculum ID: c7e47137-0b9a-4cb5-af5d-11296359ebeb
Timestamp: 2025-07-12T07:09:05.324034
Raw Response:
```json
{
  "curriculum_title": "Data Analytics",
  "curriculum_description": "Master Python-centred data analytics (SQL → Pandas → automation pipelines).",
  "days": [
    {
      "day_number": 1,
      "title": "Introduction to Data Analytics",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Welcome to the start of your data analytics journey! Today, we'll explore the fundamental question: What is data analytics? We'll uncover why it's a critical skill in today's world and outline the exciting path we'll take over the next 30 days, moving from foundational database queries to building automated Python data pipelines."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Define data analytics and its main types (descriptive, diagnostic, predictive, prescriptive)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the data analytics lifecycle from data collection to communication."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Recognize the key tools we will be using: SQL, Python (Pandas), and Jupyter Notebooks."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "What is Data Analytics?"
              },
              {
                "type": "text",
                "text": " Data analytics is the science of analyzing raw data to make conclusions about that information. It involves applying an algorithmic or mechanical process to derive insights. For example, a retail company might analyze sales data to predict future demand and optimize inventory."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The Data Analytics Lifecycle:"
              },
              {
                "type": "text",
                "text": " This process is typically iterative and can be broken down into several stages:"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Data Collection:"
                      },
                      {
                        "type": "text",
                        "text": " Gathering data from various sources (databases, files, APIs)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Data Cleaning:"
                      },
                      {
                        "type": "text",
                        "text": " Handling errors, missing values, and inconsistencies to prepare data for analysis."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Data Analysis:"
                      },
                      {
                        "type": "text",
                        "text": " Using tools and techniques to explore the data, find patterns, and build models."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Interpretation & Visualization:"
                      },
                      {
                        "type": "text",
                        "text": " Making sense of the results and creating charts or graphs to communicate findings effectively."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Core Technologies in this Course:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "SQL (Structured Query Language):"
                      },
                      {
                        "type": "text",
                        "text": " The standard language for managing and querying data stored in relational databases. We'll start here."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Python with Pandas:"
                      },
                      {
                        "type": "text",
                        "text": " A powerful programming language combined with the essential Pandas library for data manipulation and analysis. This is the core of our course."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Automation Pipelines:"
                      },
                      {
                        "type": "text",
                        "text": " We will learn to write scripts that automatically perform the steps of the data analytics lifecycle, creating efficient and repeatable workflows."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Data analytics transforms raw data into actionable insights."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The process involves collecting, cleaning, analyzing, and interpreting data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "This course will equip you with skills in SQL, Python (Pandas), and building automated data pipelines."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "What is Data Analytics? A Complete Guide for Beginners",
          "url": "https://careerfoundry.com/en/blog/data-analytics/what-is-data-analytics/"
        },
        {
          "title": "The Data Science Lifecycle",
          "url": "https://www.datarobot.com/wiki/data-science-lifecycle/"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 2,
      "title": "SQL Fundamentals: SELECT, FROM, WHERE",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today we begin our journey with SQL, the language of databases. We'll learn the most fundamental commands used to retrieve data: "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "SELECT"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "FROM"
              },
              {
                "type": "text",
                "text": ", and "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "WHERE"
              },
              {
                "type": "text",
                "text": ". These three keywords form the backbone of almost every data query you will ever write."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the structure of a relational database (tables, columns, rows)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write a basic SQL query to select specific columns from a table."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the WHERE clause to filter rows based on a condition."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Relational Databases:"
              },
              {
                "type": "text",
                "text": " Data is organized into tables. Think of a table like a spreadsheet. It has columns (attributes like 'name', 'age', 'city') and rows (records for each individual entity, like a person)."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The SELECT Statement:"
              },
              {
                "type": "text",
                "text": " Used to specify the columns you want to retrieve. You can select all columns using an asterisk ("
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "*"
              },
              {
                "type": "text",
                "text": ") or list specific column names."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The FROM Clause:"
              },
              {
                "type": "text",
                "text": " Specifies the table from which you want to retrieve the data."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The WHERE Clause:"
              },
              {
                "type": "text",
                "text": " Used to filter records. It extracts only those records that fulfill a specified condition. You can use comparison operators like "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "="
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": ">"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "<"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "<>"
              },
              {
                "type": "text",
                "text": " (not equal), and logical operators like "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "AND"
              },
              {
                "type": "text",
                "text": " and "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "OR"
              },
              {
                "type": "text",
                "text": "."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Imagine a table named "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "Customers"
              },
              {
                "type": "text",
                "text": " with columns: "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "CustomerID"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "CustomerName"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "City"
              },
              {
                "type": "text",
                "text": ", and "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "Country"
              },
              {
                "type": "text",
                "text": "."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "1. Select all columns from the Customers table:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT * FROM Customers;"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "2. Select only the CustomerName and City columns:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT CustomerName, City FROM Customers;"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "3. Select all customers who are from 'London':"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT * FROM Customers WHERE City = 'London';"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "SELECT"
                      },
                      {
                        "type": "text",
                        "text": " chooses the columns."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "FROM"
                      },
                      {
                        "type": "text",
                        "text": " specifies the table."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "WHERE"
                      },
                      {
                        "type": "text",
                        "text": " filters the rows based on conditions."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The order of these clauses in a query is always "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "SELECT"
                      },
                      {
                        "type": "text",
                        "text": ", then "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "FROM"
                      },
                      {
                        "type": "text",
                        "text": ", then "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "WHERE"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "SQL SELECT Statement",
          "url": "https://www.w3schools.com/sql/sql_select.asp"
        },
        {
          "title": "SQL WHERE Clause",
          "url": "https://www.w3schools.com/sql/sql_where.asp"
        },
        {
          "title": "SQLBolt - Interactive SQL Tutorial",
          "url": "https://sqlbolt.com/lesson/select_queries_introduction"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 3,
      "title": "SQL: Filtering and Sorting Data",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Now that you can retrieve data, let's learn how to control its presentation and uniqueness. Today, we'll cover "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "ORDER BY"
              },
              {
                "type": "text",
                "text": " to sort our results, "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "LIMIT"
              },
              {
                "type": "text",
                "text": " to control the number of rows returned, and "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "DISTINCT"
              },
              {
                "type": "text",
                "text": " to remove duplicate values. These are essential for refining your queries and getting precisely the data you need."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Sort query results in ascending or descending order using ORDER BY."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Limit the number of rows in the output using LIMIT."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Retrieve only unique values from a column using DISTINCT."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "ORDER BY Clause:"
              },
              {
                "type": "text",
                "text": " Sorts the result set in ascending ("
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "ASC"
              },
              {
                "type": "text",
                "text": ") or descending ("
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "DESC"
              },
              {
                "type": "text",
                "text": ") order. Ascending is the default. You can also sort by multiple columns."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "LIMIT Clause:"
              },
              {
                "type": "text",
                "text": " Restricts the number of rows returned by a query. This is very useful for previewing data or for finding top/bottom N records when combined with "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "ORDER BY"
              },
              {
                "type": "text",
                "text": "."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "DISTINCT Keyword:"
              },
              {
                "type": "text",
                "text": " Used with "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "SELECT"
              },
              {
                "type": "text",
                "text": " to return only unique (different) values in a column. If a value appears multiple times, it will only be listed once in the result."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Using the same "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "Customers"
              },
              {
                "type": "text",
                "text": " table:"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "1. Select all customers, ordered by their name alphabetically:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT * FROM Customers\nORDER BY CustomerName ASC;"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "2. Find the first 5 customers in the table:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT * FROM Customers\nLIMIT 5;"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "3. Get a list of all unique countries where customers are located:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT DISTINCT Country FROM Customers;"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "ORDER BY"
                      },
                      {
                        "type": "text",
                        "text": " sorts your query results."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "LIMIT"
                      },
                      {
                        "type": "text",
                        "text": " restricts the number of rows returned."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "DISTINCT"
                      },
                      {
                        "type": "text",
                        "text": " removes duplicate values from your selection."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The full query order is now: "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "SELECT"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                        "text": "FROM"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                        "text": "WHERE"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                        "text": "ORDER BY"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                        "text": "LIMIT"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "SQL ORDER BY Keyword",
          "url": "https://www.w3schools.com/sql/sql_orderby.asp"
        },
        {
          "title": "SQL DISTINCT Keyword",
          "url": "https://www.w3schools.com/sql/sql_distinct.asp"
        },
        {
          "title": "SQL LIMIT Clause",
          "url": "https://www.postgresqltutorial.com/postgresql-limit/"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 4,
      "title": "SQL Aggregate Functions",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today, we move from retrieving individual rows to calculating summaries of data. SQL's aggregate functions allow you to perform a calculation on a set of values and return a single summary value. We will focus on the most common and useful ones: "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "COUNT"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "SUM"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "AVG"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "MIN"
              },
              {
                "type": "text",
                "text": ", and "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "MAX"
              },
              {
                "type": "text",
                "text": ". These are the building blocks of data analysis."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain the purpose of aggregate functions."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use COUNT to count rows or non-null values."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Calculate the sum, average, minimum, and maximum of a numeric column."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use aliases with the AS keyword to rename output columns."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "COUNT():"
                      },
                      {
                        "type": "text",
                        "text": " Returns the number of rows. "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "COUNT(*)"
                      },
                      {
                        "type": "text",
                        "text": " counts all rows, while "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "COUNT(column_name)"
                      },
                      {
                        "type": "text",
                        "text": " counts non-NULL values in that column."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "SUM():"
                      },
                      {
                        "type": "text",
                        "text": " Returns the total sum of a numeric column."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "AVG():"
                      },
                      {
                        "type": "text",
                        "text": " Returns the average value of a numeric column."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "MIN() and MAX():"
                      },
                      {
                        "type": "text",
                        "text": " Return the smallest and largest value of the selected column, respectively."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "AS (Alias):"
                      },
                      {
                        "type": "text",
                        "text": " Renames a column in the result set, making the output more readable. For example, "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "SELECT COUNT(*) AS total_customers"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Let's use a table named "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "Orders"
              },
              {
                "type": "text",
                "text": " with columns "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "OrderID"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "CustomerID"
              },
              {
                "type": "text",
                "text": ", and "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "OrderAmount"
              },
              {
                "type": "text",
                "text": "."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "1. Count the total number of orders:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT COUNT(OrderID) AS total_orders FROM Orders;"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "2. Calculate the total revenue from all orders:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT SUM(OrderAmount) AS total_revenue FROM Orders;"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "3. Find the average, smallest, and largest order amounts:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT \n  AVG(OrderAmount) AS average_order,\n  MIN(OrderAmount) AS smallest_order,\n  MAX(OrderAmount) AS largest_order\nFROM Orders;"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Aggregate functions perform a calculation on a set of rows and return a single value."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Key functions include COUNT, SUM, AVG, MIN, and MAX."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the AS keyword to create aliases for your result columns to improve readability."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "SQL Aggregate Functions",
          "url": "https://www.w3schools.com/sql/sql_aggr.asp"
        },
        {
          "title": "SQL COUNT, AVG and SUM Functions",
          "url": "https://www.w3schools.com/sql/sql_count_avg_sum.asp"
        },
        {
          "title": "A Guide to SQL Aggregate Functions",
          "url": "https://www.datacamp.com/community/tutorials/sql-aggregate-functions"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 5,
      "title": "SQL: Grouping and Having",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Yesterday we learned to aggregate data over an entire table. But what if we want to calculate aggregates for specific groups within our data? That's where "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "GROUP BY"
              },
              {
                "type": "text",
                "text": " comes in. We'll also learn to use the "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "HAVING"
              },
              {
                "type": "text",
                "text": " clause to filter these groups, unlocking a much deeper level of analysis."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the GROUP BY clause to group rows and perform aggregate functions on each group."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the difference between the WHERE and HAVING clauses."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write queries that filter groups based on aggregate results using HAVING."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "GROUP BY Clause:"
              },
              {
                "type": "text",
                "text": " This clause groups rows that have the same values in specified columns into summary rows. It's often used with aggregate functions ("
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "COUNT"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "MAX"
              },
              {
                "type": "text",
                "text": ", etc.) to perform calculations on each group. For example, you could group by 'City' to find the number of customers in each city."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "HAVING Clause:"
              },
              {
                "type": "text",
                "text": " This was added to SQL because the "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "WHERE"
              },
              {
                "type": "text",
                "text": " keyword cannot be used with aggregate functions. "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "HAVING"
              },
              {
                "type": "text",
                "text": " is used to filter the "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "italic"
                  }
                ],
                "text": "results"
              },
              {
                "type": "text",
                "text": " of a "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "GROUP BY"
              },
              {
                "type": "text",
                "text": ". For instance, you could find which cities have more than 10 customers."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "WHERE vs. HAVING:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "WHERE"
                      },
                      {
                        "type": "text",
                        "text": " filters rows "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "italic"
                          }
                        ],
                        "text": "before"
                      },
                      {
                        "type": "text",
                        "text": " any grouping or aggregation happens."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "HAVING"
                      },
                      {
                        "type": "text",
                        "text": " filters groups "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "italic"
                          }
                        ],
                        "text": "after"
                      },
                      {
                        "type": "text",
                        "text": " the aggregation has been performed."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Using the "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "Customers"
              },
              {
                "type": "text",
                "text": " table:"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "1. Count the number of customers in each country:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT Country, COUNT(CustomerID) AS NumberOfCustomers\nFROM Customers\nGROUP BY Country;"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "2. List the countries that have more than 5 customers:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT Country, COUNT(CustomerID) AS NumberOfCustomers\nFROM Customers\nGROUP BY Country\nHAVING COUNT(CustomerID) > 5;"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "GROUP BY"
                      },
                      {
                        "type": "text",
                        "text": " is used with aggregate functions to group the result-set by one or more columns."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "HAVING"
                      },
                      {
                        "type": "text",
                        "text": " filters the results of a "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "GROUP BY"
                      },
                      {
                        "type": "text",
                        "text": " based on an aggregate condition."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The final query order we've learned is: "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "SELECT, FROM, WHERE, GROUP BY, HAVING, ORDER BY, LIMIT"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "SQL GROUP BY Statement",
          "url": "https://www.w3schools.com/sql/sql_groupby.asp"
        },
        {
          "title": "SQL HAVING Clause",
          "url": "https://www.w3schools.com/sql/sql_having.asp"
        },
        {
          "title": "SQL GROUP BY - The Ultimate Guide",
          "url": "https://www.postgresqltutorial.com/postgresql-group-by/"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 6,
      "title": "SQL Joins",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Real-world data is rarely stored in a single table. It's usually spread across multiple related tables. Today, we'll learn the powerful "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "JOIN"
              },
              {
                "type": "text",
                "text": " clause, which is used to combine rows from two or more tables based on a related column between them. We will focus on "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "INNER JOIN"
              },
              {
                "type": "text",
                "text": " and "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "LEFT JOIN"
              },
              {
                "type": "text",
                "text": ", the two most common types of joins."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain why data is stored in multiple tables (normalization)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use INNER JOIN to retrieve records that have matching values in both tables."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use LEFT JOIN to retrieve all records from the left table, and the matched records from the right table."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Primary and Foreign Keys:"
              },
              {
                "type": "text",
                "text": " A "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Primary Key"
              },
              {
                "type": "text",
                "text": " is a column that uniquely identifies each row in a table (e.g., "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "CustomerID"
              },
              {
                "type": "text",
                "text": " in the Customers table). A "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Foreign Key"
              },
              {
                "type": "text",
                "text": " is a key used to link two tables together. It's a field in one table that refers to the Primary Key in another table (e.g., "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "CustomerID"
              },
              {
                "type": "text",
                "text": " in the Orders table)."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "INNER JOIN:"
              },
              {
                "type": "text",
                "text": " Selects records that have matching values in both tables. If a customer has no orders, they will not appear in the result of an INNER JOIN between Customers and Orders."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "LEFT JOIN:"
              },
              {
                "type": "text",
                "text": " Returns all records from the left table (the first one mentioned), and the matched records from the right table. The result is NULL from the right side if there is no match. If a customer has no orders, they will still appear in the result, but their order details will be NULL."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Consider two tables: "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "Customers"
              },
              {
                "type": "text",
                "text": " (CustomerID, CustomerName) and "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "Orders"
              },
              {
                "type": "text",
                "text": " (OrderID, CustomerID, OrderAmount)."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "1. Get a list of all orders with the corresponding customer's name (only customers who have placed an order):"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT Orders.OrderID, Customers.CustomerName\nFROM Customers\nINNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID;"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "2. Get a list of ALL customers, and any orders they might have placed. Customers without orders will still be listed:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nLEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "JOIN"
                      },
                      {
                        "type": "text",
                        "text": " is used to combine data from multiple tables based on a common key."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "INNER JOIN"
                      },
                      {
                        "type": "text",
                        "text": " returns only the rows where the join condition is met in both tables."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "LEFT JOIN"
                      },
                      {
                        "type": "text",
                        "text": " returns all rows from the left table, regardless of whether there is a match in the right table."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "SQL Joins",
          "url": "https://www.w3schools.com/sql/sql_join.asp"
        },
        {
          "title": "A Visual Explanation of SQL Joins",
          "url": "https://blog.codinghorror.com/a-visual-explanation-of-sql-joins/"
        },
        {
          "title": "SQL Joins Explained",
          "url": "https://www.sqlshack.com/sql-joins-sql-server/"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 7,
      "title": "Project 1: SQL Database Querying",
      "is_project_day": true,
      "project_data": {
        "title": "SQL-Based Sales Data Analysis",
        "description": "You are a data analyst at a global retail company. Your manager has given you access to a database containing information about customers, orders, and products. Your task is to write a series of SQL queries to answer specific business questions and extract key insights from the data.",
        "objectives": [
          "Apply fundamental SQL commands (SELECT, WHERE, ORDER BY, LIMIT).",
          "Utilize aggregate functions (COUNT, SUM, AVG) to summarize data.",
          "Perform grouped analysis using GROUP BY and HAVING.",
          "Combine data from multiple tables using INNER and LEFT JOINs."
        ],
        "requirements": [
          "An online SQL environment (like SQL Fiddle, DB Fiddle, or a local setup with SQLite).",
          "The provided sample database schema and data (e.g., Chinook sample database).",
          "A text file or document to write and save your SQL queries and their results/answers."
        ],
        "deliverables": [
          "A SQL script file (.sql) containing the queries for each question.",
          "A short report (e.g., a markdown or text file) that answers each question in plain English, supported by the data from your queries."
        ],
        "evaluation_criteria": [
          "Correctness of SQL syntax and logic.",
          "Accuracy of the answers to the business questions.",
          "Efficient use of SQL clauses (e.g., correct use of WHERE vs. HAVING).",
          "Clarity and readability of the final report."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Day: SQL-Based Sales Data Analysis"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today is your first project day! The goal is to consolidate everything you've learned about SQL in the past week. You will work with a sample database to solve a series of real-world business problems. This hands-on experience is crucial for solidifying your understanding."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Brief"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Please refer to the `project_data` for the full details of the assignment. You will be using the "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Chinook Sample Database"
              },
              {
                "type": "text",
                "text": ", which is a popular dataset for practicing SQL. It models a digital media store, with tables for artists, albums, media tracks, invoices, and customers."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Tasks / Business Questions"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Basic Retrieval:"
                      },
                      {
                        "type": "text",
                        "text": " Find the full names and email addresses of all customers in Canada. Order them by last name."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Aggregation:"
                      },
                      {
                        "type": "text",
                        "text": " What is the total revenue (sum of the 'Total' column in the Invoices table)? What is the average invoice total?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Joins:"
                      },
                      {
                        "type": "text",
                        "text": " List all tracks that are part of the 'Rock' genre. You will need to join the 'tracks', 'genres', and possibly 'albums' tables."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Grouping and Having:"
                      },
                      {
                        "type": "text",
                        "text": " Which artists have more than 10 albums in the database? List the artist's name and the count of their albums."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Complex Query:"
                      },
                      {
                        "type": "text",
                        "text": " Find the top 5 customers who have spent the most money. List their names and total spending."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Guidance"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "First, explore the database schema to understand how the tables are related. Then, tackle each question one by one. Don't be afraid to write a simple query first and then build upon it. Good luck!"
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Chinook Sample Database",
          "url": "https://www.sqlitetutorial.net/sqlite-sample-database/"
        },
        {
          "title": "DB Fiddle - Online SQL Editor",
          "url": "https://www.db-fiddle.com/"
        },
        {
          "title": "Chinook Database Schema Diagram",
          "url": "https://raw.githubusercontent.com/lerocha/chinook-database/master/ChinookDatabase/Chinook_Sqlite.png"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 8,
      "title": "Advanced SQL: Subqueries and CTEs",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "To wrap up our SQL module, we'll explore two advanced techniques for writing complex and readable queries: Subqueries and Common Table Expressions (CTEs). A subquery is a query nested inside another query, while a CTE (using the "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "WITH"
              },
              {
                "type": "text",
                "text": " clause) allows you to define a temporary, named result set. Both are essential for tackling multi-step analytical problems."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write a query that uses a subquery in the WHERE clause."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Define and use a Common Table Expression (CTE) with the WITH clause."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Recognize when to use a CTE to improve query readability and structure."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Subquery (or Inner Query):"
              },
              {
                "type": "text",
                "text": " A subquery is a "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "SELECT"
              },
              {
                "type": "text",
                "text": " statement that is embedded inside another SQL statement. It can be used in various clauses like "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "WHERE"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "FROM"
              },
              {
                "type": "text",
                "text": ", or "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "SELECT"
              },
              {
                "type": "text",
                "text": ". The inner query executes first, and its result is used by the outer query. For example, finding all employees who work in the same department as 'John Doe'."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Common Table Expression (CTE):"
              },
              {
                "type": "text",
                "text": " A CTE is a temporary named result set that you can reference within a "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "SELECT"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "INSERT"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "UPDATE"
              },
              {
                "type": "text",
                "text": ", or "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "DELETE"
              },
              {
                "type": "text",
                "text": " statement. It is defined using the "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "WITH"
              },
              {
                "type": "text",
                "text": " clause. CTEs make complex queries easier to read and maintain by breaking them down into logical, simple steps."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "1. Subquery Example:"
              },
              {
                "type": "text",
                "text": " Find all tracks that cost more than the average track price."
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT Name, UnitPrice\nFROM tracks\nWHERE UnitPrice > (SELECT AVG(UnitPrice) FROM tracks);"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "2. CTE Example:"
              },
              {
                "type": "text",
                "text": " For each country, find the total number of customers. Then, list only the countries with more than 5 customers."
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "WITH CountryCustomerCounts AS (\n  SELECT Country, COUNT(*) as CustomerCount\n  FROM Customers\n  GROUP BY Country\n)\nSELECT Country, CustomerCount\nFROM CountryCustomerCounts\nWHERE CustomerCount > 5;"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Subqueries are queries nested within other queries, useful for multi-step filtering."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "CTEs (using "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "WITH"
                      },
                      {
                        "type": "text",
                        "text": ") create temporary, named result sets that improve the readability and modularity of complex queries."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Prefer CTEs over complex, nested subqueries for better maintainability."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "SQL Subqueries",
          "url": "https://www.w3schools.com/sql/sql_subqueries.asp"
        },
        {
          "title": "SQL WITH clause (CTEs)",
          "url": "https://www.sqlitetutorial.net/sqlite-cte/"
        },
        {
          "title": "When to Use Subqueries vs. CTEs",
          "url": "https://mode.com/sql-tutorial/sql-subqueries-and-ctes/"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 9,
      "title": "Python for Data Analytics: Setup and Basics",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Welcome to the second major module of our course: Python! Today, we transition from SQL to the world's most popular language for data science. We'll set up our development environment using Anaconda and Jupyter Notebooks, and then cover the absolute basics of Python syntax that you'll need for data analysis."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Install Anaconda and understand its components (Conda, Jupyter)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Launch and navigate the Jupyter Notebook interface."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write basic Python code: variables, data types (integers, strings, lists), and comments."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Anaconda:"
              },
              {
                "type": "text",
                "text": " A free and open-source distribution of Python and R for scientific computing. It simplifies package management and deployment, and comes pre-loaded with essential data science libraries like Pandas, NumPy, and Matplotlib."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Jupyter Notebook:"
              },
              {
                "type": "text",
                "text": " An interactive, web-based computing environment that allows you to create and share documents containing live code, equations, visualizations, and narrative text. It's the standard tool for exploratory data analysis in Python."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Basic Python Syntax:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Variables:"
                      },
                      {
                        "type": "text",
                        "text": " Containers for storing data values. E.g., "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "x = 5"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Data Types:"
                      },
                      {
                        "type": "text",
                        "text": " Common types include integers ("
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "int"
                      },
                      {
                        "type": "text",
                        "text": "), floating-point numbers ("
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "float"
                      },
                      {
                        "type": "text",
                        "text": "), strings ("
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "str"
                      },
                      {
                        "type": "text",
                        "text": "), and lists ("
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "list"
                      },
                      {
                        "type": "text",
                        "text": ")."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Comments:"
                      },
                      {
                        "type": "text",
                        "text": " Use the "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "#"
                      },
                      {
                        "type": "text",
                        "text": " symbol to add comments to your code for explanation."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "# This is a comment\n\n# 1. Assigning variables\nmessage = \"Hello, Python!\"\ncount = 10\npi = 3.14\n\n# 2. Printing variables to the output\nprint(message)\nprint(count)\n\n# 3. A list of numbers\nmy_list = [1, 2, 3, 4, 5]\nprint(my_list)"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Anaconda provides a complete environment for Python data science."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Jupyter Notebooks are the primary tool for interactive data analysis."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We've covered the basics of Python variables, common data types, and comments."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Anaconda Distribution Installation",
          "url": "https://docs.anaconda.com/anaconda/install/"
        },
        {
          "title": "Jupyter Notebook for Beginners: A Tutorial",
          "url": "https://www.dataquest.io/blog/jupyter-notebook-tutorial/"
        },
        {
          "title": "Python Tutorial for Beginners",
          "url": "https://www.w3schools.com/python/default.asp"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 10,
      "title": "Introduction to Pandas: Series and DataFrames",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today we meet the star of Python data analysis: the Pandas library. Pandas provides high-performance, easy-to-use data structures and data analysis tools. We will focus on its two fundamental data structures: the "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Series"
              },
              {
                "type": "text",
                "text": " and the "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "DataFrame"
              },
              {
                "type": "text",
                "text": ". Understanding these is the key to unlocking everything else in Pandas."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Import the Pandas library into a Python script or notebook."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a Pandas Series from a Python list."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a Pandas DataFrame from a Python dictionary."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the relationship between Series, DataFrames, and SQL tables."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Importing Pandas:"
              },
              {
                "type": "text",
                "text": " By convention, Pandas is imported with the alias "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "pd"
              },
              {
                "type": "text",
                "text": ". The first line in your notebook will almost always be: "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "import pandas as pd"
              },
              {
                "type": "text",
                "text": "."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Pandas Series:"
              },
              {
                "type": "text",
                "text": " A one-dimensional labeled array capable of holding any data type. You can think of it as a single column in a spreadsheet or a single column from a SQL table. It has an index, which labels each element."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Pandas DataFrame:"
              },
              {
                "type": "text",
                "text": " A two-dimensional labeled data structure with columns of potentially different types. You can think of it as a spreadsheet, a SQL table, or a dictionary of Series objects. It is the most commonly used Pandas object."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "import pandas as pd\n\n# 1. Creating a Series from a list\nages = [25, 30, 22, 45]\ns_ages = pd.Series(ages)\nprint(\"--- Pandas Series ---\")\nprint(s_ages)\n\n# 2. Creating a DataFrame from a dictionary\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie'],\n    'City': ['New York', 'London', 'Paris']\n}\ndf = pd.DataFrame(data)\nprint(\"\\n--- Pandas DataFrame ---\")\nprint(df)"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Pandas is the core library for data manipulation in Python."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A Series is a 1D array, like a single column."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A DataFrame is a 2D table-like structure, like a full SQL table."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Pandas Documentation: Intro to data structures",
          "url": "https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html"
        },
        {
          "title": "A Quick Introduction to the 'Pandas' Python Library",
          "url": "https://www.dataquest.io/blog/pandas-python-tutorial/"
        },
        {
          "title": "Python Pandas Tutorial: A Complete Introduction for Beginners",
          "url": "https://www.learndatasci.com/tutorials/python-pandas-tutorial-complete-introduction-for-beginners/"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 11,
      "title": "Pandas: Data Loading and Inspection",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Manually creating DataFrames is fine for learning, but in the real world, data comes from external files. Today, we'll learn how to load data into a Pandas DataFrame from a CSV file, the most common data format. We'll also cover essential methods for inspecting a new dataset to quickly understand its structure and contents."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Load a CSV file into a Pandas DataFrame using pd.read_csv()."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use .head() and .tail() to preview the first and last rows."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use .info() to get a concise summary of the DataFrame."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use .describe() to generate descriptive statistics."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "pd.read_csv():"
              },
              {
                "type": "text",
                "text": " The primary function for reading a comma-separated values (CSV) file into a DataFrame. It's highly flexible with many parameters to handle different file formats."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "df.head(n):"
              },
              {
                "type": "text",
                "text": " Returns the first "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "n"
              },
              {
                "type": "text",
                "text": " rows of the DataFrame (default is 5). Essential for a quick glance at your data."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "df.info():"
              },
              {
                "type": "text",
                "text": " Prints a summary including the index dtype and columns, non-null values, and memory usage. This is your first stop for checking for missing data and incorrect data types."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "df.shape:"
              },
              {
                "type": "text",
                "text": " An attribute (not a method) that returns a tuple representing the dimensionality of the DataFrame (rows, columns)."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "df.describe():"
              },
              {
                "type": "text",
                "text": " Generates descriptive statistics that summarize the central tendency, dispersion, and shape of a dataset’s distribution, excluding NaN values. It works on numeric columns by default."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "import pandas as pd\n\n# Assume we have a file 'titanic.csv'\n# df = pd.read_csv('titanic.csv')\n\n# For demonstration, let's create a sample DataFrame\ndata = {'Age': [22, 38, 26, 35], 'Fare': [7.25, 71.28, 7.92, 53.1], 'Sex': ['male', 'female', 'female', 'male']}\ndf = pd.DataFrame(data)\n\n# 1. Inspect the first 2 rows\nprint(\"--- df.head(2) ---\")\nprint(df.head(2))\n\n# 2. Get the shape (rows, columns)\nprint(\"\\n--- df.shape ---\")\nprint(df.shape)\n\n# 3. Get a concise summary\nprint(\"\\n--- df.info() ---\")\ndf.info()\n\n# 4. Get descriptive statistics\nprint(\"\\n--- df.describe() ---\")\nprint(df.describe())"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "pd.read_csv()"
                      },
                      {
                        "type": "text",
                        "text": " to load data from CSV files."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Always start your analysis by inspecting the data with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".head()"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".info()"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".shape"
                      },
                      {
                        "type": "text",
                        "text": ", and "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".describe()"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Pandas read_csv() documentation",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html"
        },
        {
          "title": "Kaggle Titanic Dataset (for practice)",
          "url": "https://www.kaggle.com/c/titanic/data"
        },
        {
          "title": "Basic Data Inspection in Pandas",
          "url": "https://www.geeksforgeeks.org/python-pandas-dataframe-describe-method/"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 12,
      "title": "Pandas: Data Selection and Indexing",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Once data is loaded, the next step is to access specific parts of it. Pandas offers powerful and flexible ways to select subsets of your data. Today, we'll cover the main methods: selecting columns by name, and using the "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": ".loc"
              },
              {
                "type":- "text",
                "text": " and "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": ".iloc"
              },
              {
                "type": "text",
                "text": " indexers for label-based and integer-based selection. Mastering these is fundamental to data manipulation."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Select a single column or multiple columns from a DataFrame."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use .loc to select data by row and column labels."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use .iloc to select data by integer position."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Perform boolean indexing to filter data based on conditions."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Column Selection:"
              },
              {
                "type": "text",
                "text": " You can select a single column using square brackets "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "df['ColumnName']"
              },
              {
                "type": "text",
                "text": ", which returns a Series. To select multiple columns, pass a list of column names: "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "df[['Col1', 'Col2']]"
              },
              {
                "type": "text",
                "text": "."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": ".loc (Label-based selection):"
              },
              {
                "type": "text",
                "text": " Access a group of rows and columns by label(s) or a boolean array. The syntax is "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "df.loc[row_labels, column_labels]"
              },
              {
                "type": "text",
                "text": ". It is inclusive of the endpoint when slicing."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": ".iloc (Integer-based selection):"
              },
              {
                "type": "text",
                "text": " Access data by integer position. The syntax is "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "df.iloc[row_positions, column_positions]"
              },
              {
                "type": "text",
                "text": ". It is exclusive of the endpoint when slicing, just like standard Python lists."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Boolean Indexing:"
              },
              {
                "type": "text",
                "text": " You can filter a DataFrame by creating a boolean Series of True/False values based on a condition, and then passing it to the DataFrame. For example: "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "df[df['Age'] > 30]"
              },
              {
                "type": "text",
                "text": "."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "import pandas as pd\ndata = {'Name': ['Alice', 'Bob', 'Charlie', 'David'],\n        'Age': [25, 30, 35, 40],\n        'City': ['NY', 'LA', 'CHI', 'HOU']}\ndf = pd.DataFrame(data, index=['a', 'b', 'c', 'd'])\n\n# 1. Select the 'Age' column\nprint(df['Age'])\n\n# 2. Select rows 'a' and 'c' using .loc\nprint(df.loc[['a', 'c']])\n\n# 3. Select the first two rows using .iloc\nprint(df.iloc[0:2])\n\n# 4. Select the 'Name' and 'City' for the first two rows using .iloc\nprint(df.iloc[0:2, [0, 2]])\n\n# 5. Boolean indexing: Select people older than 30\nprint(df[df['Age'] > 30])"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "df['Column']"
                      },
                      {
                        "type": "text",
                        "text": " for selecting columns."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".loc"
                      },
                      {
                        "type": "text",
                        "text": " for label-based selection and "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".iloc"
                      },
                      {
                        "type": "text",
                        "text": " for position-based selection."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Boolean indexing is the standard way to filter rows based on data values."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Pandas Documentation: Indexing and selecting data",
          "url": "https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html"
        },
        {
          "title": "Python Pandas: .loc vs .iloc",
          "url": "https://www.geeksforgeeks.org/difference-between-loc-and-iloc-in-pandas-dataframe/"
        },
        {
          "title": "Pandas DataFrame Indexing",
          "url": "https://www.datacamp.com/community/tutorials/pandas-indexing"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 13,
      "title": "Pandas: Handling Missing Data",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Real-world data is messy. One of the most common problems is missing values, often represented as "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "NaN"
              },
              {
                "type": "text",
                "text": " (Not a Number). Handling these correctly is a critical step in data cleaning. Today we'll learn how to identify, remove, and fill in missing data using Pandas."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify missing values in a DataFrame using .isnull() and .sum()."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Remove rows or columns with missing values using .dropna()."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Fill missing values with a specific value or a calculated value (like the mean) using .fillna()."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Identifying Missing Data:"
              },
              {
                "type": "text",
                "text": " The "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": ".isnull()"
              },
              {
                "type": "text",
                "text": " (or "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": ".isna()"
              },
              {
                "type": "text",
                "text": ") method returns a DataFrame of booleans indicating where data is missing. A common pattern is to chain it with "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": ".sum()"
              },
              {
                "type": "text",
                "text": " to get a count of missing values per column: "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "df.isnull().sum()"
              },
              {
                "type": "text",
                "text": "."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Dropping Missing Data:"
              },
              {
                "type": "text",
                "text": " The "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": ".dropna()"
              },
              {
                "type": "text",
                "text": " method removes rows (by default) or columns that contain any missing values. This is a simple approach but can lead to significant data loss."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Filling Missing Data (Imputation):"
              },
              {
                "type": "text",
                "text": " The "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": ".fillna()"
              },
              {
                "type": "text",
                "text": " method is used to replace "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "NaN"
              },
              {
                "type": "text",
                "text": " values with something else. This can be a static value (like 0 or 'Unknown'), or a calculated value like the mean or median of the column, which is often a better strategy for numerical data."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "import pandas as pd\nimport numpy as np\n\ndata = {'A': [1, 2, np.nan, 4],\n        'B': [5, np.nan, np.nan, 8],\n        'C': ['x', 'y', 'z', 'a']}\ndf = pd.DataFrame(data)\n\n# 1. Check for missing values\nprint(\"--- Missing Values ---\")\nprint(df.isnull().sum())\n\n# 2. Drop rows with any missing values\nprint(\"\\n--- Dropped NA ---\")\nprint(df.dropna())\n\n# 3. Fill missing values in column 'A' with the mean\nmean_A = df['A'].mean()\ndf['A'].fillna(value=mean_A, inplace=True)\nprint(\"\\n--- Filled 'A' with Mean ---\")\nprint(df)"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "df.isnull().sum()"
                      },
                      {
                        "type": "text",
                        "text": " to quickly count missing values."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "You can either drop missing data with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".dropna()"
                      },
                      {
                        "type": "text",
                        "text": " or fill it with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".fillna()"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The strategy for handling missing data (dropping vs. filling) depends on the context and the amount of data that is missing."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Pandas Documentation: Working with missing data",
          "url": "https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html"
        },
        {
          "title": "A Guide to Handling Missing values in Python",
          "url": "https://www.geeksforgeeks.org/working-with-missing-data-in-pandas/"
        },
        {
          "title": "Creative Ways to Handle Missing Data",
          "url": "https://towardsdatascience.com/7-ways-to-handle-missing-values-in-machine-learning-1a63264c9d52"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 14,
      "title": "Pandas: Data Cleaning (Types, Duplicates)",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "We continue our focus on data cleaning, a process that often takes up the majority of an analyst's time. Beyond missing values, common issues include incorrect data types (e.g., numbers stored as strings) and duplicate records. Today, we'll learn the Pandas techniques to identify and fix these problems."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Check the data types of columns using .dtypes."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Convert a column to a different data type using .astype()."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify and remove duplicate rows using .duplicated() and .drop_duplicates()."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Data Types (dtypes):"
              },
              {
                "type": "text",
                "text": " Each column in a DataFrame has a specific data type, like "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "object"
              },
              {
                "type": "text",
                "text": " (for strings), "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "int64"
              },
              {
                "type": "text",
                "text": " (for integers), "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "float64"
              },
              {
                "type": "text",
                "text": " (for decimals), and "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "datetime64"
              },
              {
                "type": "text",
                "text": " (for dates/times). Having the correct dtype is essential for performing calculations and analysis. You can check them with the "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "df.dtypes"
              },
              {
                "type": "text",
                "text": " attribute."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": ".astype():"
              },
              {
                "type": "text",
                "text": " This method is used to cast a Pandas object to a specified dtype. For example, converting a column of strings that represent numbers into an actual numeric type: "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "df['Price'] = df['Price'].astype(float)"
              },
              {
                "type": "text",
                "text": "."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Handling Duplicates:"
              },
              {
                "type": "text",
                "text": " The "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": ".duplicated()"
              },
              {
                "type": "text",
                "text": " method returns a boolean Series indicating whether each row is a duplicate. The "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": ".drop_duplicates()"
              },
              {
                "type": "text",
                "text": " method returns a DataFrame with duplicate rows removed."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "import pandas as pd\n\ndata = {'ID': [1, 2, 3, 1],\n        'Name': ['A', 'B', 'C', 'A'],\n        'Value': ['100', '200', '300', '100']}\ndf = pd.DataFrame(data)\n\n# 1. Check initial data types\nprint(\"--- Initial Dtypes ---\")\nprint(df.dtypes)\n\n# 2. Convert 'Value' column from object (string) to integer\ndf['Value'] = df['Value'].astype(int)\nprint(\"\\n--- Converted Dtypes ---\")\nprint(df.dtypes)\n\n# 3. Check for duplicate rows\nprint(\"\\n--- Duplicated Rows ---\")\nprint(df.duplicated())\n\n# 4. Drop the duplicate rows\ndf_no_duplicates = df.drop_duplicates()\nprint(\"\\n--- DataFrame without Duplicates ---\")\nprint(df_no_duplicates)"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Data cleaning involves handling missing values, incorrect data types, and duplicates."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Check column types with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".dtypes"
                      },
                      {
                        "type": "text",
                        "text": " and change them with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".astype()"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Find and remove duplicate records with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".duplicated()"
                      },
                      {
                        "type": "text",
                        "text": " and "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".drop_duplicates()"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Pandas Data Types",
          "url": "https://pbpython.com/pandas_dtypes.html"
        },
        {
          "title": "Pandas drop_duplicates() Explained",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.drop_duplicates.html"
        },
        {
          "title": "🔴 Live SQL & Python Data Cleaning for Vietnam Client",
          "url": "https://youtube.com/watch?v=8lsb_WxmR2I&pp=ygWLKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IE1hc3RlciBQeXRob24tY2VudHJlZCBkYXRhIGFuYWx5dGljcyAoU1FMIOKGkiBQYW5kYXMg4oaSIGF1dG9tYXRpb24gcGlwZWxpbmVzKS4KICAgICAgICAgICAgVGl0bGUgKG9wdGlvbmFsKTogRGF0YSBBbmFseXRpY3MKICAgICAgICAgICAgRGVzY3JpcHRpb24gKG9wdGlvbmFsKTogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLgogICAgICAgICAgICBEaWZmaWN1bHR5OiBiZWdpbm5lcgogICAgICAgICAgICBUb3RhbCBEdXJhdGlvbiAoZGF5cyk6IDMwCiAgICAgICAgICAgIFByZXJlcXVpc2l0ZXM6IE5vbmUgc3BlY2lmaWVkCiAgICAgICAgICAgIFRpbWUgcGVyIERheSAobWludXRlcyk6IDYwCiAgICAgICAgICAgIExlYXJuaW5nIFN0eWxlOiBiYWxhbmNlZAogICAgICAgICAgICBOdW1iZXIgb2YgUHJvamVjdHM6IDQKICAgICAgICAgICAgCiAgICAgICAgICAgIFRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgd2l0aCBhIG1haW4gJ2N1cnJpY3VsdW1fdGl0bGUnIGFuZCAnY3VycmljdWx1bV9kZXNjcmlwdGlvbicsIAogICAgICAgICAgICBhbmQgYSBsaXN0IG9mICdkYXlzJy4gRWFjaCBkYXkgb2JqZWN0IGluIHRoZSBsaXN0IHNob3VsZCBoYXZlOgogICAgICAgICAgICAtICdkYXlfbnVtYmVyJyAoaW50KQogICAgICAgICAgICAtICd0aXRsZScgKHN0ciwgY29uY2lzZSB0aXRsZSBmb3IgdGhlIGRheSkKICAgICAgICAgICAgLSAnaXNfcHJvamVjdF9kYXknIChib29sLCB0cnVlIGlmIHRoaXMgZGF5IGlzIGEgcHJvamVjdCBkYXksIGZhbHNlIG90aGVyd2lzZSkKICAgICAgICAgICAgLSAncHJvamVjdF9kYXRhJyAoZGljdCwgb3B0aW9uYWwsIG9ubHkgaWYgaXNfcHJvamVjdF9kYXkgaXMgdHJ1ZS4gU2hvdWxkIGNvbnRhaW4gJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ29iamVjdGl2ZXMnLCAncmVxdWlyZW1lbnRzJywgJ2RlbGl2ZXJhYmxlcycsIGFuZCAnZXZhbHVhdGlvbl9jcml0ZXJpYScpCiAgICAgICAgICAgIC0gJ2NvbnRlbnQnIChkaWN0LCBUaXBUYXAvUHJvc2VNaXJyb3IgSlNPTiBvYmplY3QgZm9yIHRoZSBsZWFybmluZyBtb2R1bGUuIFRoaXMgb2JqZWN0IE1VU1QgaGF2ZSBhIHJvb3QgJ3R5cGUnOiAnZG9jJyBhbmQgYSAnY29udGVudCcgYXJyYXkuIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnRhaW4gYSBzZXF1ZW5jZSBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIGRheSdzIGxlc3Nvbi4gU3RydWN0dXJlIGVhY2ggZGF5J3MgbGVzc29uIGNvbnRlbnQgd2l0aCB0aGUgZm9sbG93aW5nIHNlY3Rpb25zLCB1c2luZyBhcHByb3ByaWF0ZSBUaXBUYXAvUHJvc2VNaXJyb3Igbm9kZXMgKGxpa2UgJ2hlYWRpbmcnIHdpdGggbGV2ZWxzIDEtMywgJ3BhcmFncmFwaCcsICdidWxsZXRMaXN0JywgJ29yZGVyZWRMaXN0JywgJ2xpc3RJdGVtJywgJ2NvZGVCbG9jaycgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCAndGV4dCcgbm9kZXMgd2l0aCBtYXJrcyBmb3IgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnKToKICAgICAgICAgICAgICAgIDEuICAiSW50cm9kdWN0aW9uIjogKFJlcXVpcmVkKSBBIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBkYXkncyB0b3BpYyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDIsIGZvbGxvd2VkIGJ5IG9uZSBvciB0d28gJ3BhcmFncmFwaCcgbm9kZXMpLgogICAgICAgICAgICAgICAgMi4gICJMZWFybmluZyBPYmplY3RpdmVzIjogKFJlcXVpcmVkKSAyLTQgY2xlYXIsIGFjdGlvbmFibGUgb2JqZWN0aXZlcyBmb3IgdGhlIGRheSAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUsIHdoZXJlIGVhY2ggJ2xpc3RJdGVtJyBjb250YWlucyBhICdwYXJhZ3JhcGgnIHdpdGggdGhlIG9iamVjdGl2ZSkuCiAgICAgICAgICAgICAgICAzLiAgIktleSBDb25jZXB0cyI6IChSZXF1aXJlZCkgRGV0YWlsZWQgZXhwbGFuYXRpb25zIG9mIHRoZSBjb3JlIGNvbmNlcHRzIGZvciB0aGUgZGF5LiBUaGlzIHNob3VsZCBiZSB0aGUgbW9zdCBzdWJzdGFudGlhbCBwYXJ0LiBVc2UgbXVsdGlwbGUgJ2hlYWRpbmcnIG5vZGVzIChsZXZlbCAzKSBmb3Igc3ViLXRvcGljcyBpZiBuZWVkZWQsIGZvbGxvd2VkIGJ5IGRldGFpbGVkICdwYXJhZ3JhcGgnIG5vZGVzLiBJbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSAnU3VwcG9ydGluZyBSZXNlYXJjaCcgKHdoaWNoIHdpbGwgYmUgcHJvdmlkZWQgdG8geW91KSB0byBtYWtlIHRoZXNlIGV4cGxhbmF0aW9ucyBjb21wcmVoZW5zaXZlLiBJZiBjb2RlIGV4YW1wbGVzIG9yIG1hdGhlbWF0aWNhbCBmb3JtdWxhcyBhcmUgcmVsZXZhbnQgYW5kIGZvdW5kIGluIHJlc2VhcmNoLCByZXByZXNlbnQgdGhlbSBhY2N1cmF0ZWx5LCBwZXJoYXBzIHdpdGhpbiAncGFyYWdyYXBoJyBub2RlcyBvciB1c2luZyAnY29kZUJsb2NrJyBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgICAgIDQuICAiRXhhbXBsZXMiOiAoT3B0aW9uYWwsIGJ1dCBoaWdobHkgZW5jb3VyYWdlZCkgMS0yIHdvcmtlZCBleGFtcGxlcyBvciBpbGx1c3RyYXRpdmUgc2NlbmFyaW9zIHJlbGF0ZWQgdG8gdGhlIGtleSBjb25jZXB0cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5ICdwYXJhZ3JhcGgnIG9yICdvcmRlcmVkTGlzdCcgbm9kZXMgZXhwbGFpbmluZyB0aGUgZXhhbXBsZSBzdGVwLWJ5LXN0ZXApLgogICAgICAgICAgICAgICAgNS4gICJTdW1tYXJ5IjogKFJlcXVpcmVkKSBBIGNvbmNpc2UgcmVjYXAgb2YgdGhlIGRheSdzIG1haW4gcG9pbnRzIChlLmcuLCBhICdoZWFkaW5nJyBub2RlIHdpdGggbGV2ZWwgMywgZm9sbG93ZWQgYnkgYSAnYnVsbGV0TGlzdCcgbm9kZSkuCiAgICAgICAgICAgICAgICBFbnN1cmUgYWxsIHRleHQgY29udGVudCBpcyB3ZWxsLXdyaXR0ZW4sIGNsZWFyLCBhbmQgZW5nYWdpbmcuCiAgICAgICAgICAgIC0gJ3Jlc291cmNlcycgKGxpc3Qgb2YgZGljdHMsIGVhY2ggd2l0aCAndGl0bGUnIGFuZCAndXJsJykKICAgICAgICAgICAgLSAnZXN0aW1hdGVkX2hvdXJzJyAoZmxvYXQsIG9wdGlvbmFsKQogICAgICAgICAgICAKICAgICAgICAgICAgRm9jdXMgb24gY3JlYXRpbmcgcHJhY3RpY2FsLCBhY3Rpb25hYmxlIGNvbnRlbnQgZm9yIGVhY2ggZGF5LgogICAgICAgICAgICBFbnN1cmUgdGhlIGN1cnJpY3VsdW0gc3BhbnMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cy4KICAgICAgICAgICAgCiAgICAgICAgICAgIENSSVRJQ0FMIElOU1RSVUNUSU9OUyBGT1IgUkVTT1VSQ0VTOgogICAgICAgICAgICAxLiBUaGUgU3VwcG9ydGluZyBSZXNlYXJjaCBzZWN0aW9uIHdpbGwgY29udGFpbiBZb3VUdWJlIHZpZGVvcyB3aXRoIGlkZW50aWZpZXJzIGxpa2UgW1lUMV0sIFtZVDJdLCBldGMuCiAgICAgICAgICAgIDIuIFlvdSBNVVNUIHVzZSB0aGVzZSBpZGVudGlmaWVycyBpbiB0aGUgJ3VybCcgZmllbGQgd2hlbiBhZGRpbmcgWW91VHViZSB2aWRlb3MgdG8gcmVzb3VyY2VzCiAgICAgICAgICAgIDMuIEZvciBleGFtcGxlOiB7InRpdGxlIjogIkludHJvZHVjdGlvbiB0byBSZWFjdCBIb29rcyIsICJ1cmwiOiAiW1lUM10ifQogICAgICAgICAgICA0LiBBbHNvIGluY2x1ZGUgbm9uLVlvdVR1YmUgcmVzb3VyY2VzIChhcnRpY2xlcywgZG9jdW1lbnRhdGlvbikgd2l0aCB0aGVpciBmdWxsIFVSTHMKICAgICAgICAgICAgNS4gRWFjaCBkYXkgc2hvdWxkIGhhdmUgMi00IHJlbGV2YW50IHJlc291cmNlcyBtaXhpbmcgWW91VHViZSB2aWRlb3MgYW5kIG90aGVyIHNvdXJjZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIFdoZW4gZ2VuZXJhdGluZyB0aGUgJ2NvbnRlbnQnIGZvciBlYWNoIGRheSwgdXRpbGl6ZSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSBhbG9uZyB3aXRoIHRoZXNlIHByZWZlcmVuY2VzKSB0byBtYWtlIHRoZSBleHBsYW5hdGlvbnMgYW5kIGNvbmNlcHRzIGFzIGRldGFpbGVkIGFuZCBhY2N1cmF0ZSBhcyBwb3NzaWJsZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIElNUE9SVEFOVDogSWYgbnVtX3Byb2plY3RzIGlzIGdyZWF0ZXIgdGhhbiAwLCBkaXN0cmlidXRlIHRoZSBwcm9qZWN0cyBldmVubHkgdGhyb3VnaG91dCB0aGUgY3VycmljdWx1bS4gRm9yIGV4YW1wbGU6CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTEgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHRoZSBwcm9qZWN0IGFyb3VuZCBkYXkgMjAtMjUKICAgICAgICAgICAgLSBJZiBudW1fcHJvamVjdHM9MiBhbmQgZHVyYXRpb249MzAgZGF5cywgcGxhY2UgcHJvamVjdHMgYXJvdW5kIGRheSAxMC0xMiBhbmQgZGF5IDIyLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTMgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgOC0xMCwgZGF5IDE2LTE4LCBhbmQgZGF5IDI0LTI2CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3IgcHJvamVjdCBkYXlzOgogICAgICAgICAgICAtIFNldCAnaXNfcHJvamVjdF9kYXknIHRvIHRydWUKICAgICAgICAgICAgLSBJbmNsdWRlIGEgJ3Byb2plY3RfZGF0YScgb2JqZWN0IHdpdGggY29tcHJlaGVuc2l2ZSBwcm9qZWN0IGRldGFpbHMKICAgICAgICAgICAgLSBUaGUgcHJvamVjdCBzaG91bGQgaW50ZWdyYXRlIGFuZCBhcHBseSBjb25jZXB0cyBsZWFybmVkIGluIHRoZSBwcmVjZWRpbmcgZGF5cwogICAgICAgICAgICAtIFByb2plY3RzIHNob3VsZCBiZSBwcmFjdGljYWwsIGhhbmRzLW9uIGFjdGl2aXRpZXMgdGhhdCByZWluZm9yY2UgbGVhcm5pbmcKICAgICAgICAgICAgLSBQcm9qZWN0IHRpdGxlcyBzaG91bGQgYmUgZGVzY3JpcHRpdmUgYnV0IG5vdCBvdmVybHkgcGxheWZ1bCAoZS5nLiwgIkJ1aWxkIGEgV2VhdGhlciBEYXRhIEFuYWx5emVyIiBub3QgIldlYXRoZXIgV2l6YXJkIDMwMDAiKQogICAgICAgICAgICA%3D"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 15,
      "title": "Project 2: Data Cleaning with Pandas",
      "is_project_day": true,
      "project_data": {
        "title": "Pandas Data Cleaning and Preparation",
        "description": "You've been given a 'dirty' dataset containing information about property sales. The data has numerous issues: missing values, incorrect data types, duplicate entries, and inconsistent formatting. Your task is to use Pandas to systematically clean the dataset and prepare it for future analysis.",
        "objectives": [
          "Load a messy dataset into a Pandas DataFrame.",
          "Systematically identify and document data quality issues.",
          "Apply techniques to handle missing values (dropping or imputing).",
          "Correct data types for key columns (e.g., prices, dates).",
          "Identify and remove duplicate records.",
          "Save the cleaned dataset to a new CSV file."
        ],
        "requirements": [
          "A Jupyter Notebook environment.",
          "A provided messy CSV dataset (e.g., a modified version of a real estate or sales dataset from Kaggle).",
          "The Pandas library."
        ],
        "deliverables": [
          "A well-commented Jupyter Notebook (.ipynb) that shows your entire cleaning process, step-by-step.",
          "The final, cleaned dataset saved as a new CSV file (e.g., 'property_sales_cleaned.csv').",
          "A short summary (in a markdown cell at the end of the notebook) describing the issues you found and how you resolved them."
        ],
        "evaluation_criteria": [
          "Thoroughness in identifying data quality problems.",
          "Appropriate application of Pandas cleaning functions (.dropna, .fillna, .astype, .drop_duplicates).",
          "Clarity and reproducibility of the code in the Jupyter Notebook.",
          "The quality and usability of the final cleaned dataset."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Day: Data Cleaning with Pandas"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "It's time for our second project! This project is all about applying the data cleaning and preparation skills you've developed over the last few days. You will be given a dataset with realistic problems and your goal is to transform it into a clean, reliable, and analysis-ready format."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Brief"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Please refer to the `project_data` for the full details. You will need to download the provided messy dataset and create a new Jupyter Notebook to begin."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Suggested Workflow"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Load and Inspect:"
                      },
                      {
                        "type": "text",
                        "text": " Load the CSV into a DataFrame. Use "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".head()"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".info()"
                      },
                      {
                        "type": "text",
                        "text": ", and "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".describe()"
                      },
                      {
                        "type": "text",
                        "text": " to get an initial understanding."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Handle Missing Values:"
                      },
                      {
                        "type": "text",
                        "text": " Use "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".isnull().sum()"
                      },
                      {
                        "type": "text",
                        "text": " to find columns with missing data. Decide on a strategy (drop or fill) for each and justify your choice in a comment."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Correct Data Types:"
                      },
                      {
                        "type": "text",
                        "text": " Check "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".dtypes"
                      },
                      {
                        "type": "text",
                        "text": ". Are prices stored as objects? Are dates stored as strings? Use "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".astype()"
                      },
                      {
                        "type": "text",
                        "text": " or "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "pd.to_datetime()"
                      },
                      {
                        "type": "text",
                        "text": " to fix them."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Remove Duplicates:"
                      },
                      {
                        "type": "text",
                        "text": " Check for and remove any fully duplicate rows."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Final Verification & Save:"
                      },
                      {
                        "type": "text",
                        "text": " Run "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".info()"
                      },
                      {
                        "type": "text",
                        "text": " one last time to ensure the data is clean. Then, save the final DataFrame to a new CSV file using "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "df.to_csv('cleaned_data.csv', index=False)"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Data Cleaning with Python and Pandas: Detecting Missing Values",
          "url": "https://realpython.com/python-data-cleaning-numpy-pandas/"
        },
        {
          "title": "Sample Messy Datasets on Kaggle",
          "url": "https://www.kaggle.com/datasets?search=messy"
        },
        {
          "title": "The Ultimate Guide to Data Cleaning",
          "url": "https://towardsdatascience.com/the-ultimate-guide-to-data-cleaning-3969843991d4"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 16,
      "title": "Pandas: Data Manipulation",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "With a clean dataset, we can now start manipulating and transforming it to create new insights. Today we'll cover how to add or modify columns, apply functions to your data, and combine different DataFrames together. These skills are essential for feature engineering and preparing data for more advanced analysis."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create new columns based on existing column data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the .apply() method to apply a function to a column."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Combine DataFrames using pd.merge() (similar to SQL JOIN)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Combine DataFrames using pd.concat()."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Creating New Columns:"
              },
              {
                "type": "text",
                "text": " You can create a new column by simply assigning a value or a Series to a new column name: "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "df['new_col'] = df['col1'] * 2"
              },
              {
                "type": "text",
                "text": "."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": ".apply():"
              },
              {
                "type": "text",
                "text": " This method applies a function along an axis of the DataFrame. It's most commonly used to apply a custom function to each element of a Series (a column). For example, you could write a function to categorize ages and apply it to the 'Age' column."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "pd.merge():"
              },
              {
                "type": "text",
                "text": " This is the Pandas equivalent of a SQL JOIN. It combines DataFrames based on common columns or indices. You can specify the type of merge (left, right, inner, outer), just like in SQL."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "pd.concat():"
              },
              {
                "type": "text",
                "text": " This function stacks multiple DataFrames on top of each other (row-wise) or side-by-side (column-wise). This is useful when you have data in the same format spread across multiple files."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "import pandas as pd\n\ndf = pd.DataFrame({'price': [10, 20], 'tax_rate': [0.05, 0.08]})\n\n# 1. Create a new column 'total_price'\ndf['total_price'] = df['price'] * (1 + df['tax_rate'])\nprint(\"--- New Column ---\")\nprint(df)\n\n# 2. Use .apply() with a lambda function to categorize price\ndf['price_category'] = df['price'].apply(lambda x: 'High' if x > 15 else 'Low')\nprint(\"\\n--- Applied Function ---\")\nprint(df)\n\n# 3. Merge example\ndf_customers = pd.DataFrame({'customer_id': [1, 2], 'name': ['Alice', 'Bob']})\ndf_orders = pd.DataFrame({'order_id': [101, 102], 'customer_id': [1, 2], 'amount': [100, 150]})\nmerged_df = pd.merge(df_customers, df_orders, on='customer_id', how='inner')\nprint(\"\\n--- Merged DataFrame ---\")\nprint(merged_df)"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "New columns can be created from existing data to add more information."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".apply()"
                      },
                      {
                        "type": "text",
                        "text": " method is a flexible way to perform complex, custom transformations."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "pd.merge()"
                      },
                      {
                        "type": "text",
                        "text": " for database-style joins and "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "pd.concat()"
                      },
                      {
                        "type": "text",
                        "text": " for stacking DataFrames."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Pandas Documentation: Merge, join, concatenate and compare",
          "url": "https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html"
        },
        {
          "title": "Applying a function to a Pandas column",
          "url": "https://www.geeksforgeeks.org/python-pandas-apply/"
        },
        {
          "title": "Creating New Columns in Pandas",
          "url": "https://www.dataquest.io/blog/settingwithcopywarning/"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 17,
      "title": "Exploratory Data Analysis (EDA) with Pandas",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Exploratory Data Analysis (EDA) is the process of using summary statistics and visualizations to better understand a dataset. It's about asking questions and discovering patterns. Today, we'll focus on the Pandas functions that are the workhorses of EDA, such as "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": ".value_counts()"
              },
              {
                "type": "text",
                "text": " for categorical data and "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": ".groupby()"
              },
              {
                "type": "text",
                "text": " for segmented analysis, which builds directly on our SQL knowledge."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use .value_counts() to get frequency counts of unique values in a Series."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the .groupby() method to split data into groups and apply aggregations."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Calculate correlation between numeric columns using .corr()."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": ".value_counts():"
              },
              {
                "type": "text",
                "text": " Returns a Series containing counts of unique values. This is an extremely useful tool for understanding the distribution of categorical variables. For example, "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "df['City'].value_counts()"
              },
              {
                "type": "text",
                "text": " would show how many customers are in each city."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": ".groupby():"
              },
              {
                "type": "text",
                "text": " This is the Pandas equivalent of SQL's "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "GROUP BY"
              },
              {
                "type": "text",
                "text": ". It involves splitting the data into groups based on some criteria, applying a function to each group independently (e.g., "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "sum"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "mean"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "count"
              },
              {
                "type": "text",
                "text": "), and combining the results into a data structure. For example, "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "df.groupby('Category')['Price'].mean()"
              },
              {
                "type": "text",
                "text": " would calculate the average price for each product category."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": ".corr():"
              },
              {
                "type": "text",
                "text": " Computes the pairwise correlation of columns, excluding NA/null values. Correlation indicates the extent to which two variables move in relation to each other. A value near +1 indicates a strong positive correlation, -1 a strong negative correlation, and 0 no correlation."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "import pandas as pd\n\ndata = {'Category': ['Fruit', 'Veg', 'Fruit', 'Veg', 'Fruit'],\n        'Item': ['Apple', 'Carrot', 'Banana', 'Broccoli', 'Orange'],\n        'Price': [1.2, 0.5, 0.8, 1.5, 1.0],\n        'Rating': [4.5, 4.0, 4.2, 3.8, 4.3]}\ndf = pd.DataFrame(data)\n\n# 1. Count items in each category\nprint(\"--- Value Counts ---\")\nprint(df['Category'].value_counts())\n\n# 2. Group by category and find the average price and rating\nprint(\"\\n--- GroupBy and Aggregate ---\")\nprint(df.groupby('Category').agg({'Price': 'mean', 'Rating': 'mean'}))\n\n# 3. Calculate the correlation matrix\nprint(\"\\n--- Correlation Matrix ---\")\nprint(df.corr())"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "EDA is about summarizing and understanding data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".value_counts()"
                      },
                      {
                        "type": "text",
                        "text": " for categorical distributions."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".groupby()"
                      },
                      {
                        "type": "text",
                        "text": " for segmented analysis, similar to SQL."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type":="text",
                        "text": "Use "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".corr()"
                      },
                      {
                        "type": "text",
                        "text": " to find linear relationships between numeric variables."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Pandas groupby() Explained",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html"
        },
        {
          "title": "Exploratory Data Analysis with Pandas",
          "url": "https://towardsdatascience.com/a-quick-and-easy-guide-to-exploratory-data-analysis-with-pandas-d575038597ce"
        },
        {
          "title": "Pandas value_counts()",
          "url": "https://www.geeksforgeeks.org/python-pandas-series-value_counts/"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 18,
      "title": "Introduction to Data Visualization with Matplotlib",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A picture is worth a thousand numbers. Data visualization is a critical part of data analysis, allowing us to see patterns and communicate findings in a way that tables of numbers cannot. Today we introduce Matplotlib, the foundational plotting library in Python. We'll learn the basic anatomy of a Matplotlib plot and create our first simple visualizations."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the basic components of a Matplotlib plot: Figure, Axes, and Plot."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a simple line plot and scatter plot from data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Add titles and labels to plots for clarity."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Pyplot:"
              },
              {
                "type": "text",
                "text": " Matplotlib's "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "pyplot"
              },
              {
                "type": "text",
                "text": " is a collection of functions that make Matplotlib work like MATLAB. It's the most common interface for creating plots and is conventionally imported as "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "plt"
              },
              {
                "type": "text",
                "text": "."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Anatomy of a Plot:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Figure:"
                      },
                      {
                        "type": "text",
                        "text": " The top-level container for all the plot elements. Think of it as the canvas."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Axes:"
                      },
                      {
                        "type": "text",
                        "text": " This is what we think of as 'a plot'. A figure can contain multiple axes. The axes contain the x-axis, y-axis, and the data points."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Basic Plotting Functions:"
              },
              {
                "type": "text",
                "text": " "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "plt.plot()"
              },
              {
                "type": "text",
                "text": " creates line plots, "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "plt.scatter()"
              },
              {
                "type": "text",
                "text": " creates scatter plots. We use "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "plt.title()"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "plt.xlabel()"
              },
              {
                "type": "text",
                "text": ", and "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "plt.ylabel()"
              },
              {
                "type": "text",
                "text": " to add labels. Finally, "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "plt.show()"
              },
              {
                "type": "text",
                "text": " displays the plot."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "import matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5]\ny1 = [2, 3, 5, 7, 11]\ny2 = [1, 4, 9, 16, 25]\n\n# 1. Create a line plot\nplt.plot(x, y1)\nplt.title('Prime Numbers')\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.show()\n\n# 2. Create a scatter plot\nplt.scatter(x, y2)\nplt.title('Squared Numbers')\nplt.xlabel('Base')\nplt.ylabel('Square')\nplt.show()"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Matplotlib is the core data visualization library in Python."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A Figure holds one or more Axes (plots)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We can create basic plots like line and scatter plots and customize them with titles and labels."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Matplotlib Pyplot Tutorial",
          "url": "https://matplotlib.org/stable/tutorials/pyplot.html"
        },
        {
          "title": "Python Matplotlib Tutorial with Examples",
          "url": "https://www.geeksforgeeks.org/python-matplotlib-tutorial/"
        },
        {
          "title": "The Anatomy of a Matplotlib Figure",
          "url": "https://realpython.com/python-matplotlib-guide/#the-anatomy-of-a-matplotlib-plot"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 19,
      "title": "Statistical Visualization with Seaborn",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "While Matplotlib is powerful, it can be verbose for creating common statistical plots. Seaborn is a library built on top of Matplotlib that provides a high-level interface for drawing attractive and informative statistical graphics. It integrates beautifully with Pandas DataFrames, making it easy to create complex visualizations with very little code."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the relationship between Seaborn and Matplotlib."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a histogram to view the distribution of a single variable."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a box plot to compare distributions across categories."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Seaborn:"
              },
              {
                "type": "text",
                "text": " A Python data visualization library based on Matplotlib. It provides a high-level interface for drawing statistical graphics. By convention, it is imported as "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "sns"
              },
              {
                "type": "text",
                "text": "."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Histogram (sns.histplot):"
              },
              {
                "type": "text",
                "text": " A classic visualization that shows the distribution of a single numerical variable by dividing the data into 'bins' and counting the number of observations in each bin."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Box Plot (sns.boxplot):"
              },
              {
                "type": "text",
                "text": " A standardized way of displaying the distribution of data based on a five-number summary: minimum, first quartile (Q1), median, third quartile (Q3), and maximum. It's excellent for comparing distributions between multiple groups."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "DataFrame Integration:"
              },
              {
                "type": "text",
                "text": " Most Seaborn functions take a "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "data"
              },
              {
                "type": "text",
                "text": " parameter (your DataFrame) and then you specify the columns to plot using their string names (e.g., "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "x='Age', y='Fare'"
              },
              {
                "type": "text",
                "text": "). This makes plotting directly from Pandas very straightforward."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Load a sample dataset from Seaborn\ntips = sns.load_dataset('tips')\n\n# 1. Create a histogram of the total bill amounts\nsns.histplot(data=tips, x='total_bill')\nplt.title('Distribution of Total Bill Amounts')\nplt.show()\n\n# 2. Create a box plot to compare total bill by day\nsns.boxplot(data=tips, x='day', y='total_bill')\nplt.title('Total Bill Distribution by Day of the Week')\nplt.show()"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Seaborn is a high-level library built on Matplotlib for statistical plotting."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "It simplifies the creation of common plots like histograms and box plots."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Seaborn works seamlessly with Pandas DataFrames."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Official Seaborn Tutorial",
          "url": "https://seaborn.pydata.org/tutorial.html"
        },
        {
          "title": "Python Seaborn Tutorial For Beginners",
          "url": "https://www.datacamp.com/community/tutorials/seaborn-python-tutorial"
        },
        {
          "title": "Seaborn vs. Matplotlib",
          "url": "https://www.geeksforgeeks.org/seaborn-vs-matplotlib/"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 20,
      "title": "Creating Various Plots with Seaborn",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Building on our introduction to Seaborn, today we'll expand our plotting vocabulary. We will learn to create different types of plots to answer different types of questions. We'll cover scatter plots to examine relationships, bar plots for comparing categorical data, and heatmaps for visualizing matrix-like data such as correlations."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a scatter plot with sns.scatterplot() to see the relationship between two numeric variables."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a bar plot with sns.barplot() to show central tendency for a numeric variable across categories."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a heatmap with sns.heatmap() to visualize a correlation matrix."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Scatter Plot (sns.scatterplot):"
              },
              {
                "type": "text",
                "text": " Shows the relationship between two continuous variables. Each point represents an observation. You can also encode a third variable using color or size ("
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "hue"
              },
              {
                "type": "text",
                "text": " or "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "size"
              },
              {
                "type": "text",
                "text": " parameters)."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Bar Plot (sns.barplot):"
              },
              {
                "type": "text",
                "text": " Presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent. By default, it shows the mean of a quantitative variable for each category, along with a confidence interval."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Heatmap (sns.heatmap):"
              },
              {
                "type": "text",
                "text": " A graphical representation of data where the individual values contained in a matrix are represented as colors. It's an excellent way to visualize a correlation matrix generated by "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "df.corr()"
              },
              {
                "type": "text",
                "text": "."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "import seaborn as sns\nimport matplotlib.pyplot as plt\n\ntips = sns.load_dataset('tips')\n\n# 1. Scatter plot of total bill vs tip amount, colored by day\nsns.scatterplot(data=tips, x='total_bill', y='tip', hue='day')\nplt.title('Total Bill vs. Tip Amount')\nplt.show()\n\n# 2. Bar plot showing the average tip amount per day\nsns.barplot(data=tips, x='day', y='tip')\nplt.title('Average Tip Amount by Day')\nplt.show()\n\n# 3. Heatmap of the correlation matrix for the numeric columns\ncorrelation_matrix = tips.corr()\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\nplt.title('Correlation Matrix of Tips Data')\nplt.show()"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Scatter plots are for visualizing the relationship between two numeric variables."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Bar plots are for comparing an aggregate of a numeric variable across different categories."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Heatmaps are ideal for visualizing matrices, especially correlation matrices."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Seaborn Plotting Functions",
          "url": "https://seaborn.pydata.org/api.html"
        },
        {
          "title": "Seaborn Scatter Plot Tutorial",
          "url": "https://seaborn.pydata.org/generated/seaborn.scatterplot.html"
        },
        {
          "title": "Seaborn Heatmap Tutorial",
          "url": "https://seaborn.pydata.org/generated/seaborn.heatmap.html"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 21,
      "title": "Customizing Visualizations",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Creating a basic plot is one thing; creating a publication-quality, easy-to-understand visualization is another. Today we'll focus on customization. Since Seaborn is built on Matplotlib, we can use Matplotlib's functions to fine-tune our Seaborn plots. We'll learn how to change figure sizes, adjust colors, modify labels, and save our plots to files."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Change the size of a plot using plt.figure()."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Customize colors and styles using Seaborn palettes and styles."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Add and modify titles, labels, and legends."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Save a plot to an image file using plt.savefig()."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Controlling Figure Size:"
              },
              {
                "type": "text",
                "text": " Before creating your plot, you can call "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "plt.figure(figsize=(width, height))"
              },
              {
                "type": "text",
                "text": " to set the dimensions of your plot in inches."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Seaborn Styles and Palettes:"
              },
              {
                "type": "text",
                "text": " Seaborn makes it easy to change the aesthetic of your plots. Use "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "sns.set_style()"
              },
              {
                "type": "text",
                "text": " (e.g., 'darkgrid', 'whitegrid') to change the background and grid. Use the "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "palette"
              },
              {
                "type": "text",
                "text": " parameter in plotting functions to change the color scheme (e.g., 'viridis', 'coolwarm')."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Saving Plots:"
              },
              {
                "type": "text",
                "text": " After you've created and customized your plot, but "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "italic"
                  }
                ],
                "text": "before"
              },
              {
                "type": "text",
                "text": " you call "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "plt.show()"
              },
              {
                "type": "text",
                "text": ", you can save it to a file with "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "plt.savefig('filename.png', dpi=300)"
              },
              {
                "type": "text",
                "text": ". The "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "dpi"
              },
              {
                "type": "text",
                "text": " (dots per inch) parameter controls the resolution."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "import seaborn as sns\nimport matplotlib.pyplot as plt\n\ntips = sns.load_dataset('tips')\n\n# Set a style for the plot\nsns.set_style('whitegrid')\n\n# 1. Set the figure size before plotting\nplt.figure(figsize=(10, 6))\n\n# 2. Create a box plot with a custom color palette\nsns.boxplot(data=tips, x='day', y='total_bill', palette='viridis')\n\n# 3. Add a more descriptive title and labels\nplt.title('Daily Distribution of Total Bill Amounts', fontsize=16)\nplt.xlabel('Day of the Week', fontsize=12)\nplt.ylabel('Total Bill ($)', fontsize=12)\n\n# 4. Save the figure before showing it\nplt.savefig('daily_bills.png', dpi=300)\n\n# 5. Show the plot\nplt.show()"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Customization is key to creating clear and professional visualizations."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use Matplotlib functions like "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "plt.figure()"
                      },
                      {
                        "type": "text",
                        "text": " and "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "plt.title()"
                      },
                      {
                        "type": "text",
                        "text": " to control the overall look and feel."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Seaborn provides easy options for styling with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "set_style()"
                      },
                      {
                        "type": "text",
                        "text": " and color "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "palette"
                      },
                      {
                        "type": "text",
                        "text": "s."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Save plots using "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "plt.savefig()"
                      },
                      {
                        "type": "text",
                        "text": " before calling "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "plt.show()"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Customizing Seaborn Plots",
          "url": "https://seaborn.pydata.org/tutorial/aesthetics.html"
        },
        {
          "title": "Choosing Color Palettes in Seaborn",
          "url": "https://seaborn.pydata.org/tutorial/color_palettes.html"
        },
        {
          "title": "Saving Matplotlib plots to file",
          "url": "https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.savefig.html"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 22,
      "title": "Project 3: Exploratory Data Analysis & Visualization",
      "is_project_day": true,
      "project_data": {
        "title": "EDA and Visualization of a Real-World Dataset",
        "description": "As a data analyst, you've been tasked with exploring a dataset of your choice (e.g., from Kaggle, a government data portal, etc.) and presenting your initial findings. This involves the full process: loading the data, cleaning it, performing exploratory analysis using Pandas, and creating compelling visualizations with Seaborn and Matplotlib to highlight key insights.",
        "objectives": [
          "Select and load a dataset of interest.",
          "Perform data cleaning and preparation using Pandas.",
          "Conduct exploratory data analysis to understand variables and their relationships.",
          "Formulate at least 3-4 interesting questions about the data.",
          "Create a variety of customized, high-quality visualizations to answer those questions.",
          "Summarize your findings in a clear, narrative format."
        ],
        "requirements": [
          "A Jupyter Notebook environment.",
          "A publicly available dataset (CSV format is easiest). Good sources include Kaggle, data.gov, or the UCI Machine Learning Repository.",
          "Pandas, Matplotlib, and Seaborn libraries."
        ],
        "deliverables": [
          "A single, comprehensive Jupyter Notebook (.ipynb) that tells the story of your analysis. It should include code, visualizations, and markdown cells with explanations.",
          "The notebook should be structured with clear sections for Data Loading, Cleaning, EDA, and a final Conclusion with your key takeaways."
        ],
        "evaluation_criteria": [
          "Quality of data cleaning and preparation.",
          "Depth of the exploratory analysis and the quality of questions asked.",
          "Appropriateness and quality of the visualizations created.",
          "Clarity of the narrative and the conclusions drawn from the analysis.",
          "Overall organization and readability of the Jupyter Notebook."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Day: Exploratory Data Analysis & Visualization"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This is our most comprehensive project yet! You will combine everything you've learned about Pandas, Matplotlib, and Seaborn to conduct a full exploratory data analysis on a dataset of your choosing. The goal is not just to run code, but to tell a story with data, from initial questions to visualized answers."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Brief"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Please see the `project_data` for the full assignment details. The first step is to find a dataset that interests you! This will make the project much more engaging. Think about your hobbies or interests: sports, movies, finance, health, etc. There's a dataset out there for almost anything."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Suggested Workflow"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Find and Load Data:"
                      },
                      {
                        "type": "text",
                        "text": " Browse Kaggle or other data sources. Download a CSV and load it into a notebook."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Clean and Prepare:"
                      },
                      {
                        "type": "text",
                        "text": " Apply the skills from Project 2. Handle missing values, check data types, remove duplicates, and maybe create a new feature column or two."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Explore and Ask Questions:"
                      },
                      {
                        "type": "text",
                        "text": " Use "
                      },
                      {
                        "type":="text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".describe()"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".value_counts()"
                      },
                      {
                        "type": "text",
                        "text": ", and "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".groupby()"
                      },
                      {
                        "type": "text",
                        "text": " to explore. Based on what you see, write down 3-4 specific questions you want to answer."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Visualize Your Answers:"
                      },
                      {
                        "type": "text",
                        "text": " For each question, choose the best plot type (bar, scatter, box, hist, etc.) to answer it. Use your customization skills to make the plots clear and visually appealing."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Summarize:"
                      },
                      {
                        "type": "text",
                        "text": " In a final markdown cell, write a conclusion that summarizes your key findings and answers your initial questions."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Kaggle Datasets",
          "url": "https://www.kaggle.com/datasets"
        },
        {
          "title": "Data.gov - U.S. Government's open data",
          "url": "https://data.gov/"
        },
        {
          "title": "A-Z of Data Visualization in Python",
          "url": "https://www.geeksforgeeks.org/a-z-of-data-visualization-in-python/"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 23,
      "title": "Review and Catch-up",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "We've covered a huge amount of ground, from SQL basics to advanced data visualization in Python. Today is a dedicated day to pause, review, and solidify your understanding. Use this time to go back over topics that were challenging, finish up the EDA project, or explore a concept in more depth. There is no new material today."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Review key SQL concepts: SELECT, GROUP BY, JOINs."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Review key Pandas concepts: DataFrames, selection, cleaning, grouping."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Review key visualization concepts: Matplotlib vs. Seaborn, common plot types."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Complete and refine Project 3."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts to Revisit"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "SQL:"
              },
              {
                "type": "text",
                "text": " What is the difference between WHERE and HAVING? When would you use a LEFT JOIN vs. an INNER JOIN?"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Pandas:"
              },
              {
                "type":="text",
                "text": " What is the difference between .loc and .iloc? What are the main strategies for handling missing data? How does Pandas' .groupby() relate to SQL's GROUP BY?"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Visualization:"
              },
              {
                "type": "text",
                "text": " When would you choose a histogram over a box plot? Why is Seaborn often preferred over Matplotlib for statistical plots?"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Today is for consolidation of knowledge from the first three modules."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Ensure your understanding of SQL, Pandas, and Visualization is solid before we move on to automation."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Take the time to make your Project 3 notebook as polished as possible."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Pandas Cheat Sheet",
          "url": "https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf"
        },
        {
          "title": "Seaborn Example Gallery",
          "url": "https://seaborn.pydata.org/examples/index.html"
        },
        {
          "title": "SQLZoo - Interactive SQL Practice",
          "url": "https://sqlzoo.net/wiki/SQL_Tutorial"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 24,
      "title": "Connecting Python to Databases",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Welcome to our final module: Automation and Pipelines! So far, we've worked with data from CSV files. In a professional setting, data almost always lives in a database. Today, we'll learn how to bridge the gap between our SQL and Python skills by connecting a Python script to a database to execute queries and fetch data directly into a Pandas DataFrame."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the role of database drivers and libraries like SQLAlchemy."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a database engine using SQLAlchemy's create_engine()."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use pd.read_sql() to execute a SQL query and load the results into a DataFrame."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "SQLAlchemy:"
              },
              {
                "type": "text",
                "text": " A popular SQL toolkit and Object-Relational Mapper (ORM) for Python. For our purposes, we will use its Core functionality to establish a connection to a database. It provides a consistent way to connect to many different types of databases (PostgreSQL, MySQL, SQLite, etc.)."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Database Engine:"
              },
              {
                "type": "text",
                "text": " The starting point for any SQLAlchemy application. It's an object that manages a pool of connections to a specific database. We create it using "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "create_engine()"
              },
              {
                "type": "text",
                "text": ", passing it a connection string that specifies the database type, driver, username, password, host, and database name."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "pd.read_sql():"
              },
              {
                "type": "text",
                "text": " A powerful Pandas function that reads the result of a SQL query directly into a DataFrame. It takes a SQL query string and a database connection object (like the one from SQLAlchemy) as arguments."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This example uses SQLite, which is a file-based database and doesn't require a separate server. We'll use the Chinook database from our SQL project."
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "import pandas as pd\nfrom sqlalchemy import create_engine\n\n# 1. Create a database engine\n# This assumes you have 'chinook.db' in the same directory\n# The format is 'dialect+driver://user:pass@host:port/database'\n# For SQLite, it's simpler: 'sqlite:///filename.db'\nengine = create_engine('sqlite:///chinook.db')\n\n# 2. Write a SQL query\nquery = \"\"\"\nSELECT \n    t.Name AS TrackName,\n    a.Title AS AlbumTitle,\n    ar.Name AS ArtistName\nFROM tracks t\nJOIN albums a ON t.AlbumId = a.AlbumId\nJOIN artists ar ON a.ArtistId = ar.ArtistId\nLIMIT 10;\n\"\"\"\n\n# 3. Use pd.read_sql to execute the query and load into a DataFrame\ndf = pd.read_sql(query, engine)\n\n# 4. Display the resulting DataFrame\nprint(df.head())"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "SQLAlchemy helps Python communicate with various databases in a standardized way."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We create a connection 'engine' that points to our database."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "pd.read_sql()"
                      },
                      {
                        "type": "text",
                        "text": " function is the perfect tool for pulling data from a SQL database directly into a Pandas DataFrame for analysis."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "SQLAlchemy 1.4/2.0 Tutorial",
          "url": "https://docs.sqlalchemy.org/en/14/tutorial/"
        },
        {
          "title": "pandas.read_sql documentation",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.read_sql.html"
        },
        {
          "title": "Using Databases with Python and Pandas",
          "url": "https://www.dataquest.io/blog/python-pandas-databases/"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 25,
      "title": "Writing Python Scripts for Data Processing",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Jupyter Notebooks are fantastic for exploration, but for automation and production, we need to write reusable Python scripts (.py files). Today, we'll learn how to take the logic from our notebooks and structure it into functions within a Python script. We'll also learn how to run these scripts from the command line and handle command-line arguments."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Convert notebook code into functions in a .py file."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand and use the `if __name__ == '__main__':` block."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Run a Python script from the command line."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Python Scripts (.py files):"
              },
              {
                "type": "text",
                "text": " A plain text file containing Python code. Unlike notebooks, scripts are executed from top to bottom by the Python interpreter and are the standard for creating applications and automation tasks."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Functions:"
              },
              {
                "type": "text",
                "text": " Reusable blocks of code that perform a specific task. By organizing our data processing steps into functions (e.g., "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "load_data()"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "clean_data()"
              },
              {
                "type": "text",
                "text": ", "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "save_data()"
              },
              {
                "type": "text",
                "text": "), we make our code more modular, readable, and testable."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The `__main__` block:"
              },
              {
                "type": "text",
                "text": " The line "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "if __name__ == '__main__':"
              },
              {
                "type": "text",
                "text": " is a standard convention in Python. Code inside this block will only run when the script is executed directly (not when it's imported as a module into another script). This is the perfect place to call your main processing functions."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Command Line Execution:"
              },
              {
                "type": "text",
                "text": " You can run a Python script from your terminal or command prompt using the command: "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "python your_script_name.py"
              },
              {
                "type": "text",
                "text": "."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Imagine a file named "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "process_data.py"
              },
              {
                "type": "text",
                "text": ":"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "import pandas as pd\n\ndef load_data(filepath):\n    \"\"\"Loads data from a CSV file.\"\"\"\n    print(f\"Loading data from {filepath}...\")\n    return pd.read_csv(filepath)\n\ndef clean_data(df):\n    \"\"\"A simple cleaning function.\"\"\"\n    print(\"Cleaning data...\")\n    df.dropna(inplace=True)\n    return df\n\ndef main():\n    \"\"\"Main function to run the data processing.\"\"\"\n    input_file = 'raw_data.csv'\n    output_file = 'cleaned_data.csv'\n    \n    raw_df = load_data(input_file)\n    cleaned_df = clean_data(raw_df)\n    \n    print(f\"Saving cleaned data to {output_file}...\")\n    cleaned_df.to_csv(output_file, index=False)\n    print(\"Done!\")\n\nif __name__ == '__main__':\n    main()"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Python scripts (.py files) are used for automation and building applications."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Organize your code into functions for reusability and clarity."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "if __name__ == '__main__':"
                      },
                      {
                        "type": "text",
                        "text": " block to control script execution."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Python Modules and Packages – An Introduction",
          "url": "https://realpython.com/python-modules-packages/"
        },
        {
          "title": "What does if __name__ == \"__main__\" do?",
          "url": "https://www.geeksforgeeks.org/what-does-if-__name__-__main__-do/"
        },
        {
          "title": "Running Python Scripts from the Command Line",
          "url": "https://realpython.com/run-python-scripts/"
        }
      ],
      "estimated_hours": 1
    },
    {
      "day_number": 26,
      "title": "Automating Data Extraction",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "We're now ready to start building the first stage of an automated pipeline: data extraction. We will combine the concepts from the last two days to create a robust Python script that connects to a database, runs a predefined SQL query, and extracts the data, saving it locally. We'll also discuss how to handle credentials securely."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Structure a Python script specifically for data extraction."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type":="text",
                        "text": "Read database credentials from a configuration file instead of hardcoding them."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Incorporate error handling to manage potential connection issues."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Configuration Files:"
              },
              {
                "type": "text",
                "text": " It is a very bad practice to write sensitive information like database passwords directly in your code. A better approach is to store them in a separate configuration file (e.g., a "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": ".ini"
              },
              {
                "type": "text",
                "text": " or "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": ".env"
              },
              {
                "type": "text",
                "text": " file) and have your script read from it. This separates configuration from code and improves security."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Error Handling (try...except):"
              },
              {
                "type": "text",
                "text": " What happens if the database is down or the credentials are wrong? Your script will crash. A robust script anticipates errors. We can use a "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "try...except"
              },
              {
                "type": "text",
                "text": " block to attempt the database connection and gracefully handle any exceptions (errors) that occur."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Let's create an "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "extract.py"
              },
              {
                "type": "text",
                "text": " script. We will assume a simple config file is not used for this example
--- End of Response ---

--- New Curriculum Generation ---
Curriculum ID: 1e4b7cf8-e6d8-42af-88d2-e5ffb063990d
Timestamp: 2025-07-12T07:25:08.444943
Raw Response:
```json
{
  "curriculum_title": "Data Analytics",
  "curriculum_description": "Master Python-centred data analytics (SQL → Pandas → automation pipelines).",
  "days": [
    {
      "day_number": 1,
      "title": "Introduction to Data Analytics & SQL",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Welcome to your first day! Today, we'll explore the world of data analytics. We'll understand what it is, why it's a crucial skill in today's world, and get a glimpse of the powerful tools you'll be learning, starting with SQL."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Define data analytics and its importance."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Describe the typical data analytics lifecycle."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain the role of SQL in data analytics."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "What is Data Analytics?"
              },
              {
                "type": "text",
                "text": " Data analytics is the science of analyzing raw data to make conclusions about that information. It involves applying an algorithmic or mechanical process to derive insights. For example, a company might analyze sales data to understand which products are most popular in different regions."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The Data Analytics Lifecycle:"
              },
              {
                "type": "text",
                "text": " This is a common framework for a data project: 1) Ask the right questions, 2) Prepare the data (collect, clean, format), 3) Process the data, 4) Analyze the data to find patterns, 5) Share the findings with stakeholders, and 6) Act on the insights."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Role of SQL:"
              },
              {
                "type": "text",
                "text": " SQL (Structured Query Language) is the language used to communicate with and manipulate databases. In data analytics, it's the primary tool for extracting the specific data you need from large, organized data stores called relational databases."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Data analytics turns raw data into actionable insights."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The process involves asking, preparing, processing, analyzing, sharing, and acting."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "SQL is the essential language for retrieving data from databases."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "What is Data Analytics? A Complete Guide for Beginners",
          "url": "https://careerfoundry.com/en/blog/data-analytics/what-is-data-analytics/"
        },
        {
          "title": "SQL for Beginners Tutorial",
          "url": "https://www.youtube.com/watch?v=HXV3zeQKqGY"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 2,
      "title": "Your First Database: Setting Up SQL",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Theory is great, but data analytics is a hands-on skill. Today, you'll set up your own local database environment. This will be your sandbox for learning and practicing SQL for the next week."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the concept of a relational database (tables, columns, rows)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Install a SQL database browser (DB Browser for SQLite)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Load a sample database and run your first query."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Relational Databases:"
              },
              {
                "type": "text",
                "text": " Data is stored in tables, which are like spreadsheets. Each table has columns (attributes, like 'FirstName' or 'Price') and rows (records, representing a single item like a customer or a product)."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "SQLite:"
              },
              {
                "type": "text",
                "text": " A simple, serverless, self-contained database engine. The entire database is stored in a single file on your computer, making it perfect for learning and small projects."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "DB Browser for SQLite:"
              },
              {
                "type": "text",
                "text": " A user-friendly graphical tool that lets you create, view, and edit SQLite database files. It has a window for writing and running SQL queries."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Download and install DB Browser for SQLite from their official website."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Download the sample 'Chinook' database file (a popular choice for learning SQL)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Open DB Browser, click 'Open Database', and select the Chinook file you downloaded."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Go to the 'Execute SQL' tab and type your first query:"
                      }
                    ]
                  },
                  {
                    "type": "codeBlock",
                    "attrs": {
                      "language": "sql"
                    },
                    "content": [
                      {
                        "type": "text",
                        "text": "SELECT * FROM artists;"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Press the 'Execute' button (often a play icon) and see the results!"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A hands-on environment is critical for learning SQL."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "SQLite and DB Browser provide a simple, free, and powerful setup for practice."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "You have successfully loaded a database and executed a real SQL query."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "DB Browser for SQLite",
          "url": "https://sqlitebrowser.org/dl/"
        },
        {
          "title": "Chinook Sample Database",
          "url": "https://www.sqlitetutorial.net/sqlite-sample-database/"
        },
        {
          "title": "Getting Started with DB Browser for SQLite",
          "url": "https://www.youtube.com/watch?v=sI__aFCH33o"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 3,
      "title": "Querying Data: SELECT and WHERE",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today you'll learn the two most fundamental clauses in SQL: `SELECT` and `WHERE`. `SELECT` is used to choose the columns you want to see, and `WHERE` is used to filter the rows based on specific conditions. Mastering these is the first step to asking questions of your data."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write `SELECT` statements to retrieve all columns or specific columns."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the `WHERE` clause to filter data based on conditions."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Apply common operators like `=`, `!=`, `>`, `<`, `LIKE`, and `IN`."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The SELECT Statement:"
              },
              {
                "type": "text",
                "text": " The basic structure is `SELECT column1, column2 FROM table_name;`. To select all columns, you can use the wildcard `*`: `SELECT * FROM table_name;`."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The WHERE Clause:"
              },
              {
                "type": "text",
                "text": " This is added after the `FROM` clause to filter rows. For example, `WHERE Country = 'USA'` will only return rows where the 'Country' column has the value 'USA'."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Operators:"
              },
              {
                "type": "text",
                "text": " You can use standard comparison operators (`=`, `!=` or `<>`, `>`, `<`, `>=`, `<=`) for exact and numerical comparisons. For pattern matching in text, use `LIKE` (e.g., `WHERE Name LIKE 'A%'` finds all names starting with 'A'). To check against a list of values, use `IN` (e.g., `WHERE Country IN ('USA', 'Canada')`)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "1. Get the names and composers of all tracks:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT Name, Composer FROM tracks;"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "2. Find all customer information for customers in Brazil:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT * FROM customers WHERE Country = 'Brazil';"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "3. Find all invoices with a total greater than 10:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT * FROM invoices WHERE Total > 10;"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "`SELECT` specifies the columns you want to retrieve."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "`WHERE` filters the rows based on one or more conditions."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A variety of operators can be used in the `WHERE` clause for powerful filtering."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "W3Schools SQL SELECT Statement",
          "url": "https://www.w3schools.com/sql/sql_select.asp"
        },
        {
          "title": "W3Schools SQL WHERE Clause",
          "url": "https://www.w3schools.com/sql/sql_where.asp"
        },
        {
          "title": "SQL Tutorial - SELECT and WHERE",
          "url": "https://www.youtube.com/watch?v=p336M39_33I"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 4,
      "title": "Sorting and Limiting Results",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Retrieving data is useful, but often we need to see it in a specific order, like highest price first, or alphabetically. We also might not need all 10,000 rows, just the top 10. Today, you'll learn `ORDER BY` and `LIMIT` to control the presentation of your query results."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `ORDER BY` to sort results by one or more columns."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Specify ascending (`ASC`) and descending (`DESC`) sort orders."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `LIMIT` to restrict the number of rows returned."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "ORDER BY:"
              },
              {
                "type": "text",
                "text": " This clause is used to sort the result set in ascending or descending order. It comes after the `WHERE` clause (if present). The default sort order is ascending (`ASC`). To sort in reverse, you must specify `DESC`."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Multi-column Sorting:"
              },
              {
                "type": "text",
                "text": " You can sort by multiple columns. The database will sort by the first column, and then for any rows with the same value in the first column, it will sort them by the second column. Example: `ORDER BY Country ASC, City DESC`."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "LIMIT:"
              },
              {
                "type": "text",
                "text": " This clause specifies the maximum number of rows to return. It is usually the last clause in a query. This is extremely useful for finding 'top N' records, like the 10 most expensive products."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "1. Get all customers, ordered by their country:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT * FROM customers ORDER BY Country;"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "2. Find the 5 largest invoices by total amount:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT * FROM invoices ORDER BY Total DESC LIMIT 5;"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "`ORDER BY` sorts your results."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "`ASC` is for ascending (A-Z, 1-10) and `DESC` is for descending (Z-A, 10-1)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "`LIMIT` restricts the number of rows returned, perfect for finding top/bottom records."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "SQL ORDER BY Keyword",
          "url": "https://www.w3schools.com/sql/sql_orderby.asp"
        },
        {
          "title": "SQL LIMIT Clause",
          "url": "https://www.w3schools.com/sql/sql_limit.asp"
        },
        {
          "title": "SQL ORDER BY and LIMIT explained in 5 minutes",
          "url": "https://www.youtube.com/watch?v=F2_3U42G3iU"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 5,
      "title": "Aggregating Data: COUNT, SUM, AVG, MIN, MAX",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "So far, we've only retrieved existing rows of data. The real power of analytics comes from summarizing information. SQL's aggregate functions allow you to perform calculations across many rows to get a single summary value, like the total number of customers or the average price of a product."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the purpose of aggregate functions."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `COUNT`, `SUM`, `AVG`, `MIN`, and `MAX` to summarize data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the `AS` keyword to create aliases for aggregated columns."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Aggregate Functions:"
              },
              {
                "type": "text",
                "text": " These functions operate on a set of rows and return a single summary value."
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "COUNT(column):"
                      },
                      {
                        "type": "text",
                        "text": " Counts the number of non-null rows. `COUNT(*)` counts all rows."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "SUM(column):"
                      },
                      {
                        "type": "text",
                        "text": " Calculates the sum of values in a numeric column."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "AVG(column):"
                      },
                      {
                        "type": "text",
                        "text": " Calculates the average of values in a numeric column."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "MIN(column):"
                      },
                      {
                        "type": "text",
                        "text": " Finds the minimum value in a column."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "MAX(column):"
                      },
                      {
                        "type": "text",
                        "text": " Finds the maximum value in a column."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "AS (Alias):"
              },
              {
                "type": "text",
                "text": " When you use an aggregate function, the resulting column name can be ugly (e.g., `SUM(Total)`). You can rename it in the output using `AS`. Example: `SELECT SUM(Total) AS TotalSales FROM invoices;`."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "1. How many customers are there in the USA?"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT COUNT(*) AS USACustomerCount FROM customers WHERE Country = 'USA';"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "2. What is the total, average, minimum, and maximum amount for all invoices?"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT\n  SUM(Total) AS TotalRevenue,\n  AVG(Total) AS AverageInvoice,\n  MIN(Total) AS SmallestInvoice,\n  MAX(Total) AS LargestInvoice\nFROM invoices;"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Aggregate functions summarize data from multiple rows into a single result."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The five key functions are `COUNT`, `SUM`, `AVG`, `MIN`, and `MAX`."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `AS` to give meaningful names to your summary columns."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "SQL Aggregate Functions",
          "url": "https://www.w3schools.com/sql/sql_aggr.asp"
        },
        {
          "title": "SQL Aliases",
          "url": "https://www.w3schools.com/sql/sql_alias.asp"
        },
        {
          "title": "SQL Aggregate Functions (COUNT, SUM, AVG) - Tutorial",
          "url": "https://www.youtube.com/watch?v=kdvG7x_a-Fw"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 6,
      "title": "Grouping Data with GROUP BY",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Aggregate functions are powerful, but they become even more so when combined with the `GROUP BY` clause. This allows you to divide rows into groups and perform an aggregate function on each group separately. For example, instead of the total number of customers, you can find the number of customers *per country*."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain the function of the `GROUP BY` clause."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write queries that use `GROUP BY` with aggregate functions."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Filter groups using the `HAVING` clause."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "GROUP BY:"
              },
              {
                "type": "text",
                "text": " The `GROUP BY` statement groups rows that have the same values in specified columns into summary rows. It is often used with aggregate functions to group the result-set by one or more columns. The `GROUP BY` clause comes after `WHERE` but before `ORDER BY`."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "HAVING:"
              },
              {
                "type": "text",
                "text": " The `WHERE` clause is used to filter rows *before* any grouping happens. But what if you want to filter based on the result of an aggregate function? That's what `HAVING` is for. It filters the *groups* after they have been created. For example, find all countries `HAVING` a customer count greater than 5."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "1. Find the number of customers in each country:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT Country, COUNT(*) AS CustomerCount\nFROM customers\nGROUP BY Country\nORDER BY CustomerCount DESC;"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "2. Find the total sales for each country, but only show countries with total sales over $40:"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "sql"
            },
            "content": [
              {
                "type": "text",
                "text": "SELECT BillingCountry, SUM(Total) AS TotalSales\nFROM invoices\nGROUP BY BillingCountry\nHAVING SUM(Total) > 40\nORDER BY TotalSales DESC;"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "`GROUP BY` creates summary rows for each unique value in a column."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "It is almost always used with aggregate functions like `COUNT()` or `SUM()`."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "`WHERE` filters individual rows, `HAVING` filters the aggregated groups."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "SQL GROUP BY Statement",
          "url": "https://www.w3schools.com/sql/sql_groupby.asp"
        },
        {
          "title": "SQL HAVING Clause",
          "url": "https://www.w3schools.com/sql/sql_having.asp"
        },
        {
          "title": "GROUP BY and HAVING In SQL: A Clear Explanation",
          "url": "https://www.youtube.com/watch?v=13m7a_iI2dM"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 7,
      "title": "Project 1: Basic SQL Database Exploration",
      "is_project_day": true,
      "project_data": {
        "title": "Basic SQL Database Exploration",
        "description": "You've been given access to the database of a digital music store (the Chinook database). Your task is to act as a junior data analyst and answer several business questions by writing SQL queries to extract meaningful information.",
        "objectives": [
          "Apply knowledge of `SELECT` and `WHERE` to filter data.",
          "Use `ORDER BY` and `LIMIT` to find top records.",
          "Utilize aggregate functions (`COUNT`, `SUM`) to summarize data.",
          "Practice using `GROUP BY` to create summary reports."
        ],
        "requirements": [
          "Use the Chinook sample database and DB Browser for SQLite.",
          "Create a single `.sql` file to store all your queries.",
          "Add a comment above each query explaining the business question it answers."
        ],
        "deliverables": [
          "A single `.sql` file containing the queries for all the tasks below.",
          "Task 1: Find the top 10 longest tracks in the database. Show the track name and its length (in milliseconds).",
          "Task 2: Find all invoices for customers in 'USA', 'Canada', and 'Brazil'. Show the full invoice details.",
          "Task 3: How many tracks are there for each music genre? Show the genre name and the count of tracks, ordered by the count in descending order.",
          "Task 4: Which artists have the most albums? List the top 5 artists and the number of albums they have.",
          "Task 5: What is the total revenue generated by each country? List the country and their total invoice amount, ordered from highest to lowest."
        ],
        "evaluation_criteria": [
          "Correctness: Do the queries produce the correct results?",
          "Clarity: Is the SQL code well-formatted and easy to read?",
          "Completeness: Are all tasks addressed?",
          "Commenting: Is each query preceded by a clear comment explaining its purpose?"
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "It's time for your first project! Today, you'll consolidate everything you've learned about SQL this week. You will query the Chinook database to answer real business questions, putting your new skills into practice."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Brief"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Please see the detailed project information in the 'project_data' section. Your goal is to write a series of SQL queries to analyze the music store's data. This is a practical exercise in data extraction and basic reporting."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Tips for Success"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explore the database schema first. In DB Browser, look at the 'Database Structure' tab to understand the tables and their columns."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Build your queries step-by-step. Start with a simple `SELECT * FROM table` and then add `WHERE`, `GROUP BY`, `ORDER BY`, and `LIMIT` clauses one at a time."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Don't be afraid to experiment. If a query doesn't work, read the error message and try to figure out what's wrong."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type":- "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Refer back to the lessons from the past few days if you get stuck."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Chinook Database Schema",
          "url": "https://www.sqlitetutorial.net/sqlite-sample-database/"
        },
        {
          "title": "SQL Comments",
          "url": "https://www.w3schools.com/sql/sql_comment.asp"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 8,
      "title": "Introduction to Python for Data Analytics",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Welcome to the next phase of your journey! While SQL is excellent for getting data out of a database, Python is the swiss-army knife for everything else: cleaning, transforming, analyzing, and visualizing data. Today we'll introduce Python and set up your environment for data analytics."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand why Python is a dominant language in data science."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Install Anaconda, the standard Python distribution for data science."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Learn about Jupyter Notebooks and run your first Python code."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Why Python?"
              },
              {
                "type": "text",
                "text": " Python is popular for its simple syntax, extensive collection of libraries (like Pandas, NumPy, Matplotlib), and strong community support. It allows you to go from data extraction to a full report or even a machine learning model all in one language."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Anaconda:"
              },
              {
                "type": "text",
                "text": " A free and open-source distribution of Python and R. It simplifies package management and deployment. Crucially, it comes pre-loaded with all the essential data science packages, so you don't have to install them one by one."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Jupyter Notebook:"
              },
              {
                "type": "text",
                "text": " An interactive, web-based tool that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. It's the standard environment for exploratory data analysis because you can run small chunks of code (in 'cells') and see the output immediately."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Python is a powerful, versatile language for data analytics."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Anaconda simplifies the setup process by bundling Python and key libraries."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Jupyter Notebooks are the ideal environment for interactive data exploration."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Anaconda Distribution",
          "url": "https://www.anaconda.com/products/distribution"
        },
        {
          "title": "Jupyter Notebook for Beginners: A Tutorial",
          "url": "https://www.dataquest.io/blog/jupyter-notebook-tutorial/"
        },
        {
          "title": "Python for Data Science - Course for Beginners",
          "url": "https://www.youtube.com/watch?v=LHBE6Q9XlzI"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 9,
      "title": "Python Basics: Variables, Data Types, and Lists",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Before we can analyze data, we need to understand the basic building blocks of the Python language. Today, we'll cover how to store information in variables, the different types of data Python handles, and how to work with lists, a fundamental data structure."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create and assign values to variables."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify and use common data types: integers, floats, strings, and booleans."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create lists, access elements, and perform basic list operations."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Variables:"
              },
              {
                "type": "text",
                "text": " A name that refers to a value. You create a variable with an assignment statement, like `x = 10` or `name = 'Alice'`."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Data Types:"
              },
              {
                "type": "text",
                "text": " Python has several built-in types. The most common are `int` (integers, e.g., 10), `float` (floating-point numbers, e.g., 3.14), `str` (strings/text, e.g., 'hello'), and `bool` (booleans, `True` or `False`)."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Lists:"
              },
              {
                "type": "text",
                "text": " An ordered collection of items, created with square brackets `[]`. Example: `my_list = [1, 'apple', 3.14]`. You can access elements by their index (starting from 0), e.g., `my_list[0]` would give you `1`."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "# Variable assignment\nitem_name = 'Laptop'\nprice = 999.99\nquantity = 2\nis_in_stock = True\n\n# A list of customer names\ncustomer_names = ['Alice', 'Bob', 'Charlie']\n\n# Accessing the first customer\nfirst_customer = customer_names[0]\n\n# Printing the values\nprint(f'Item: {item_name}')\nprint(f'First Customer: {first_customer}')"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Variables store data under a memorable name."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Core data types include integers, floats, strings, and booleans."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Lists are ordered, mutable collections of items."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Python Variables",
          "url": "https://www.w3schools.com/python/python_variables.asp"
        },
        {
          "title": "Python Data Types",
          "url": "https://www.w3schools.com/python/python_datatypes.asp"
        },
        {
          "title": "Python Lists",
          "url": "https://www.w3schools.com/python/python_lists.asp"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 10,
      "title": "Introduction to Pandas: Series and DataFrames",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Meet Pandas, the most important Python library for data analytics. Pandas provides high-performance, easy-to-use data structures and data analysis tools. Today, you'll learn about its two core components: the Series and the DataFrame, which will be the foundation for all our data manipulation tasks."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the purpose of the Pandas library."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a Pandas Series."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a Pandas DataFrame from a dictionary."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Pandas:"
              },
              {
                "type": "text",
                "text": " A fast, powerful, flexible and easy to use open source data analysis and manipulation tool, built on top of the Python programming language."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Series:"
              },
              {
                "type": "text",
                "text": " A one-dimensional labeled array capable of holding any data type. You can think of it as a single column in a spreadsheet. It has an index, which labels each element."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "DataFrame:"
              },
              {
                "type": "text",
                "text": " A two-dimensional labeled data structure with columns of potentially different types. You can think of it as a spreadsheet, an SQL table, or a dictionary of Series objects. It is the most commonly used pandas object."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "import pandas as pd\n\n# Creating a Series\ns = pd.Series([1, 3, 5, 7, 9], name='Odd Numbers')\nprint('--- PANDAS SERIES ---')\nprint(s)\n\n# Creating a DataFrame from a dictionary\ndata = {'Country': ['USA', 'Canada', 'Mexico'],\n        'Population': [331, 38, 128]}\ndf = pd.DataFrame(data)\nprint('\\n--- PANDAS DATAFRAME ---')\nprint(df)"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Pandas is the go-to library for data manipulation in Python."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A Series is a 1D array (a single column)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A DataFrame is a 2D table (like a spreadsheet)."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Pandas Documentation",
          "url": "https://pandas.pydata.org/docs/"
        },
        {
          "title": "10 Minutes to pandas",
          "url": "https://pandas.pydata.org/docs/user_guide/10min.html"
        },
        {
          "title": "Complete Python Pandas Data Science Tutorial!",
          "url": "https://www.youtube.com/watch?v=vmEHCJofslg"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 11,
      "title": "Loading Data into Pandas",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Creating DataFrames by hand is good for learning, but in the real world, data comes from files. The most common file format for tabular data is CSV (Comma-Separated Values). Today, you'll learn how to load data from a CSV file directly into a Pandas DataFrame, a crucial first step in any analysis project."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the structure of a CSV file."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the `pd.read_csv()` function to load data into a DataFrame."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use basic inspection methods like `.head()`, `.tail()`, and `.shape`."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "CSV Files:"
              },
              {
                "type": "text",
                "text": " A plain text file where values are separated by a delimiter, usually a comma. The first line often contains the column headers."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "pd.read_csv():"
              },
              {
                "type": "text",
                "text": " The primary Pandas function for reading data from a CSV file. Its only required argument is the file path. It has dozens of optional parameters to handle different CSV formats."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Initial Inspection:"
              },
              {
                "type": "text",
                "text": " After loading data, you always want to check it. `.head(n)` shows the first n rows (default 5). `.tail(n)` shows the last n rows. The `.shape` attribute gives you a tuple of (number of rows, number of columns)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "First, find a sample CSV online, like one from Kaggle Datasets, and save it in the same directory as your Jupyter Notebook."
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "import pandas as pd\n\n# Load the data from a CSV file\n# Replace 'your_dataset.csv' with the actual filename\ndf = pd.read_csv('your_dataset.csv')\n\n# Inspect the data\nprint('--- First 5 Rows ---')\nprint(df.head())\n\nprint('\\n--- Data Shape (Rows, Columns) ---')\nprint(df.shape)"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Real-world data often comes in files like CSVs."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "`pd.read_csv()` is the function to load this data into a DataFrame."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Always inspect your newly loaded data using `.head()` and `.shape`."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "pandas.read_csv documentation",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html"
        },
        {
          "title": "Kaggle Datasets (for finding sample CSVs)",
          "url": "https://www.kaggle.com/datasets"
        },
        {
          "title": "Reading CSV files with Pandas",
          "url": "https://www.youtube.com/watch?v=5r_5qWDC_o4"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 12,
      "title": "Inspecting a DataFrame",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Once data is loaded, the next step is to understand its structure and content. This is a key part of Exploratory Data Analysis (EDA). Today, you'll learn more powerful methods for inspecting a DataFrame to check data types, find missing values, and get summary statistics."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `.info()` to get a concise summary of the DataFrame."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `.describe()` to generate descriptive statistics."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Access the `.columns` and `.dtypes` attributes."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "df.info():"
              },
              {
                "type": "text",
                "text": " This method prints information about a DataFrame including the index dtype and columns, non-null values and memory usage. It's the best way to quickly check for missing data and see if columns have the correct data type."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "df.describe():"
              },
              {
                "type": "text",
                "text": " Generates descriptive statistics that summarize the central tendency, dispersion and shape of a dataset’s distribution, excluding NaN values. It provides count, mean, std, min, max, and quartiles for numeric columns."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Attributes:"
              },
              {
                "type": "text",
                "text": " `.columns` returns a list of the column labels. `.dtypes` returns the data type of each column."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "python"
            },
            "content": [
              {
                "type": "text",
                "text": "import pandas as pd\n\n# Assume df is already loaded from a CSV\n# df = pd.read_csv('your_dataset.csv')\n\n# Example DataFrame\ndata = {'age': [25, 30, 35, 40, None], 'salary': [50000, 60000, 70000, 80000, 90000]}\ndf = pd.DataFrame(data)\n\nprint('--- DataFrame Info ---')\ndf.info()\n\nprint('\\n--- Descriptive Statistics ---')\nprint(df.describe())"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "`.info()` is your first stop for checking data types and null values."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "`.describe()` provides a quick statistical summary of your numeric data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Thoroughly inspecting your data is a non-negotiable step before analysis."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "pandas.DataFrame.info",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.info.html"
        },
        {
          "title": "pandas.DataFrame.describe",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html"
        },
        {
          "title": "Exploratory Data Analysis with Pandas",
          "url": "https://www.youtube.com/watch?v=xi0vhXFPcFg"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 13,
      "title": "Selection and Indexing in Pandas",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Just like with SQL's `SELECT` and `WHERE`, a huge part of working with data is selecting the specific subsets you need. Pandas offers powerful and flexible ways to select columns, rows, and individual data points using indexing."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Select a single column or multiple columns from a DataFrame."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `.loc` for label-based indexing."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `.iloc` for position-based indexing."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Column Selection:"
              },
              {
                "type": "text",
                "text": " You can select a single column using square brackets `df['ColumnName']`, which returns a Series. To select multiple columns, you pass a list of column names: `df[['Col1', 'Col2']]`."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": ".loc (Label-based):"
              },
              {
                "type": "text",
                "text": " Selects data by row and column labels. The syntax is `df.loc[row_labels, column_labels]`. It's inclusive of the end point when slicing. For example, `df.loc[0:4, 'Name']` selects the 'Name' column for rows with index labels 0 through 4."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": ".iloc (Integer-location based):"
              },
              {
                "type": "text",
                "text": " Selects data by row and column position (integer index). The syntax is `df.iloc[row_positions, column_positions]`. It's exclusive of the end point when slicing, just like standard Python lists. For example, `df.iloc[0:5, 0]` selects the first column for the first 5 rows."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `df['col']` for quick column selection."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `.loc` when you're thinking about the names/labels of your data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `.iloc` when you're thinking about the numerical position of your data."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Indexing and selecting data in Pandas",
          "url": "https://pandas.pydata.org/docs/user_guide/indexing.html"
        },
        {
          "title": "Pandas loc vs iloc",
          "url": "https://www.geeksforgeeks.org/difference-between-loc-and-iloc-in-pandas-dataframe/"
        },
        {
          "title": "How to Use loc and iloc for Selecting Data in Pandas",
          "url": "https://www.youtube.com/watch?v=x0sOS_an2-M"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 14,
      "title": "Filtering Data with Boolean Indexing",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This is the Pandas equivalent of the SQL `WHERE` clause. Boolean indexing is the most powerful and common way to filter a DataFrame. You create a condition (a boolean Series of True/False values) and use it to select only the rows where the condition is True."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a boolean Series from a condition."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use a boolean Series to filter a DataFrame."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Combine multiple conditions using `&` (and) and `|` (or)."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Boolean Series:"
              },
              {
                "type": "text",
                "text": " When you apply a comparison operator to a Pandas Series, like `df['age'] > 25`, it doesn't return a single True/False. Instead, it returns a new Series of the same length, with a True or False value for each row, indicating whether that row met the condition."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Filtering:"
              },
              {
                "type": "text",
                "text": " You can then pass this boolean Series inside the square brackets of your DataFrame, `df[boolean_series]`. Pandas will return a new DataFrame containing only the rows where the boolean Series had a `True` value."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Multiple Conditions:"
              },
              {
                "type": "text",
                "text": " To combine conditions, you must use the bitwise operators `&` for AND and `|` for OR. You also need to wrap each individual condition in parentheses. Example: `df[(df['age'] > 25) & (df['country'] == 'USA')]`."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Boolean indexing is the primary method for filtering DataFrames."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a condition, which results in a boolean Series."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Pass that Series to the DataFrame to select the `True` rows."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `&` and `|` with parentheses for multiple conditions."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Boolean indexing in Pandas",
          "url": "https://pandas.pydata.org/docs/user_guide/indexing.html#boolean-indexing"
        },
        {
          "title": "Filtering Pandas DataFrames",
          "url": "https://www.geeksforgeeks.org/filtering-data-from-pandas-dataframe/"
        },
        {
          "title": "Filtering Data in a Pandas DataFrame",
          "url": "https://www.youtube.com/watch?v=Lw2rlcxo_So"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 15,
      "title": "Project 2: Exploratory Data Analysis with Pandas",
      "is_project_day": true,
      "project_data": {
        "title": "Exploratory Data Analysis with Pandas",
        "description": "You have been given a CSV file containing sales data. Your first task as an analyst is to perform an initial Exploratory Data Analysis (EDA). This involves loading the data, inspecting it for issues, performing basic cleaning, and extracting preliminary insights.",
        "objectives": [
          "Load data from a CSV file into a Pandas DataFrame.",
          "Practice using inspection methods like `.info()`, `.describe()`, and `.shape`.",
          "Identify and handle missing values.",
          "Perform basic data type conversions.",
          "Select and filter data to answer initial questions."
        ],
        "requirements": [
          "Use a real-world sales dataset (e.g., from Kaggle).",
          "Perform all analysis in a Jupyter Notebook.",
          "Use markdown cells in the notebook to explain your steps and findings."
        ],
        "deliverables": [
          "A Jupyter Notebook (`.ipynb`) file.",
          "The notebook should clearly show the process for:",
          "1. Loading the data.",
          "2. Inspecting the data (shape, info, describe). Write a short summary of initial findings.",
          "3. Identifying columns with missing data.",
          "4. Choosing and applying a strategy to handle missing data (e.g., dropping rows/columns, or filling with a value). Justify your choice.",
          "5. Checking and correcting data types if necessary (e.g., a date column stored as a string).",
          "6. Answering at least two simple business questions using filtering (e.g., 'How many sales were there in a specific city?' or 'What were the details of the most expensive order?')."
        ],
        "evaluation_criteria": [
          "Correctness: Is the code functional and does it perform the tasks correctly?",
          "Clarity: Is the notebook well-organized with clear markdown explanations?",
          "Justification: Are data cleaning decisions (like handling missing values) explained?",
          "Insight: Do the final answered questions demonstrate an understanding of filtering?"
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Time for your second project! You'll apply all the Pandas skills you've learned so far to a real dataset. This project focuses on the crucial first steps of any data analysis task: loading, inspecting, and cleaning the data. This is often called Exploratory Data Analysis (EDA)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Brief"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Your task is to take a raw sales dataset and prepare it for analysis. You will load it, use various inspection methods to understand its characteristics, handle any missing data you find, and use filtering to answer some basic questions. All work should be documented in a Jupyter Notebook."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Tips for Success"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Choose a good dataset. Look for one on Kaggle with a mix of text and numeric data, and maybe some missing values to practice on."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Document as you go. Write a markdown cell to explain what you're about to do *before* you write the code cell. This makes your notebook a readable report."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "There's no single 'right' way to handle missing data. The key is to choose a method and be able to justify why you chose it."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Sample Sales Data on Kaggle",
          "url": "https://www.kaggle.com/datasets/kyanyoga/sample-sales-data"
        },
        {
          "title": "Guide to an In-Depth Exploratory Data Analysis in Python",
          "url": "https://www.analyticsvidhya.com/blog/2021/08/guide-to-an-in-depth-exploratory-data-analysis-in-python/"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 16,
      "title": "Handling Missing Data",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Real-world data is messy. One of the most common problems you'll encounter is missing values (often represented as `NaN` or `None`). These can break your analysis or lead to incorrect conclusions. Today, you'll learn the standard Pandas techniques for finding and handling missing data."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `.isnull()` and `.sum()` to find and count missing values."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `.dropna()` to remove rows or columns with missing values."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `.fillna()` to replace missing values with a specific value (like 0, the mean, or the median)."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Finding Missing Data:"
              },
              {
                "type": "text",
                "text": " The `.isnull()` method returns a DataFrame of the same shape, but with boolean values indicating if a cell is null. A very common and useful pattern is `df.isnull().sum()`, which gives you the total count of missing values for each column."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Dropping Missing Data:"
              },
              {
                "type": "text",
                "text": " The `.dropna()` method removes rows (by default) or columns (`axis=1`) that contain any null values. This is a simple approach but can lead to significant data loss if not used carefully."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Filling Missing Data (Imputation):"
              },
              {
                "type": "text",
                "text": " The `.fillna()` method replaces `NaN` values with a value of your choice. For numeric columns, it's common to fill with 0, the column's mean (`df['col'].mean()`), or median (`df['col'].median()`). For categorical columns, you might fill with the mode (`df['col'].mode()[0]`) or a constant like 'Unknown'."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `df.isnull().sum()` to get a report of missing values."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "You can either drop missing values with `.dropna()` or fill them with `.fillna()`."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The choice of strategy depends on the context and the amount of missing data."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Working with missing data in Pandas",
          "url": "https://pandas.pydata.org/docs/user_guide/missing_data.html"
        },
        {
          "title": "🔴 Live SQL & Python Data Cleaning for Vietnam Client | Real-Time Data Manipulation Project",
          "url": "https://youtube.com/watch?v=8lsb_WxmR2I&pp=ygWPKAogICAgICAgICAgICBQbGVhc2UgZ2VuZXJhdGUgYSBkZXRhaWxlZCBjdXJyaWN1bHVtIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcHJlZmVyZW5jZXM6CiAgICAgICAgICAgIExlYXJuaW5nIEdvYWw6IE1hc3RlciBQeXRob24tY2VudHJlZCBkYXRhIGFuYWx5dGljcyAoU1FMIOKGkiBQYW5kYXMg4oaSIGF1dG9tYXRpb24gcGlwZWxpbmVzKS4KCgogICAgICAgICAgICBUaXRsZSAob3B0aW9uYWwpOiBEYXRhIEFuYWx5dGljcwogICAgICAgICAgICBEZXNjcmlwdGlvbiAob3B0aW9uYWwpOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCgoKICAgICAgICAgICAgRGlmZmljdWx0eTogYmVnaW5uZXIKICAgICAgICAgICAgVG90YWwgRHVyYXRpb24gKGRheXMpOiAzMAogICAgICAgICAgICBQcmVyZXF1aXNpdGVzOiBOb25lIHNwZWNpZmllZAogICAgICAgICAgICBUaW1lIHBlciBEYXkgKG1pbnV0ZXMpOiA2MAogICAgICAgICAgICBMZWFybmluZyBTdHlsZTogYmFsYW5jZWQKICAgICAgICAgICAgTnVtYmVyIG9mIFByb2plY3RzOiA0CiAgICAgICAgICAgIAogICAgICAgICAgICBUaGUgb3V0cHV0IHNob3VsZCBiZSBhIEpTT04gb2JqZWN0IHdpdGggYSBtYWluICdjdXJyaWN1bHVtX3RpdGxlJyBhbmQgJ2N1cnJpY3VsdW1fZGVzY3JpcHRpb24nLCAKICAgICAgICAgICAgYW5kIGEgbGlzdCBvZiAnZGF5cycuIEVhY2ggZGF5IG9iamVjdCBpbiB0aGUgbGlzdCBzaG91bGQgaGF2ZToKICAgICAgICAgICAgLSAnZGF5X251bWJlcicgKGludCkKICAgICAgICAgICAgLSAndGl0bGUnIChzdHIsIGNvbmNpc2UgdGl0bGUgZm9yIHRoZSBkYXkpCiAgICAgICAgICAgIC0gJ2lzX3Byb2plY3RfZGF5JyAoYm9vbCwgdHJ1ZSBpZiB0aGlzIGRheSBpcyBhIHByb2plY3QgZGF5LCBmYWxzZSBvdGhlcndpc2UpCiAgICAgICAgICAgIC0gJ3Byb2plY3RfZGF0YScgKGRpY3QsIG9wdGlvbmFsLCBvbmx5IGlmIGlzX3Byb2plY3RfZGF5IGlzIHRydWUuIFNob3VsZCBjb250YWluICd0aXRsZScsICdkZXNjcmlwdGlvbicsICdvYmplY3RpdmVzJywgJ3JlcXVpcmVtZW50cycsICdkZWxpdmVyYWJsZXMnLCBhbmQgJ2V2YWx1YXRpb25fY3JpdGVyaWEnKQogICAgICAgICAgICAtICdjb250ZW50JyAoZGljdCwgVGlwVGFwL1Byb3NlTWlycm9yIEpTT04gb2JqZWN0IGZvciB0aGUgbGVhcm5pbmcgbW9kdWxlLiBUaGlzIG9iamVjdCBNVVNUIGhhdmUgYSByb290ICd0eXBlJzogJ2RvYycgYW5kIGEgJ2NvbnRlbnQnIGFycmF5LiBUaGlzIGFycmF5IHNob3VsZCBjb250YWluIGEgc2VxdWVuY2Ugb2Ygbm9kZXMgcmVwcmVzZW50aW5nIHRoZSBkYXkncyBsZXNzb24uIFN0cnVjdHVyZSBlYWNoIGRheSdzIGxlc3NvbiBjb250ZW50IHdpdGggdGhlIGZvbGxvd2luZyBzZWN0aW9ucywgdXNpbmcgYXBwcm9wcmlhdGUgVGlwVGFwL1Byb3NlTWlycm9yIG5vZGVzIChsaWtlICdoZWFkaW5nJyB3aXRoIGxldmVscyAxLTMsICdwYXJhZ3JhcGgnLCAnYnVsbGV0TGlzdCcsICdvcmRlcmVkTGlzdCcsICdsaXN0SXRlbScsICdjb2RlQmxvY2snIHdoZXJlIGFwcHJvcHJpYXRlLCBhbmQgJ3RleHQnIG5vZGVzIHdpdGggbWFya3MgZm9yICdib2xkJywgJ2l0YWxpYycsICdsaW5rJyk6CiAgICAgICAgICAgICAgICAxLiAgIkludHJvZHVjdGlvbiI6IChSZXF1aXJlZCkgQSBicmllZiBvdmVydmlldyBvZiB0aGUgZGF5J3MgdG9waWMgKGUuZy4sIGEgJ2hlYWRpbmcnIG5vZGUgd2l0aCBsZXZlbCAyLCBmb2xsb3dlZCBieSBvbmUgb3IgdHdvICdwYXJhZ3JhcGgnIG5vZGVzKS4KICAgICAgICAgICAgICAgIDIuICAiTGVhcm5pbmcgT2JqZWN0aXZlcyI6IChSZXF1aXJlZCkgMi00IGNsZWFyLCBhY3Rpb25hYmxlIG9iamVjdGl2ZXMgZm9yIHRoZSBkYXkgKGUuZy4sIGEgJ2hlYWRpbmcnIG5vZGUgd2l0aCBsZXZlbCAzLCBmb2xsb3dlZCBieSBhICdidWxsZXRMaXN0JyBub2RlLCB3aGVyZSBlYWNoICdsaXN0SXRlbScgY29udGFpbnMgYSAncGFyYWdyYXBoJyB3aXRoIHRoZSBvYmplY3RpdmUpLgogICAgICAgICAgICAgICAgMy4gICJLZXkgQ29uY2VwdHMiOiAoUmVxdWlyZWQpIERldGFpbGVkIGV4cGxhbmF0aW9ucyBvZiB0aGUgY29yZSBjb25jZXB0cyBmb3IgdGhlIGRheS4gVGhpcyBzaG91bGQgYmUgdGhlIG1vc3Qgc3Vic3RhbnRpYWwgcGFydC4gVXNlIG11bHRpcGxlICdoZWFkaW5nJyBub2RlcyAobGV2ZWwgMykgZm9yIHN1Yi10b3BpY3MgaWYgbmVlZGVkLCBmb2xsb3dlZCBieSBkZXRhaWxlZCAncGFyYWdyYXBoJyBub2Rlcy4gSW5jb3Jwb3JhdGUgaW5mb3JtYXRpb24gZnJvbSB0aGUgJ1N1cHBvcnRpbmcgUmVzZWFyY2gnICh3aGljaCB3aWxsIGJlIHByb3ZpZGVkIHRvIHlvdSkgdG8gbWFrZSB0aGVzZSBleHBsYW5hdGlvbnMgY29tcHJlaGVuc2l2ZS4gSWYgY29kZSBleGFtcGxlcyBvciBtYXRoZW1hdGljYWwgZm9ybXVsYXMgYXJlIHJlbGV2YW50IGFuZCBmb3VuZCBpbiByZXNlYXJjaCwgcmVwcmVzZW50IHRoZW0gYWNjdXJhdGVseSwgcGVyaGFwcyB3aXRoaW4gJ3BhcmFncmFwaCcgbm9kZXMgb3IgdXNpbmcgJ2NvZGVCbG9jaycgaWYgYXBwcm9wcmlhdGUuCiAgICAgICAgICAgICAgICA0LiAgIkV4YW1wbGVzIjogKE9wdGlvbmFsLCBidXQgaGlnaGx5IGVuY291cmFnZWQpIDEtMiB3b3JrZWQgZXhhbXBsZXMgb3IgaWxsdXN0cmF0aXZlIHNjZW5hcmlvcyByZWxhdGVkIHRvIHRoZSBrZXkgY29uY2VwdHMgKGUuZy4sIGEgJ2hlYWRpbmcnIG5vZGUgd2l0aCBsZXZlbCAzLCBmb2xsb3dlZCBieSAncGFyYWdyYXBoJyBvciAnb3JkZXJlZExpc3QnIG5vZGVzIGV4cGxhaW5pbmcgdGhlIGV4YW1wbGUgc3RlcC1ieS1zdGVwKS4KICAgICAgICAgICAgICAgIDUuICAiU3VtbWFyeSI6IChSZXF1aXJlZCkgQSBjb25jaXNlIHJlY2FwIG9mIHRoZSBkYXkncyBtYWluIHBvaW50cyAoZS5nLiwgYSAnaGVhZGluZycgbm9kZSB3aXRoIGxldmVsIDMsIGZvbGxvd2VkIGJ5IGEgJ2J1bGxldExpc3QnIG5vZGUpLgogICAgICAgICAgICAgICAgRW5zdXJlIGFsbCB0ZXh0IGNvbnRlbnQgaXMgd2VsbC13cml0dGVuLCBjbGVhciwgYW5kIGVuZ2FnaW5nLgogICAgICAgICAgICAtICdyZXNvdXJjZXMnIChsaXN0IG9mIGRpY3RzLCBlYWNoIHdpdGggJ3RpdGxlJyBhbmQgJ3VybCcpCiAgICAgICAgICAgIC0gJ2VzdGltYXRlZF9ob3VycycgKGZsb2F0LCBvcHRpb25hbCkKICAgICAgICAgICAgCiAgICAgICAgICAgIEZvY3VzIG9uIGNyZWF0aW5nIHByYWN0aWNhbCwgYWN0aW9uYWJsZSBjb250ZW50IGZvciBlYWNoIGRheS4KICAgICAgICAgICAgRW5zdXJlIHRoZSBjdXJyaWN1bHVtIHNwYW5zIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMuCiAgICAgICAgICAgIAogICAgICAgICAgICBDUklUSUNBTCBJTlNUUlVDVElPTlMgRk9SIFJFU09VUkNFUzoKICAgICAgICAgICAgMS4gVGhlIFN1cHBvcnRpbmcgUmVzZWFyY2ggc2VjdGlvbiB3aWxsIGNvbnRhaW4gWW91VHViZSB2aWRlb3Mgd2l0aCBpZGVudGlmaWVycyBsaWtlIFtZVDFdLCBbWVQyXSwgZXRjLgogICAgICAgICAgICAyLiBZb3UgTVVTVCB1c2UgdGhlc2UgaWRlbnRpZmllcnMgaW4gdGhlICd1cmwnIGZpZWxkIHdoZW4gYWRkaW5nIFlvdVR1YmUgdmlkZW9zIHRvIHJlc291cmNlcwogICAgICAgICAgICAzLiBGb3IgZXhhbXBsZTogeyJ0aXRsZSI6ICJJbnRyb2R1Y3Rpb24gdG8gUmVhY3QgSG9va3MiLCAidXJsIjogIltZVDNdIn0KICAgICAgICAgICAgNC4gQWxzbyBpbmNsdWRlIG5vbi1Zb3VUdWJlIHJlc291cmNlcyAoYXJ0aWNsZXMsIGRvY3VtZW50YXRpb24pIHdpdGggdGhlaXIgZnVsbCBVUkxzCiAgICAgICAgICAgIDUuIEVhY2ggZGF5IHNob3VsZCBoYXZlIDItNCByZWxldmFudCByZXNvdXJjZXMgbWl4aW5nIFlvdVR1YmUgdmlkZW9zIGFuZCBvdGhlciBzb3VyY2VzCiAgICAgICAgICAgIAogICAgICAgICAgICBXaGVuIGdlbmVyYXRpbmcgdGhlICdjb250ZW50JyBmb3IgZWFjaCBkYXksIHV0aWxpemUgdGhlICdTdXBwb3J0aW5nIFJlc2VhcmNoJyAod2hpY2ggd2lsbCBiZSBwcm92aWRlZCB0byB5b3UgYWxvbmcgd2l0aCB0aGVzZSBwcmVmZXJlbmNlcykgdG8gbWFrZSB0aGUgZXhwbGFuYXRpb25zIGFuZCBjb25jZXB0cyBhcyBkZXRhaWxlZCBhbmQgYWNjdXJhdGUgYXMgcG9zc2libGUuCiAgICAgICAgICAgIAogICAgICAgICAgICBJTVBPUlRBTlQ6IElmIG51bV9wcm9qZWN0cyBpcyBncmVhdGVyIHRoYW4gMCwgZGlzdHJpYnV0ZSB0aGUgcHJvamVjdHMgZXZlbmx5IHRocm91Z2hvdXQgdGhlIGN1cnJpY3VsdW0uIEZvciBleGFtcGxlOgogICAgICAgICAgICAtIElmIG51bV9wcm9qZWN0cz0xIGFuZCBkdXJhdGlvbj0zMCBkYXlzLCBwbGFjZSB0aGUgcHJvamVjdCBhcm91bmQgZGF5IDIwLTI1CiAgICAgICAgICAgIC0gSWYgbnVtX3Byb2plY3RzPTIgYW5kIGR1cmF0aW9uPTMwIGRheXMsIHBsYWNlIHByb2plY3RzIGFyb3VuZCBkYXkgMTAtMTIgYW5kIGRheSAyMi0yNQogICAgICAgICAgICAtIElmIG51bV9wcm9qZWN0cz0zIGFuZCBkdXJhdGlvbj0zMCBkYXlzLCBwbGFjZSBwcm9qZWN0cyBhcm91bmQgZGF5IDgtMTAsIGRheSAxNi0xOCwgYW5kIGRheSAyNC0yNgogICAgICAgICAgICAKICAgICAgICAgICAgRm9yIHByb2plY3QgZGF5czoKICAgICAgICAgICAgLSBTZXQgJ2lzX3Byb2plY3RfZGF5JyB0byB0cnVlCiAgICAgICAgICAgIC0gSW5jbHVkZSBhICdwcm9qZWN0X2RhdGEnIG9iamVjdCB3aXRoIGNvbXByZWhlbnNpdmUgcHJvamVjdCBkZXRhaWxzCiAgICAgICAgICAgIC0gVGhlIHByb2plY3Qgc2hvdWxkIGludGVncmF0ZSBhbmQgYXBwbHkgY29uY2VwdHMgbGVhcm5lZCBpbiB0aGUgcHJlY2VkaW5nIGRheXMKICAgICAgICAgICAgLSBQcm9qZWN0cyBzaG91bGQgYmUgcHJhY3RpY2FsLCBoYW5kcy1vbiBhY3Rpdml0aWVzIHRoYXQgcmVpbmZvcmNlIGxlYXJuaW5nCiAgICAgICAgICAgIC0gUHJvamVjdCB0aXRsZXMgc2hvdWxkIGJlIGRlc2NyaXB0aXZlIGJ1dCBub3Qgb3Zlcmx5IHBsYXlmdWwgKGUuZy4sICJCdWlsZCBhIFdlYXRoZXIgRGF0YSBBbmFseXplciIgbm90ICJXZWF0aGVyIFdpemFyZCAzMDAwIikKICAgICAgICAgICAg"
        },
        {
          "title": "How to Handle Missing Data with Python",
          "url": "https://machinelearningmastery.com/handle-missing-data-python/"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 17,
      "title": "Correcting Data Types",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Another common data cleaning task is correcting data types. Sometimes numbers are read in as strings, or dates are just objects. Having the correct data types is essential for performing calculations, sorting correctly, and using type-specific functions."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the `.astype()` method to change a column's data type."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Convert columns to numeric types using `pd.to_numeric()`."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Convert columns to datetime objects using `pd.to_datetime()`."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "astype():"
              },
              {
                "type": "text",
                "text": " The primary method for casting a pandas object to a specified dtype. For example, `df['col'] = df['col'].astype(int)` will attempt to convert the column to integers. This will fail if there are non-numeric values."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "pd.to_numeric():"
              },
              {
                "type": "text",
                "text": " A more robust function for converting to numbers. It has an `errors` parameter. `errors='coerce'` is very useful, as it will turn any values that can't be converted into `NaN`, which you can then handle separately."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "pd.to_datetime():"
              },
              {
                "type": "text",
                "text": " The essential function for converting string representations of dates and times into proper datetime objects. This unlocks a huge range of time-series functionality, like extracting the month, year, or day of the week."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Correct data types are crucial for analysis."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `.astype()` for simple conversions."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `pd.to_numeric` and `pd.to_datetime` for more robust and specialized conversions."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "pandas.DataFrame.astype",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html"
        },
        {
          "title": "pandas.to_numeric",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"
        },
        {
          "title": "pandas.to_datetime",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 18,
      "title": "Combining DataFrames: Concat and Merge",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Often, your data will be split across multiple files or tables. To perform a complete analysis, you'll need to combine them. Pandas provides two primary functions for this, analogous to SQL's `UNION` and `JOIN`: `pd.concat()` and `pd.merge()`."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `pd.concat()` to stack DataFrames vertically or horizontally."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `pd.merge()` to perform database-style joins on DataFrames."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the different types of joins: inner, outer, left, right."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Concatenation:"
              },
              {
                "type": "text",
                "text": " `pd.concat()` is used for stacking. If you have two DataFrames with the same columns, you can stack them on top of each other (`axis=0`). If they have the same index, you can place them side-by-side (`axis=1`)."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Merging/Joining:"
              },
              {
                "type": "text",
                "text": " `pd.merge()` combines DataFrames based on the values in common columns (keys), similar to a SQL `JOIN`. You specify the left and right DataFrames, the key column(s) to join on, and the type of join."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Join Types:"
              },
              {
                "type": "text",
                "text": " `inner` (default): keeps only rows where the key exists in both DataFrames. `left`: keeps all rows from the left DataFrame. `right`: keeps all rows from the right DataFrame. `outer`: keeps all rows from both DataFrames."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `pd.concat()` for simple stacking of data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `pd.merge()` for complex, database-style joins based on key columns."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Choosing the right join type (inner, left, etc.) is crucial for getting the correct result."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Merge, join, concatenate and compare in Pandas",
          "url": "https://pandas.pydata.org/docs/user_guide/merging.html"
        },
        {
          "title": "Pandas Merge() and Concat() Explained",
          "url": "https://www.youtube.com/watch?v=iWp_I24gH74"
        },
        {
          "title": "Pandas Merge, Join, and Concatenate",
          "url": "https://realpython.com/pandas-merge-join-and-concat/"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 19,
      "title": "Aggregation and Grouping in Pandas",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This is the Pandas equivalent of SQL's `GROUP BY` clause. The 'group by' operation involves splitting data into groups based on some criteria, applying a function to each group independently, and combining the results. This is one of the most powerful features of Pandas for data analysis."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the `.groupby()` method to create a GroupBy object."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Apply aggregate functions like `.sum()`, `.mean()`, `.count()` to grouped data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the `.agg()` method to apply multiple aggregation functions at once."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The Split-Apply-Combine Pattern:"
              },
              {
                "type": "text",
                "text": " This is the core idea of `groupby`. 1) **Split** the data into groups based on a key. 2) **Apply** a function (e.g., `sum()`) to each group. 3) **Combine** the results into a new DataFrame."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "df.groupby():"
              },
              {
                "type": "text",
                "text": " You call this on your DataFrame and pass the column name you want to group by. This creates a `DataFrameGroupBy` object. On its own, this object isn't very useful; you need to chain an aggregation method to it."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": ".agg():"
              },
              {
                "type": "text",
                "text": " The aggregation method allows you to apply multiple functions at once and specify different functions for different columns. This is extremely powerful for creating summary tables. Example: `df.groupby('category').agg({'price': 'mean', 'quantity': 'sum'})`."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "`.groupby()` is essential for creating summary reports."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "It follows the split-apply-combine pattern."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `.agg()` for flexible and powerful aggregations."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Group by: split-apply-combine",
          "url": "https://pandas.pydata.org/docs/user_guide/groupby.html"
        },
        {
          "title": "Pandas GroupBy Explained",
          "url": "https://www.youtube.com/watch?v=qy0fD24BfyA"
        },
        {
          "title": "Pandas .agg() Tutorial",
          "url": "https://www.shanelynn.ie/summarising-aggregation-and-grouping-data-in-python-pandas/"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 20,
      "title": "Introduction to Data Visualization",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A picture is worth a thousand words, and in data analytics, a plot is worth a thousand rows of data. Data visualization is the practice of translating information into a visual context, such as a map or graph, to make data easier for the human brain to understand and pull insights from. Today, we'll introduce the main plotting libraries in Python."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type":- "text",
                        "text": "Understand the importance of data visualization."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Learn about Matplotlib and Seaborn, the two primary plotting libraries."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a simple plot directly from a Pandas DataFrame using the `.plot()` method."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Matplotlib:"
              },
              {
                "type": "text",
                "text": " The foundational plotting library in Python. It is highly customizable but can be verbose to use. Most other plotting libraries, including Pandas's built-in plotting, are built on top of Matplotlib."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Seaborn:"
              },
              {
                "type": "text",
                "text": " A library built on top of Matplotlib that provides a high-level interface for drawing attractive and informative statistical graphics. It makes creating common plot types like bar charts, histograms, and scatter plots much easier and prettier."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Pandas .plot():"
              },
              {
                "type": "text",
                "text": " Pandas DataFrames and Series have a built-in `.plot()` method that acts as a convenient wrapper around Matplotlib. It allows you to quickly generate simple plots from your data with minimal code."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Data visualization helps you understand data and communicate findings."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Matplotlib is the core library; Seaborn makes it easier and prettier."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The `.plot()` method in Pandas is great for quick, exploratory visualizations."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Matplotlib Tutorial",
          "url": "https://www.youtube.com/watch?v=eMOA1pPVVBI"
        },
        {
          "title": "Seaborn Tutorial",
          "url": "https://www.youtube.com/watch?v=6GUZXDef2U0"
        },
        {
          "title": "Pandas Plotting Documentation",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 21,
      "title": "Creating Common Plots with Seaborn",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today we'll dive deeper into creating visualizations using Seaborn. We'll focus on the most common and useful plot types for data analysis: bar plots, histograms, scatter plots, and line plots. You'll learn what each plot is used for and how to create it with a single line of Seaborn code."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a bar plot to compare categorical data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a histogram to understand the distribution of a single numeric variable."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a scatter plot to investigate the relationship between two numeric variables."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a line plot to show trends over time."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Bar Plot (`sns.barplot`):"
              },
              {
                "type": "text",
                "text": " Shows the relationship between a numeric and a categorical variable. Each bar represents a category, and its height represents a value (often a count or a mean)."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Histogram (`sns.histplot`):"
              },
              {
                "type": "text",
                "text": " Visualizes the distribution of a single continuous variable by dividing the data into bins and counting the number of observations in each bin."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Scatter Plot (`sns.scatterplot`):"
              },
              {
                "type": "text",
                "text": " Displays values for two numeric variables. Each point represents an observation. This is the primary way to visualize correlation."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Line Plot (`sns.lineplot`):"
              },
              {
                "type": "text",
                "text": " Typically used to show how a numeric variable changes over time. The x-axis is usually a time-based variable."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Choose the right plot for the question you are asking."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Bar plots for categories, histograms for distributions, scatter plots for relationships, and line plots for trends."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Seaborn makes creating these standard plots simple and efficient."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Seaborn Official Tutorial",
          "url": "https://seaborn.pydata.org/tutorial.html"
        },
        {
          "title": "Python Seaborn Tutorial For Beginners",
          "url": "https://www.youtube.com/watch?v=a7crz4A66iE"
        },
        {
          "title": "The Python Graph Gallery",
          "url": "https://www.python-graph-gallery.com/"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 22,
      "title": "Project 3: Data Aggregation and Visualization",
      "is_project_day": true,
      "project_data": {
        "title": "Data Aggregation and Visualization",
        "description": "Building on your cleaned sales dataset from the previous project, your task is now to perform deeper analysis. You will use grouping and aggregation to create summary statistics and then visualize these findings to answer more complex business questions.",
        "objectives": [
          "Apply `.groupby()` to aggregate data and calculate metrics.",
          "Create meaningful visualizations (bar plots, line plots) using Seaborn.",
          "Interpret visualizations to derive business insights.",
          "Combine data manipulation and visualization skills to create a small report."
        ],
        "requirements": [
          "Use the cleaned dataset from Project 2.",
          "Continue working in your Jupyter Notebook.",
          "Use markdown cells to state the business question, explain the analysis, and interpret the resulting plots."
        ],
        "deliverables": [
          "An updated Jupyter Notebook (`.ipynb`) file.",
          "The notebook should contain analysis for at least three of the following (or similar) business questions:",
          "1. **What are the total sales per month?** (Requires grouping by month, requires a line plot).",
          "2. **Which are the top 5 selling products?** (Requires grouping by product, requires a bar plot).",
          "3. **What is the average order value per city?** (Requires grouping by city, requires a bar plot).",
          "4. **Is there a relationship between the price of a product and the quantity ordered?** (Requires a scatter plot).",
          "For each question, the notebook must show the Pandas code for aggregation, the Seaborn code for plotting, the resulting plot, and a written interpretation of what the plot shows."
        ],
        "evaluation_criteria": [
          "Correctness: Are the aggregations and plots technically correct?",
          "Clarity: Is the notebook well-structured with clear questions and interpretations?",
          "Appropriateness: Is the chosen plot type suitable for the data being presented?",
          "Insightfulness: Does the interpretation of the plots demonstrate an understanding of the business implications?"
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This project is where it all comes together. You'll take your cleaned data and move from preparation to actual analysis. You will use the powerful `.groupby()` method to summarize your data and then use Seaborn to visualize those summaries, turning tables of numbers into insightful charts."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Brief"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Your goal is to answer several business questions using a combination of data aggregation and visualization. For each question, you will need to perform the right `groupby` operation in Pandas and then choose the most appropriate plot in Seaborn to display the result. The final output will be a well-commented Jupyter Notebook that tells a story with data."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Tips for Success"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Think about the question first. What information do you need? What columns do you need to group by? What do you need to calculate (sum, mean, count)?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Don't forget to make your plots readable. Add titles and labels to your axes using Matplotlib functions (`plt.title()`, `plt.xlabel()`, `plt.ylabel()`)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The interpretation is as important as the code. Explain what the chart means in simple terms, as if you were presenting it to a non-technical manager."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Adding titles and labels to Seaborn plots",
          "url": "https://www.statology.org/seaborn-title-axis-labels/"
        },
        {
          "title": "Data Visualization with Python (Seaborn & Matplotlib)",
          "url": "https://www.youtube.com/watch?v=20g9pY_QLiA"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 23,
      "title": "Connecting Python to SQL Databases",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "So far, we've treated SQL and Python as separate steps. Now it's time to connect them. Instead of manually exporting data from a database to a CSV, you can use Python to connect directly to a database, execute a SQL query, and load the results straight into a Pandas DataFrame. This is the foundation of building automated data pipelines."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the role of database drivers/libraries in Python."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the `sqlite3` library to connect to a SQLite database."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `pd.read_sql_query()` to execute a query and load results into a DataFrame."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Database Connection:"
              },
              {
                "type": "text",
                "text": " To talk to a database, Python needs a specific library. For SQLite, this is `sqlite3`, which comes built-in with Python. For other databases like PostgreSQL or MySQL, you would need to install a different library (e.g., `psycopg2` or `mysql-connector-python`)."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Connection Object:"
              },
              {
                "type": "text",
                "text": " The first step is to create a connection object that represents the session with the database. For `sqlite3`, this is as simple as `conn = sqlite3.connect('your_database_file.db')`."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "pd.read_sql_query():"
              },
              {
                "type": "text",
                "text": " This is the magic Pandas function. You give it two arguments: a string containing your SQL query, and the connection object you just created. It handles executing the query and parsing the results into a perfectly formatted DataFrame."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Python can connect directly to databases to pull data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The `sqlite3` library is used for SQLite databases."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "`pd.read_sql_query()` is the key function for executing a query and creating a DataFrame."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "sqlite3 — DB-API 2.0 interface for SQLite databases",
          "url": "https://docs.python.org/3/library/sqlite3.html"
        },
        {
          "title": "pandas.read_sql_query",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.read_sql_query.html"
        },
        {
          "title": "How to Use a SQL Database with Python and Pandas",
          "url": "https://www.youtube.com/watch?v=M-4EpNdlSuY"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 24,
      "title": "Writing Python Scripts for Automation",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Jupyter Notebooks are fantastic for exploration, but for repeatable tasks and automation, you need to write Python scripts (`.py` files). Today, we'll transition from the interactive notebook environment to writing a standalone script that can be run from the command line."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the difference between a Jupyter Notebook and a Python script."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write a basic `.py` script using a text editor or IDE."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Run a Python script from the terminal."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Learn about the `if __name__ == '__main__'` block."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Python Scripts (.py):"
              },
              {
                "type": "text",
                "text": " A plain text file containing Python code. Unlike notebooks, scripts are executed from top to bottom as a single unit. They are used for creating reusable programs and automation."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Running from Terminal:"
              },
              {
                "type": "text",
                "text": " You execute a script by opening a terminal (or command prompt), navigating to the directory where the file is saved, and typing `python your_script_name.py`."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "if __name__ == '__main__':"
              },
              {
                "type": "text",
                "text": " This is a standard Python convention. Code inside this block will only run when the script is executed directly (not when it's imported as a module into another script). This is the perfect place to put the main logic of your script."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "`.ipynb` files are for exploration; `.py` files are for production/automation."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Scripts are run from the terminal using the `python` command."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The `if __name__ == '__main__'` block is the entry point for your script's execution."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "What Is the `if __name__ == '__main__'` in Python?",
          "url": "https://realpython.com/if-name-main-python/"
        },
        {
          "title": "Running Python Scripts",
          "url": "https://docs.python.org/3/using/cmdline.html"
        },
        {
          "title": "Automate Everything with Python",
          "url": "https://www.youtube.com/watch?v=PX31g_1-cqU"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 25,
      "title": "Structuring a Data Pipeline Script",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A data pipeline is a series of steps that move data from a source to a destination, often transforming it along the way. A well-structured script makes your pipeline reliable, readable, and easy to maintain. Today we'll learn how to organize our analysis code into functions to create a clean, modular pipeline."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Define Python functions to encapsulate logic."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Structure a script with separate functions for extraction, transformation, and loading (ETL)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the benefits of a modular script design."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Functions:"
              },
              {
                "type": "text",
                "text": " A block of reusable code that performs a specific task. Defining functions (e.g., `def extract_data():`) allows you to break down a complex problem into smaller, manageable pieces."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "ETL (Extract, Transform, Load):"
              },
              {
                "type": "text",
                "text": " A common pattern for data pipelines. **Extract**: Get the data from its source (a database, a file). **Transform**: Clean the data, create new columns, perform aggregations. **Load**: Save the processed data to a destination (a new file, another database table)."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Modular Design:"
              },
              {
                "type": "text",
                "text": " By putting each ETL step into its own function, your code becomes much cleaner. The main part of your script simply calls these functions in order. This makes it easier to test, debug, and modify individual parts of the pipeline without affecting the others."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use functions to make your code reusable and organized."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Structure your pipeline scripts using the ETL (Extract, Transform, Load) pattern."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A modular design is key to building robust and maintainable data pipelines."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Python Functions",
          "url": "https://www.w3schools.com/python/python_functions.asp"
        },
        {
          "title": "What is ETL? (Extract, Transform, Load)",
          "url": "https://aws.amazon.com/what-is/etl/"
        },
        {
          "title": "Building a Simple ETL Pipeline with Python",
          "url": "https://www.youtube.com/watch?v=v_cvi_2a_vI"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 26,
      "title": "Saving Output: To CSV and Other Formats",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The final step of many data pipelines is to save the results. This could be a cleaned dataset, a summary table, or a report. Pandas makes it just as easy to write data to files as it is to read from them. We'll also see how to save the plots we generate."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the `.to_csv()` method to save a DataFrame to a CSV file."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the `index=False` parameter when saving CSVs."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `plt.savefig()` to save a Matplotlib/Seaborn plot to an image file."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "df.to_csv():"
              },
              {
                "type": "text",
                "text": " The counterpart to `read_csv`. This method writes the contents of a DataFrame to a CSV file. The first argument is the desired filename."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "index=False:"
              },
              {
                "type": "text",
                "text": " By default, `to_csv` will write the DataFrame's index as the first column in the file. In most cases, you don't want this. Setting `index=False` prevents the index from being saved."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "plt.savefig():"
              },
              {
                "type": "text",
                "text": " After you've created a plot using Seaborn or Matplotlib, you can call this function to save it to a file (e.g., a `.png` or `.jpg`). You must call this *before* you show the plot with `plt.show()`."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `df.to_csv('filename.csv', index=False)` to save your data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `plt.savefig('imagename.png')` to save your visualizations."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Saving your output is the final step in creating a shareable and repeatable analysis."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "pandas.DataFrame.to_csv",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_csv.html"
        },
        {
          "title": "matplotlib.pyplot.savefig",
          "url": "https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.savefig.html"
        },
        {
          "title": "Saving plots to file in Matplotlib",
          "url": "https://www.youtube.com/watch?v=c_LhrGaSg2A"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 27,
      "title": "Advanced Pandas: The .apply() Method",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "What if you need to perform an operation on a column that isn't covered by a built-in Pandas function? The `.apply()` method is your escape hatch. It allows you to apply any arbitrary function along an axis of a DataFrame, giving you ultimate flexibility for data transformation."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Define a custom function to perform a specific operation."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `.apply()` to apply a function to a single column (a Series)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `.apply()` with a lambda function for simple, one-line operations."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": ".apply() on a Series:"
              },
              {
                "type": "text",
                "text": " When used on a column (e.g., `df['col'].apply(my_function)`), the function `my_function` is called for every value in that column. This is perfect for complex transformations on a single column's data."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Lambda Functions:"
              },
              {
                "type": "text",
                "text": " For simple, one-off functions, you can use a 'lambda' (or anonymous) function directly inside `.apply()`. This avoids having to formally define a function with `def`. Example: `df['price_doubled'] = df['price'].apply(lambda x: x * 2)`."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "`.apply()` lets you use your own custom functions on your data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "It gives you the flexibility to perform any transformation you can imagine."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Lambda functions are a concise way to use `.apply()` for simple tasks."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "pandas.DataFrame.apply",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.apply.html"
        },
        {
          "title": "Introduction to Python's .apply()",
          "url": "https://www.youtube.com/watch?v=P_q0tkYqvSk"
        },
        {
          "title": "Python Lambda Functions",
          "url": "https://www.w3schools.com/python/python_lambda.asp"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 28,
      "title": "Capstone Project Prep and Review",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Tomorrow you will begin your final capstone project, which will integrate everything you have learned: SQL, Pandas, and pipeline automation. Today is about preparing for that project. We will review the entire workflow from start to finish and ensure all the concepts are fresh in your mind."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Review the full data analysis workflow: SQL → Python → Pandas → Output."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Recap key functions and methods for each stage of the process."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the requirements for the final capstone project."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts to Review"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "SQL:"
                      },
                      {
                        "type": "text",
                        "text": " `SELECT`, `WHERE`, `GROUP BY`, `ORDER BY`."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Python-SQL Connection:"
                      },
                      {
                        "type": "text",
                        "text": " `sqlite3.connect()`, `pd.read_sql_query()`."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Pandas Cleaning:"
                      },
                      {
                        "type": "text",
                        "text": " `.isnull().sum()`, `.dropna()`, `.fillna()`, `.astype()`."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Pandas Analysis:"
                      },
                      {
                        "type": "text",
                        "text": " `.groupby()`, `.agg()`, `.merge()`."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Visualization:"
                      },
                      {
                        "type": "text",
                        "text": " `seaborn` plots, `plt.savefig()`."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Scripting:"
                      },
                      {
                        "type": "text",
                        "text": " Functions, `if __name__ == '__main__'`, saving output with `.to_csv()`."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today is a chance to catch your breath and consolidate your knowledge. Go back through your notes and previous projects. Make sure you feel comfortable with each stage of the data analysis process, as you will need all of them for the final project."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Pandas Cheat Sheet",
          "url": "https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf"
        },
        {
          "title": "SQL Cheat Sheet",
          "url": "https://www.sqltutorial.org/sql-cheat-sheet/"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 29,
      "title": "Project 4: Building a Simple Data Pipeline",
      "is_project_day": true,
      "project_data": {
        "title": "Building a Simple Data Pipeline",
        "description": "This capstone project requires you to build an end-to-end, automated data analysis pipeline as a Python script. The script will connect to the Chinook database, extract data about customers and their purchases, perform transformations and analysis in Pandas, and then save a summary report and a visualization as output files.",
        "objectives": [
          "Integrate SQL and Pandas in a single script.",
          "Write clean, modular Python code using functions.",
          "Perform a complete Extract-Transform-Load (ETL) process.",
          "Automate a repeatable analysis task that runs from the command line."
        ],
        "requirements": [
          "Use the Chinook sample database.",
          "Write all code in a single Python script (`.py` file).",
          "The script must be runnable from the terminal (e.g., `python pipeline.py`).",
          "The script should generate at least two output files: a CSV report and a PNG plot."
        ],
        "deliverables": [
          "A Python script (`pipeline.py`).",
          "The script should perform the following steps:",
          "1. **Extract**: Connect to the Chinook database. Write a SQL query that joins the `customers` and `invoices` tables to get each customer's name, country, and all of their invoice totals.",
          "2. **Transform**: Load the SQL query result into a Pandas DataFrame. Then, group the data by country to calculate the total number of customers, total number of invoices, and total revenue for each country.",
          "3. **Load**: ",
          "   a. Save the resulting summary DataFrame to a CSV file named `country_sales_report.csv`.",
          "   b. Create a bar plot showing the total revenue by country. Save this plot as an image file named `revenue_by_country.png`."
        ],
        "evaluation_criteria": [
          "Functionality: Does the script run without errors from the terminal?",
          "Correctness: Is the SQL query correct? Are the Pandas aggregations correct?",
          "Output: Are the `country_sales_report.csv` and `revenue_by_country.png` files generated correctly?",
          "Code Quality: Is the code well-structured into functions? Is it readable and commented where necessary?"
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Welcome to your final project! This is your opportunity to demonstrate everything you've learned by building a complete, automated data pipeline. You will write a Python script that brings together SQL, Pandas, and data visualization to create a useful report."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Brief"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Your task is to create a Python script that automates a reporting task. It will connect to a database, run a query, process the data, and save a CSV report and a plot. This is a highly practical skill that mimics a common task for data analysts."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Tips for Success"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Structure your script with functions for each major step: one for extracting data, one for transforming it, and one for loading/saving the outputs."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Develop the SQL query in a tool like DB Browser first to make sure it's correct before putting it into your Python script."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Test your script frequently as you build it. Don't wait until the end to run it for the first time."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Remember to use `index=False` when you save your CSV!"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "SQL Joins",
          "url": "https://www.w3schools.com/sql/sql_join.asp"
        },
        {
          "title": "Full Project: Python for Data Analysis - Sales Data",
          "url": "https://www.youtube.com/watch?v=eMOA1pPVVBI"
        }
      ],
      "estimated_hours": 1.0
    },
    {
      "day_number": 30,
      "title": "Course Wrap-up and Next Steps",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Congratulations on completing the 30-day Data Analytics curriculum! You have come a long way, from having no prerequisites to building a full data pipeline. Today, we'll reflect on what you've learned and discuss where you can go from here."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "What You've Accomplished"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "You've mastered the fundamentals of SQL for data extraction."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "You've learned to use the Pandas library for data cleaning, transformation, and analysis."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "You can create insightful visualizations with Seaborn and Matplotlib."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "You can write automated Python scripts to build data pipelines."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Next Steps in Your Learning Journey"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Your journey doesn't end here. Here are some areas to explore next:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Advanced SQL:"
                      },
                      {
                        "type": "text",
                        "text": " Learn about window functions, common table expressions (CTEs), and performance tuning."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Statistics:"
                      },
                      {
                        "type": "text",
                        "text": " Deepen your understanding of statistics for more rigorous analysis (hypothesis testing, regression)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Machine Learning:"
                      },
                      {
                        "type": "text",
                        "text": " Use libraries like Scikit-learn to build predictive models from your data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Cloud and Big Data:"
                      },
                      {
                        "type": "text",
                        "text": " Explore tools like Spark, AWS, and Google Cloud Platform for working with massive datasets."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Build a Portfolio:"
                      },
                      {
                        "type": "text",
                        "text": " The best way to learn is by doing. Find datasets on Kaggle or other public sources and complete your own analysis projects from start to finish."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Thank you for your hard work and dedication. You now have a solid foundation in data analytics that you can build upon to achieve your career goals. Keep practicing, stay curious, and continue learning!"
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Kaggle: Your Home for Data Science",
          "url": "https://www.kaggle.com/"
        },
        {
          "title": "Scikit-learn: Machine Learning in Python",
          "url": "https://scikit-learn.org/stable/"
        },
        {
          "title": "The Data Science Roadmap",
          "url": "https://roadmap.sh/data-scientist"
        }
      ],
      "estimated_hours": 1.0
    }
  ]
}
```
--- End of Response ---



=== PYDANTIC VALIDATION FAILED at 2025-07-12 00:58:50.995789 ===
Error: 3 validation errors for CurriculumResponse
curriculum_title
  Field required [type=missing, input_value={'title': 'Learning Maste...waXBlbGluZXMpLi4%3D']}]}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing
curriculum_description
  Field required [type=missing, input_value={'title': 'Learning Maste...waXBlbGluZXMpLi4%3D']}]}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing
days
  Field required [type=missing, input_value={'title': 'Learning Maste...waXBlbGluZXMpLi4%3D']}]}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing
Data keys: ['title', 'goal', 'duration', 'curriculum']
--- New Curriculum Generation ---
Curriculum ID: a5c9ca93-359c-4672-8bcc-103c0c1f5d00
Timestamp: 2025-07-12T07:58:51.282825
Raw Response:
```json
{
  "title": "Learning Master Python-centred data analytics (SQL → Pandas → automation pipelines).",
  "goal": "Master Python-centred data analytics (SQL → Pandas → automation pipelines).",
  "duration": 30,
  "curriculum": [
    {
      "day": 1,
      "title": "Introduction to Data Analytics & Environment Setup",
      "introduction": "Welcome to your data analytics journey! Today, we'll cover the foundational concepts of data analytics and set up the essential tools you'll need: Python, Jupyter Notebook, and a code editor.",
      "learning_objectives": [
        "Understand the data analytics lifecycle.",
        "Install Python and the Anaconda distribution.",
        "Become familiar with Jupyter Notebook for interactive coding.",
        "Write and run your first Python 'Hello, World!' program."
      ],
      "key_concepts": [
        "Data Analytics Lifecycle (Collection, Cleaning, Analysis, Visualization, Reporting)",
        "Python as a Data Science Language",
        "Anaconda Distribution",
        "Jupyter Notebooks",
        "Integrated Development Environment (IDE) like VS Code"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "The Data Analytics Workflow" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "Data analytics is the process of inspecting, cleansing, transforming, and modeling data with the goal of discovering useful information, informing conclusions, and supporting decision-making. We will follow a structured path from fetching data with SQL to analyzing it with Python's Pandas library, and finally, automating the entire process." }]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Setting Up Your Environment" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "A consistent and powerful development environment is crucial. We recommend installing the Anaconda distribution, which bundles Python with many essential data science libraries and tools, including Jupyter Notebook and the conda package manager." }]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Download and install Anaconda from their official website." }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Launch Anaconda Navigator and open a Jupyter Notebook." }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Create a new notebook and explore its interface (cells, running code, markdown)." }] }]
              }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Your first line of Python code in a Jupyter cell.",
          "code": "print('Hello, Data Analytics World!')"
        }
      ],
      "practice_activities": [
        "Install Anaconda on your system.",
        "Successfully launch a Jupyter Notebook.",
        "Create a new notebook, add a markdown cell with a title, and a code cell that prints your name."
      ],
      "summary": "Today you took the first critical step by understanding the scope of data analytics and setting up your professional coding environment. You are now ready to start learning the tools of the trade.",
      "resources": ["https://youtube.com/watch?v=r2tjwuG305E&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi7SBwkJ2AkBhyohjO8%3D", "https://youtube.com/watch?v=QOXFKi9ss8o&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D", "https://youtube.com/watch?v=PSNXoAs2FtQ&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 2,
      "title": "SQL Fundamentals: SELECT, FROM, WHERE",
      "introduction": "Structured Query Language (SQL) is the universal language for interacting with relational databases. Today, we'll learn the most fundamental commands for retrieving data: SELECT, FROM, and WHERE.",
      "learning_objectives": [
        "Understand the structure of a relational database (tables, columns, rows).",
        "Write a SQL query to select specific columns from a table.",
        "Use the WHERE clause to filter rows based on a condition."
      ],
      "key_concepts": [
        "Relational Databases",
        "Tables, Columns, Rows",
        "SQL Syntax",
        "SELECT statement",
        "FROM clause",
        "WHERE clause"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Querying with SELECT and FROM" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "The " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "SELECT" },
              { "type": "text", "text": " statement is used to specify the columns you want to retrieve. The " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "FROM" },
              { "type": "text", "text": " clause specifies the table you are querying. To select all columns, you can use the asterisk " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "*" },
              { "type": "text", "text": " wildcard." }
            ]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Filtering with WHERE" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "The " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "WHERE" },
              { "type": "text", "text": " clause is used to filter records and extract only those that fulfill a specific condition. You can use operators like " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "=" },
              { "type": "text", "text": ", " },
              { "type": "text", "marks": [{ "type": "code" }], "text": ">" },
              { "type": "text", "text": ", " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "<" },
              { "type": "text", "text": ", " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "LIKE" },
              { "type": "text", "text": ", and " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "IN" },
              { "type": "text", "text": "." }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Select all columns from a 'customers' table.",
          "code": "SELECT * FROM customers;"
        },
        {
          "description": "Select specific columns for customers from 'USA'.",
          "code": "SELECT customer_name, city FROM customers WHERE country = 'USA';"
        }
      ],
      "practice_activities": [
        "Using a sample online SQL editor (like SQLite Online), write a query to select all columns from a sample 'products' table.",
        "Write a query to select the product name and price for all products that cost more than $50.",
        "Write a query to find all employees with the job title 'Sales Rep'."
      ],
      "summary": "You've learned the cornerstone of SQL: how to select columns and filter rows. This is the foundation upon which all other SQL operations are built.",
      "resources": ["https://youtube.com/watch?v=PSNXoAs2FtQ&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D", "https://youtube.com/watch?v=y3CDecuUK_4&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 3,
      "title": "SQL Filtering & Sorting: ORDER BY, LIMIT, DISTINCT",
      "introduction": "Today we'll enhance our data retrieval skills by learning how to sort results, limit the number of rows returned, and select only unique values.",
      "learning_objectives": [
        "Sort query results using ORDER BY.",
        "Control the number of returned rows with LIMIT.",
        "Retrieve unique values from a column using DISTINCT."
      ],
      "key_concepts": [
        "ORDER BY (ASC, DESC)",
        "LIMIT",
        "DISTINCT"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Sorting with ORDER BY" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "The " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "ORDER BY" },
              { "type": "text", "text": " keyword is used to sort the result-set in ascending (ASC) or descending (DESC) order. By default, it sorts in ascending order." }
            ]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Limiting Results with LIMIT" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "The " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "LIMIT" },
              { "type": "text", "text": " clause is used to specify the number of records to return. It is particularly useful for finding top N or bottom N records." }
            ]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Finding Unique Values with DISTINCT" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "The " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "DISTINCT" },
              { "type": "text", "text": " keyword can be used to return only distinct (different) values from a column." }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Find the 10 most expensive products.",
          "code": "SELECT product_name, price FROM products ORDER BY price DESC LIMIT 10;"
        },
        {
          "description": "List all unique countries where customers are located.",
          "code": "SELECT DISTINCT country FROM customers ORDER BY country ASC;"
        }
      ],
      "practice_activities": [
        "Write a query to list all employees, sorted by their last name.",
        "Write a query to find the 5 most recently hired employees.",
        "Write a query to get a list of all unique job titles in the company."
      ],
      "summary": "You can now control the presentation of your query results by sorting them, limiting the output, and removing duplicates. These are essential skills for creating clean and readable reports.",
      "resources": ["https://youtube.com/watch?v=PSNXoAs2FtQ&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 4,
      "title": "SQL Aggregations: GROUP BY, COUNT, SUM, AVG",
      "introduction": "Aggregation is the process of turning many rows of data into a single summary statistic. Today, you'll learn how to group data and perform calculations like counting rows, summing values, and finding averages.",
      "learning_objectives": [
        "Understand and use aggregate functions: COUNT, SUM, AVG, MIN, MAX.",
        "Group rows that have the same values into summary rows using GROUP BY.",
        "Filter grouped data using the HAVING clause."
      ],
      "key_concepts": [
        "Aggregate Functions (COUNT, SUM, AVG, MIN, MAX)",
        "GROUP BY clause",
        "HAVING clause"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Aggregate Functions" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "SQL aggregate functions perform a calculation on a set of values and return a single value. Common functions include COUNT() to count rows, SUM() to add values, and AVG() to calculate the average." }]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Grouping with GROUP BY" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "The " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "GROUP BY" },
              { "type": "text", "text": " statement groups rows that have the same values in specified columns into summary rows. It is often used with aggregate functions to report on categories of data." }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Count the number of customers in each country.",
          "code": "SELECT country, COUNT(customer_id) AS number_of_customers FROM customers GROUP BY country;"
        },
        {
          "description": "Calculate the total sales for each product category.",
          "code": "SELECT category, SUM(sale_amount) AS total_sales FROM sales GROUP BY category;"
        },
        {
          "description": "Find countries with more than 10 customers.",
          "code": "SELECT country, COUNT(customer_id) FROM customers GROUP BY country HAVING COUNT(customer_id) > 10;"
        }
      ],
      "practice_activities": [
        "Write a query to count the number of orders placed by each customer.",
        "Write a query to find the average product price for each product category.",
        "Write a query to find which sales representatives have generated more than $100,000 in total sales."
      ],
      "summary": "You have now unlocked one of the most powerful features of SQL: data aggregation. You can now move beyond simple data retrieval to generating meaningful business insights and summaries.",
      "resources": ["https://youtube.com/watch?v=PSNXoAs2FtQ&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 5,
      "title": "SQL Joins: INNER JOIN, LEFT JOIN",
      "introduction": "Real-world data is often spread across multiple tables. JOINS are used to combine rows from two or more tables based on a related column between them. We will focus on the two most common types: INNER and LEFT joins.",
      "learning_objectives": [
        "Understand the concept of primary and foreign keys.",
        "Combine data from two tables using INNER JOIN.",
        "Combine data from two tables using LEFT JOIN, keeping all records from the left table."
      ],
      "key_concepts": [
        "Primary Key",
        "Foreign Key",
        "INNER JOIN",
        "LEFT JOIN (or LEFT OUTER JOIN)"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "INNER JOIN" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "The " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "INNER JOIN" },
              { "type": "text", "text": " keyword selects records that have matching values in both tables. It is the most common type of join." }
            ]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "LEFT JOIN" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "The " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "LEFT JOIN" },
              { "type": "text", "text": " keyword returns all records from the left table (table1), and the matched records from the right table (table2). The result is NULL from the right side if there is no match." }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Get a list of orders with the corresponding customer names (INNER JOIN).",
          "code": "SELECT orders.order_id, customers.customer_name FROM orders INNER JOIN customers ON orders.customer_id = customers.customer_id;"
        },
        {
          "description": "List all customers and any orders they might have placed (LEFT JOIN).",
          "code": "SELECT customers.customer_name, orders.order_id FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id;"
        }
      ],
      "practice_activities": [
        "Write a query to join an 'employees' table with a 'departments' table to show which department each employee belongs to.",
        "Write a query to list all products and the total quantity sold for each, joining 'products' and 'order_details' tables.",
        "Use a LEFT JOIN to find all employees who have not been assigned to a department yet."
      ],
      "summary": "You can now combine data from different tables, a fundamental skill for working with relational databases. Understanding INNER and LEFT joins allows you to answer complex business questions.",
      "resources": ["https://youtube.com/watch?v=PSNXoAs2FtQ&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 6,
      "title": "Advanced SQL: Subqueries & CTEs",
      "introduction": "Let's level up our SQL with more advanced techniques. Subqueries (queries within a query) and Common Table Expressions (CTEs) help you write cleaner, more readable, and more powerful queries for complex problems.",
      "learning_objectives": [
        "Write a subquery in a WHERE clause.",
        "Define and use a Common Table Expression (CTE) with the WITH clause.",
        "Understand when to use a subquery versus a CTE."
      ],
      "key_concepts": [
        "Subquery (or Inner Query)",
        "Common Table Expression (CTE)",
        "WITH clause"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Subqueries" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "A subquery is a SQL query nested inside a larger query. It can be used in various places, such as the SELECT, FROM, or WHERE clause, to perform an intermediate calculation or filtering step." }]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Common Table Expressions (CTEs)" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "A CTE allows you to define a temporary, named result set that you can reference within a " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "SELECT" },
              { "type": "text", "text": ", " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "INSERT" },
              { "type": "text", "text": ", " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "UPDATE" },
              { "type": "text", "text": ", or " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "DELETE" },
              { "type": "text", "text": " statement. CTEs are defined using the " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "WITH" },
              { "type": "text", "text": " clause and greatly improve the readability and modularity of complex queries." }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Find all employees who work in the 'Sales' department using a subquery.",
          "code": "SELECT employee_name FROM employees WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Sales');"
        },
        {
          "description": "Using a CTE to find the total sales per country.",
          "code": "WITH CountrySales AS (\n  SELECT c.country, o.order_total\n  FROM orders o\n  JOIN customers c ON o.customer_id = c.customer_id\n)\nSELECT country, SUM(order_total) AS total_sales\nFROM CountrySales\nGROUP BY country;"
        }
      ],
      "practice_activities": [
        "Use a subquery to find all products that have a price higher than the average price of all products.",
        "Rewrite the previous query using a CTE.",
        "Use a CTE to first identify customers from 'Canada', then join that result to the 'orders' table to find their total order amount."
      ],
      "summary": "You've learned how to structure complex queries using subqueries and CTEs. CTEs are often preferred for their readability and are a hallmark of a proficient SQL user.",
      "resources": ["https://youtube.com/watch?v=PSNXoAs2FtQ&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 7,
      "title": "Week 1 Review & Mini-Project",
      "introduction": "This week, you built a strong foundation in SQL. Today is about consolidating that knowledge through a mini-project where you'll apply everything you've learned to analyze a small database.",
      "learning_objectives": [
        "Review and reinforce all SQL concepts learned in Week 1.",
        "Apply SQL skills to a cohesive set of business questions.",
        "Practice writing complex queries involving joins, aggregations, and subqueries/CTEs."
      ],
      "key_concepts": [
        "SELECT, FROM, WHERE",
        "ORDER BY, LIMIT, DISTINCT",
        "GROUP BY, HAVING, Aggregate Functions",
        "INNER/LEFT JOINs",
        "Subqueries/CTEs"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Project Goal" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "Analyze a sample database (e.g., the classic 'Chinook' database) to answer several business questions. This will require you to combine all the SQL techniques you've learned." }]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Sample Tasks" }]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Find the top 5 customers by total spending." }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Identify the best-selling music genre in the USA." }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Determine which sales support agent has the most customers." }] }]
              }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "A starting query: Find the total invoice amount for each customer.",
          "code": "SELECT CustomerId, SUM(Total) AS TotalSpending\nFROM invoices\nGROUP BY CustomerId\nORDER BY TotalSpending DESC;"
        }
      ],
      "practice_activities": [
        "Download the Chinook database (available as a .sqlite file online).",
        "Use a DB browser or an online tool to connect to the database.",
        "Write and execute SQL queries to answer the sample tasks and any other questions you can think of.",
        "Challenge: Find the artist who has earned the most money."
      ],
      "summary": "Congratulations on completing Week 1! You've gone from basic queries to complex analysis in SQL. This solid foundation is essential for the next step: using Python and Pandas to work with this data.",
      "resources": ["https://youtube.com/watch?v=y3CDecuUK_4&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 8,
      "title": "Introduction to Pandas: Series & DataFrames",
      "introduction": "Welcome to Pandas! Pandas is the most popular Python library for data manipulation and analysis. Today, we'll learn about its two core data structures: the Series (a 1D array) and the DataFrame (a 2D table).",
      "learning_objectives": [
        "Understand the purpose and power of the Pandas library.",
        "Create a Pandas Series from a list or dictionary.",
        "Create a Pandas DataFrame from a dictionary or list of lists.",
        "Understand the components of a DataFrame: index, columns, and data."
      ],
      "key_concepts": [
        "Pandas Library",
        "Series (1D data structure)",
        "DataFrame (2D data structure)",
        "Index"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "What is Pandas?" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "Pandas provides high-performance, easy-to-use data structures and data analysis tools for Python. It's the de facto standard for working with tabular data in Python." }]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "The DataFrame" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "The DataFrame is the central data structure in Pandas. Think of it as a spreadsheet or a SQL table, but with powerful methods to manipulate and analyze the data. It consists of data, an index (for rows), and columns." }]
          }
        ]
      },
      "examples": [
        {
          "description": "Creating a Pandas Series from a list.",
          "code": "import pandas as pd\n\ns = pd.Series([10, 20, 30, 40], name='my_numbers')\nprint(s)"
        },
        {
          "description": "Creating a Pandas DataFrame from a dictionary.",
          "code": "import pandas as pd\n\ndata = {'Name': ['Alice', 'Bob', 'Charlie'], 'Age': [25, 30, 35]}\ndf = pd.DataFrame(data)\nprint(df)"
        }
      ],
      "practice_activities": [
        "In a Jupyter Notebook, import the pandas library with the alias 'pd'.",
        "Create a Series representing the population of 5 different cities.",
        "Create a DataFrame with columns for 'Product Name', 'Price', and 'In Stock' (boolean) for at least 3 products."
      ],
      "summary": "You've been introduced to Pandas and its fundamental building blocks, the Series and DataFrame. You can now create these structures from scratch, preparing you to load real-world data in the next lesson.",
      "resources": ["https://youtube.com/watch?v=U_xMLEnGivg&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D", "https://youtube.com/watch?v=QOXFKi9ss8o&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D", "https://youtube.com/watch?v=0B_nZm6lgNs&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 9,
      "title": "Loading Data with Pandas",
      "introduction": "Manually creating DataFrames is good for learning, but in practice, you'll load data from external sources. Today, we'll focus on the most common methods: reading from CSV files, Excel files, and directly from a SQL database.",
      "learning_objectives": [
        "Load data from a CSV file into a DataFrame using `pd.read_csv()`.",
        "Load data from an Excel file into a DataFrame using `pd.read_excel()`.",
        "Execute a SQL query and load the results into a DataFrame using `pd.read_sql()`."
      ],
      "key_concepts": [
        "pd.read_csv()",
        "pd.read_excel()",
        "pd.read_sql()",
        "Database Connection (SQLAlchemy)"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Reading CSV and Excel Files" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "CSV (Comma-Separated Values) is a very common format for storing tabular data. Pandas makes reading them incredibly simple with the " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "pd.read_csv()" },
              { "type": "text", "text": " function. Similarly, " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "pd.read_excel()" },
              { "type": "text", "text": " can be used for Excel files. You may need to install an extra library like " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "openpyxl" },
              { "type": "text", "text": " for Excel support." }
            ]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Querying Databases" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "Bridging the gap from last week, you can execute a SQL query and load its results directly into a DataFrame. This requires a database connection object, often created using a library like " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "SQLAlchemy" },
              { "type": "text", "text": "." }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Read data from a local CSV file named 'sales.csv'.",
          "code": "import pandas as pd\n\ndf = pd.read_csv('sales.csv')\nprint(df.head())"
        },
        {
          "description": "Read data from a SQL database (requires setup).",
          "code": "import pandas as pd\nfrom sqlalchemy import create_engine\n\n# Example for SQLite\nengine = create_engine('sqlite:///chinook.db')\nquery = 'SELECT * FROM artists;'\ndf_artists = pd.read_sql(query, engine)\nprint(df_artists.head())"
        }
      ],
      "practice_activities": [
        "Find a simple CSV dataset online (e.g., from Kaggle or data.gov) and download it.",
        "Write code in a Jupyter Notebook to load the CSV file into a Pandas DataFrame.",
        "If you have the Chinook database from last week, try to load the 'invoices' table into a DataFrame."
      ],
      "summary": "You are now able to ingest data from the most common sources (CSV, Excel, SQL) into a Pandas DataFrame. This skill is the starting point for nearly every data analysis project.",
      "resources": ["https://youtube.com/watch?v=IR2D0rrF2ow&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D", "https://youtube.com/watch?v=y3CDecuUK_4&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 10,
      "title": "Data Inspection & Exploration",
      "introduction": "Once your data is loaded, the first step is always to understand it. Pandas provides a suite of simple but powerful functions to quickly inspect the structure, content, and statistical properties of your DataFrame.",
      "learning_objectives": [
        "View the first and last few rows of a DataFrame using `.head()` and `.tail()`.",
        "Get a concise summary of the DataFrame with `.info()`.",
        "Generate descriptive statistics using `.describe()`.",
        "Check the dimensions of the DataFrame with `.shape` and column names with `.columns`."
      ],
      "key_concepts": [
        ".head() / .tail()",
        ".info()",
        ".describe()",
        ".shape",
        ".columns",
        ".value_counts()"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "First Look at the Data" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "marks": [{ "type": "code" }], "text": ".head(n)" },
              { "type": "text", "text": " and " },
              { "type": "text", "marks": [{ "type": "code" }], "text": ".tail(n)" },
              { "type": "text", "text": " are essential for peeking at your data without displaying the entire (potentially huge) DataFrame. The " },
              { "type": "text", "marks": [{ "type": "code" }], "text": ".shape" },
              { "type": "text", "text": " attribute tells you the number of rows and columns." }
            ]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Summarizing the DataFrame" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "marks": [{ "type": "code" }], "text": ".info()" },
              { "type": "text", "text": " provides a technical summary, including the data type of each column and the number of non-null values. " },
              { "type": "text", "marks": [{ "type": "code" }], "text": ".describe()" },
              { "type": "text", "text": " gives a statistical summary (count, mean, std, etc.) for numerical columns." }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Load a CSV and inspect its first 5 rows.",
          "code": "import pandas as pd\ndf = pd.read_csv('data.csv')\nprint(df.head())"
        },
        {
          "description": "Get a summary of data types and null values.",
          "code": "df.info()"
        },
        {
          "description": "Get statistical summary of numerical columns.",
          "code": "print(df.describe())"
        }
      ],
      "practice_activities": [
        "Load the dataset you used yesterday.",
        "Use `.head()` and `.tail()` to view the start and end of the data.",
        "Use `.info()` to check for missing values and incorrect data types.",
        "Use `.describe()` to understand the distribution of numerical features.",
        "Use `.value_counts()` on a categorical column to see the frequency of each category."
      ],
      "summary": "You now have a toolkit of essential commands for the initial exploration of any dataset. This 'data profiling' step is crucial for planning your cleaning and analysis strategy.",
      "resources": ["https://youtube.com/watch?v=nUxhQw3cojg&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi7SBwkJ2AkBhyohjO8%3D", "https://youtube.com/watch?v=yIV1PQnnSbw&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 11,
      "title": "Selecting & Indexing Data",
      "introduction": "A key part of data analysis is selecting subsets of your data to examine or modify. Today, we'll master the primary ways to select rows and columns in Pandas: label-based indexing with `.loc` and integer-based indexing with `.iloc`.",
      "learning_objectives": [
        "Select columns by name.",
        "Select rows and columns by label using `.loc`.",
        "Select rows and columns by integer position using `.iloc`.",
        "Use boolean indexing to filter data based on conditions."
      ],
      "key_concepts": [
        "Column Selection (`df['col_name']`)",
        "Label-based indexing (`.loc`)",
        "Integer-position based indexing (`.iloc`)",
        "Boolean Indexing / Conditional Selection"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "loc vs. iloc" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "marks": [{ "type": "bold" }], "text": ".loc" },
              { "type": "text", "text": " is primarily label-based. You use it with the names of your rows (index) and columns. The syntax is " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "df.loc[row_labels, column_labels]" },
              { "type": "text", "text": "." }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "marks": [{ "type": "bold" }], "text": ".iloc" },
              { "type": "text", "text": " is primarily integer position-based. You use it with the integer index of rows and columns. The syntax is " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "df.iloc[row_positions, column_positions]" },
              { "type": "text", "text": "." }
            ]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Boolean Indexing" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "This is a powerful technique where you filter the DataFrame based on a True/False condition, similar to the SQL WHERE clause. For example, `df[df['Age'] > 30]`." }]
          }
        ]
      },
      "examples": [
        {
          "description": "Select the 'Age' column for all rows.",
          "code": "ages = df['Age']"
        },
        {
          "description": "Select rows with index labels 0 to 4, and columns 'Name' and 'Age' using .loc.",
          "code": "subset = df.loc[0:4, ['Name', 'Age']]"
        },
        {
          "description": "Select the first 5 rows and first 2 columns using .iloc.",
          "code": "subset = df.iloc[0:5, 0:2]"
        },
        {
          "description": "Select all rows where the country is 'Canada'.",
          "code": "canadian_customers = df[df['Country'] == 'Canada']"
        }
      ],
      "practice_activities": [
        "Load your dataset.",
        "Select two specific columns and store them in a new DataFrame.",
        "Use `.iloc` to select the last 10 rows and the first 3 columns.",
        "Use boolean indexing to create a new DataFrame containing only records that meet a certain condition (e.g., price > 100, year == 2023)."
      ],
      "summary": "You have mastered the essential techniques for slicing and dicing your data. The ability to efficiently select subsets of data with `.loc`, `.iloc`, and boolean indexing is fundamental to all subsequent analysis.",
      "resources": ["https://youtube.com/watch?v=0GOomORRSoI&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 12,
      "title": "Data Cleaning: Handling Missing Values",
      "introduction": "Real-world data is rarely perfect. It often contains missing values (represented as `NaN` in Pandas). Today, we'll learn the common strategies for identifying and handling these missing values.",
      "learning_objectives": [
        "Identify missing values in a DataFrame using `.isnull()` and `.sum()`.",
        "Remove rows or columns with missing values using `.dropna()`.",
        "Fill missing values with a specific value, mean, median, or mode using `.fillna()`."
      ],
      "key_concepts": [
        "NaN (Not a Number)",
        ".isnull() / .isna()",
        ".dropna()",
        ".fillna()"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Detecting Missing Data" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "The first step is to find out where the missing data is. Chaining " },
              { "type": "text", "marks": [{ "type": "code" }], "text": ".isnull().sum()" },
              { "type": "text", "text": " on a DataFrame is a quick and effective way to get a count of missing values per column." }
            ]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Strategies for Handling Missing Data" }]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  { "type": "paragraph", "content": [
                      { "type": "text", "marks": [{ "type": "bold" }], "text": "Dropping:" },
                      { "type": "text", "text": " Using `.dropna()`, you can remove rows or columns that contain any null values. This is simple but can lead to data loss." }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  { "type": "paragraph", "content": [
                      { "type": "text", "marks": [{ "type": "bold" }], "text": "Imputing/Filling:" },
                      { "type": "text", "text": " Using `.fillna()`, you can replace `NaN` values with something else. For numerical data, using the column's mean or median is common. For categorical data, the mode or a constant like 'Unknown' can be used." }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Count missing values in each column.",
          "code": "print(df.isnull().sum())"
        },
        {
          "description": "Drop all rows that have any missing value.",
          "code": "df_dropped = df.dropna()"
        },
        {
          "description": "Fill missing 'Age' values with the mean age.",
          "code": "mean_age = df['Age'].mean()\ndf['Age'].fillna(mean_age, inplace=True)"
        }
      ],
      "practice_activities": [
        "Load a dataset and check for missing values.",
        "Decide on a strategy for each column with missing data (drop or fill).",
        "For a numerical column, fill missing values with the median. Print the value counts before and after to see the change.",
        "For a categorical column, fill missing values with the string 'Missing'.",
        "Verify that there are no more missing values using `.isnull().sum()`."
      ],
      "summary": "You can now systematically detect and handle missing data, a critical step in preparing a dataset for analysis. Knowing when to drop versus when to fill is a key skill you'll develop with experience.",
      "resources": ["https://youtube.com/watch?v=y3CDecuUK_4&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 13,
      "title": "Data Cleaning: Data Types & Duplicates",
      "introduction": "Continuing our data cleaning journey, today we'll tackle two more common issues: incorrect data types and duplicate records. Fixing these ensures the integrity and accuracy of your analysis.",
      "learning_objectives": [
        "Check column data types using `.dtypes`.",
        "Convert column data types using `.astype()`.",
        "Identify and remove duplicate rows using `.duplicated()` and `.drop_duplicates()`."
      ],
      "key_concepts": [
        ".dtypes",
        ".astype()",
        "pd.to_datetime()",
        ".duplicated()",
        ".drop_duplicates()"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Correcting Data Types" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "Sometimes numbers are read as strings or dates as generic objects. The " },
              { "type": "text", "marks": [{ "type": "code" }], "text": ".astype()" },
              { "type": "text", "text": " method allows you to convert a column to a specified type (e.g., 'int', 'float', 'category'). For dates, the specialized " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "pd.to_datetime()" },
              { "type": "text", "text": " function is highly recommended." }
            ]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Handling Duplicates" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "Duplicate records can skew your analysis, especially aggregations. " },
              { "type": "text", "marks": [{ "type": "code" }], "text": ".duplicated()" },
              { "type": "text", "text": " returns a boolean Series indicating which rows are duplicates, while " },
              { "type": "text", "marks": [{ "type": "code" }], "text": ".drop_duplicates()" },
              { "type": "text", "text": " returns a DataFrame with the duplicates removed." }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Convert a 'price_string' column (e.g., '$5.99') to a float.",
          "code": "df['price_float'] = df['price_string'].replace('[\\$,]', '', regex=True).astype(float)"
        },
        {
          "description": "Convert a 'date_string' column to datetime objects.",
          "code": "df['date'] = pd.to_datetime(df['date_string'])"
        },
        {
          "description": "Remove duplicate rows based on all columns.",
          "code": "df_no_duplicates = df.drop_duplicates()"
        },
        {
          "description": "Remove rows where the 'customer_id' is duplicated, keeping the first occurrence.",
          "code": "df_unique_customers = df.drop_duplicates(subset=['customer_id'], keep='first')"
        }
      ],
      "practice_activities": [
        "Load your dataset and check the data types with `.dtypes`.",
        "Identify any columns that have an incorrect type (e.g., a number column that is an 'object').",
        "Use `.astype()` or `pd.to_datetime()` to fix them.",
        "Check for duplicate rows in your dataset. How many are there?",
        "Remove the duplicates and verify the new shape of the DataFrame."
      ],
      "summary": "You've added two more essential data cleaning skills to your repertoire: correcting data types and removing duplicates. Your data is now significantly cleaner and more reliable for analysis.",
      "resources": ["https://youtube.com/watch?v=y3CDecuUK_4&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 14,
      "title": "Week 2 Review & Mini-Project",
      "introduction": "You've spent this week diving into the world of Pandas. Today, we'll bring it all together. You'll perform a complete data loading and cleaning exercise on a new dataset, applying all the skills from this week.",
      "learning_objectives": [
        "Reinforce all Pandas concepts learned in Week 2.",
        "Perform a full data loading and cleaning workflow on a raw dataset.",
        "Document the cleaning process and the state of the data before and after."
      ],
      "key_concepts": [
        "Data Loading (read_csv)",
        "Data Inspection (head, info, describe)",
        "Data Selection (loc, iloc, boolean indexing)",
        "Data Cleaning (dropna, fillna, astype, drop_duplicates)"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Project Goal" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "Find a messy, real-world dataset. Your task is to load it into a Pandas DataFrame and perform a comprehensive cleaning process. The end result should be a clean, tidy DataFrame ready for analysis." }]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Workflow" }]
          },
          {
            "type": "orderedList",
            "attrs": { "start": 1 },
            "content": [
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Load the data." }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Inspect the data (`.info()`, `.head()`, `.describe()`)." }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Handle missing values." }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Correct data types." }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Remove duplicates." }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Final verification (`.info()`) to confirm the data is clean." }] }]
              }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "A template for your project notebook.",
          "code": "# 1. Load Data\ndf = pd.read_csv('messy_data.csv')\n\n# 2. Initial Inspection\nprint('--- Before Cleaning ---')\ndf.info()\n\n# 3. Cleaning Steps (Missing Values, Types, Duplicates)\n# ... your code here ...\n\n# 4. Final Verification\nprint('\\n--- After Cleaning ---')\ndf.info()"
        }
      ],
      "practice_activities": [
        "Find a suitable dataset (Kaggle is a great source for datasets with known issues).",
        "Create a new Jupyter Notebook for this project.",
        "Follow the workflow described above, adding markdown cells to explain your decisions (e.g., 'I chose to fill missing age with the median because the distribution is skewed').",
        "Save the cleaned DataFrame to a new CSV file named 'cleaned_data.csv'."
      ],
      "summary": "Fantastic work this week! You've transitioned from SQL to Pandas and can now confidently load, inspect, and clean real-world data. This is a massive step in your data analytics journey. Next week, we'll start analyzing this clean data.",
      "resources": ["https://youtube.com/watch?v=U_xMLEnGivg&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D", "https://youtube.com/watch?v=0GOomORRSoI&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D", "https://youtube.com/watch?v=y3CDecuUK_4&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 15,
      "title": "Grouping & Aggregation in Pandas",
      "introduction": "Remember `GROUP BY` in SQL? Pandas has its own powerful and flexible version. Today you'll learn how to use the `.groupby()` method to split your data into groups, apply a function to each group, and combine the results.",
      "learning_objectives": [
        "Group a DataFrame by one or more columns using `.groupby()`.",
        "Apply aggregate functions like `.sum()`, `.mean()`, `.count()` to grouped data.",
        "Use the `.agg()` method for more complex aggregations."
      ],
      "key_concepts": [
        "Split-Apply-Combine Strategy",
        ".groupby()",
        "Aggregate Functions (.sum, .mean, .size, .count)",
        ".agg()"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "The Split-Apply-Combine Pattern" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "This is the core idea behind " },
              { "type": "text", "marks": [{ "type": "code" }], "text": ".groupby()" },
              { "type": "text", "text": ". First, you " },
              { "type": "text", "marks": [{ "type": "bold" }], "text": "split" },
              { "type": "text", "text": " the data into groups based on some criteria. Then, you " },
              { "type": "text", "marks": [{ "type": "bold" }], "text": "apply" },
              { "type": "text", "text": " a function to each group independently (e.g., calculate the sum). Finally, you " },
              { "type": "text", "marks": [{ "type": "bold" }], "text": "combine" },
              { "type": "text", "text": " the results into a new data structure." }
            ]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Advanced Aggregation with .agg()" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "The " },
              { "type": "text", "marks": [{ "type": "code" }], "text": ".agg()" },
              { "type": "text", "text": " method allows you to apply multiple aggregation functions at once, and even apply different functions to different columns, giving you fine-grained control over your summary table." }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Group by 'Category' and find the mean 'Price' for each.",
          "code": "df.groupby('Category')['Price'].mean()"
        },
        {
          "description": "Group by 'Region' and count the number of sales in each.",
          "code": "df.groupby('Region')['Sale_ID'].count()"
        },
        {
          "description": "Group by 'Department' and calculate the sum of 'Sales' and the mean of 'Quantity' for each.",
          "code": "df.groupby('Department').agg(\n    total_sales=('Sales', 'sum'),\n    avg_quantity=('Quantity', 'mean')\n)"
        }
      ],
      "practice_activities": [
        "Load your cleaned dataset from the Week 2 project.",
        "Group the data by a categorical column and calculate the average of a numerical column.",
        "Group by two different columns and find the total sum for a third column.",
        "Use `.agg()` to find the min, max, and sum of a numerical column for each group in your data."
      ],
      "summary": "You can now perform one of the most common and powerful data analysis tasks: grouping and aggregation. This skill, directly analogous to SQL's GROUP BY, allows you to derive high-level insights from detailed data.",
      "resources": ["https://youtube.com/watch?v=nUxhQw3cojg&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi7SBwkJ2AkBhyohjO8%3D"]
    },
    {
      "day": 16,
      "title": "Merging, Joining, and Concatenating DataFrames",
      "introduction": "Just like with SQL, data often lives in multiple tables (or DataFrames). Today, you'll learn the Pandas equivalents of SQL JOINs (`pd.merge`) and UNIONs (`pd.concat`) to combine data from different sources.",
      "learning_objectives": [
        "Combine DataFrames vertically using `pd.concat()`.",
        "Combine DataFrames horizontally based on a key, similar to SQL joins, using `pd.merge()`.",
        "Understand the different types of joins: inner, left, right, outer."
      ],
      "key_concepts": [
        "pd.concat()",
        "pd.merge()",
        "Join Keys",
        "Join Types (inner, left, right, outer)"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Concatenating (Stacking)" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "marks": [{ "type": "code" }], "text": "pd.concat()" },
              { "type": "text", "text": " is used to stack DataFrames on top of each other (axis=0) or side-by-side (axis=1). It's like a SQL UNION operation. The DataFrames should ideally have the same columns for vertical concatenation." }
            ]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Merging (Joining)" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "marks": [{ "type": "code" }], "text": "pd.merge()" },
              { "type": "text", "text": " is the Pandas equivalent of SQL JOINs. It combines DataFrames based on the values in one or more common columns (the 'keys'). You can specify the join type using the " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "how" },
              { "type": "text", "text": " parameter: 'inner', 'left', 'right', or 'outer'." }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Concatenate two DataFrames of sales data from different months.",
          "code": "df_jan = pd.DataFrame(...)\ndf_feb = pd.DataFrame(...)\ndf_total = pd.concat([df_jan, df_feb])"
        },
        {
          "description": "Merge a 'customers' DataFrame with an 'orders' DataFrame (inner join).",
          "code": "merged_df = pd.merge(customers_df, orders_df, on='customer_id', how='inner')"
        },
        {
          "description": "Merge 'customers' with 'orders', keeping all customers (left join).",
          "code": "merged_df = pd.merge(customers_df, orders_df, on='customer_id', how='left')"
        }
      ],
      "practice_activities": [
        "Create two simple DataFrames: one with `customer_id` and `customer_name`, another with `order_id` and `customer_id`.",
        "Use `pd.merge` to perform an inner join between them.",
        "Perform a left join to see which customers have not placed an order.",
        "Create a third DataFrame with the same columns as the orders data and use `pd.concat` to combine them."
      ],
      "summary": "You can now combine data from multiple DataFrames using concatenation and merging. This is a crucial skill for creating a single, comprehensive dataset for analysis from various sources.",
      "resources": ["https://youtube.com/watch?v=0GOomORRSoI&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 17,
      "title": "Applying Functions & Transformations",
      "introduction": "Sometimes, you need to perform custom operations on your data that aren't covered by built-in functions. Today, you'll learn how to apply your own functions to DataFrames to create new columns or transform existing ones.",
      "learning_objectives": [
        "Create new columns based on existing column data.",
        "Apply a function to each element of a Series using `.map()`.",
        "Apply a function along an axis of a DataFrame using `.apply()`.",
        "Use lambda functions for concise, one-off operations."
      ],
      "key_concepts": [
        "Feature Engineering",
        ".map()",
        ".apply()",
        "Lambda Functions"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Creating New Columns" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "The simplest transformation is creating a new column by performing a vectorized operation on existing columns, like `df['Revenue'] = df['Price'] * df['Quantity']`." }]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Using .apply() for Complex Logic" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "For more complex, row-wise logic, you can use " },
              { "type": "text", "marks": [{ "type": "code" }], "text": ".apply()" },
              { "type": "text", "text": ". You define a function that takes a row as input and returns a single value. Then, you apply this function to the DataFrame to create a new column." }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Create a new column 'Price_Category' based on 'Price'.",
          "code": "def categorize_price(price):\n    if price > 100:\n        return 'High'\n    elif price > 50:\n        return 'Medium'\n    else:\n        return 'Low'\n\ndf['Price_Category'] = df['Price'].apply(categorize_price)"
        },
        {
          "description": "Use a lambda function with .apply() to calculate the profit margin.",
          "code": "df['Profit_Margin'] = df.apply(lambda row: (row['Price'] - row['Cost']) / row['Price'], axis=1)"
        }
      ],
      "practice_activities": [
        "Load your cleaned dataset.",
        "Create a new column that is the result of a simple arithmetic operation on two existing columns.",
        "Write a function that takes a value from a column and returns a categorized string (e.g., 'Small', 'Medium', 'Large'). Use `.apply()` to create a new category column.",
        "Rewrite the previous step using a lambda function."
      ],
      "summary": "You can now go beyond built-in functions and apply custom logic to transform your data. This is key for feature engineering—creating new, informative features that can improve your analysis and models.",
      "resources": ["https://youtube.com/watch?v=nUxhQw3cojg&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi7SBwkJ2AkBhyohjO8%3D"]
    },
    {
      "day": 18,
      "title": "Intro to Data Visualization with Matplotlib/Seaborn",
      "introduction": "A picture is worth a thousand words, and in data analysis, a plot is worth a thousand rows. Today we'll introduce two key Python visualization libraries: Matplotlib (the foundation) and Seaborn (a high-level, statistically-focused library built on top).",
      "learning_objectives": [
        "Understand the roles of Matplotlib and Seaborn.",
        "Create a simple plot directly from a Pandas DataFrame.",
        "Understand the basic components of a plot: figure, axes, title, labels."
      ],
      "key_concepts": [
        "Data Visualization",
        "Matplotlib",
        "Seaborn",
        "Figure and Axes",
        "Plotting directly from Pandas (`.plot()`)"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Matplotlib and Seaborn" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "Matplotlib is the original, powerful, and highly customizable plotting library in Python. Seaborn is built on top of Matplotlib and provides a simpler, more attractive interface for creating common statistical plots. We will often use them together." }]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Basic Plotting with Pandas" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "Pandas DataFrames have a built-in " },
              { "type": "text", "marks": [{ "type": "code" }], "text": ".plot()" },
              { "type": "text", "text": " method which is a wrapper around Matplotlib. It's a quick and easy way to generate basic plots without importing the plotting libraries directly." }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Create a simple line plot from a Pandas Series.",
          "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ns = pd.Series([1, 3, 2, 5, 4])\ns.plot(title='My First Plot')\nplt.show() # Display the plot"
        },
        {
          "description": "Create a basic bar plot using Seaborn.",
          "code": "import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Assuming df has 'Category' and 'Sales' columns\nsns.barplot(x='Category', y='Sales', data=df)\nplt.title('Sales by Category')\nplt.show()"
        }
      ],
      "practice_activities": [
        "Import `matplotlib.pyplot` as `plt` and `seaborn` as `sns`.",
        "Take a numerical column from your dataset and create a simple line plot using the `.plot()` method.",
        "Use `plt.title()`, `plt.xlabel()`, and `plt.ylabel()` to add labels to your plot.",
        "Display your plot using `plt.show()`."
      ],
      "summary": "You've taken your first steps into data visualization, understanding the roles of Matplotlib and Seaborn and creating your first plot. Visualizing data is critical for understanding patterns and communicating findings.",
      "resources": ["https://youtube.com/watch?v=PSNXoAs2FtQ&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 19,
      "title": "Creating Basic Plots (Bar, Line, Scatter)",
      "introduction": "Today we'll focus on creating three of the most fundamental and widely used plot types: bar plots for comparing categories, line plots for showing trends over time, and scatter plots for exploring relationships between variables.",
      "learning_objectives": [
        "Create and customize bar plots to compare categorical data.",
        "Create and customize line plots to visualize time series data.",
        "Create and customize scatter plots to show the relationship between two numerical variables."
      ],
      "key_concepts": [
        "Bar Plot (`sns.barplot`)",
        "Line Plot (`sns.lineplot`)",
        "Scatter Plot (`sns.scatterplot`)",
        "Hue (coloring by category)"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Choosing the Right Plot" }]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "marks": [{ "type": "bold" }], "text": "Bar Plot:" }, { "type": "text", "text": " Use when you have one categorical variable and one numerical variable." }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "marks": [{ "type": "bold" }], "text": "Line Plot:" }, { "type": "text", "text": " Ideal for showing how a numerical variable changes over a continuous variable, usually time." }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "marks": [{ "type": "bold" }], "text": "Scatter Plot:" }, { "type": "text", "text": " Use to visualize the relationship between two numerical variables." }] }]
              }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Bar plot of average sales per region.",
          "code": "sns.barplot(x='Region', y='Sales', data=df)"
        },
        {
          "description": "Line plot of sales over time.",
          "code": "# Assuming 'Date' is a datetime column and df is sorted by date\nsns.lineplot(x='Date', y='Sales', data=df)"
        },
        {
          "description": "Scatter plot of advertising spend vs. sales.",
          "code": "sns.scatterplot(x='Ad_Spend', y='Sales', data=df)"
        }
      ],
      "practice_activities": [
        "Using your cleaned dataset, create a bar plot comparing a numerical value across different categories.",
        "If you have a date/time column, create a line plot to show a trend over time.",
        "Choose two numerical columns and create a scatter plot to see if there's a relationship. Use the `hue` parameter to color the points by a third, categorical variable."
      ],
      "summary": "You can now create the three most common types of plots to answer fundamental analytical questions about comparisons, trends, and relationships. This is a powerful storytelling tool.",
      "resources": ["https://youtube.com/watch?v=nUxhQw3cojg&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi7SBwkJ2AkBhyohjO8%3D"]
    },
    {
      "day": 20,
      "title": "Time Series Analysis with Pandas",
      "introduction": "Many datasets involve time, from daily sales to stock prices. Pandas has powerful, built-in capabilities specifically for working with time series data. Today, we'll learn how to leverage these features.",
      "learning_objectives": [
        "Ensure a column is in the proper datetime format.",
        "Set a datetime column as the DataFrame index.",
        "Resample time series data to different frequencies (e.g., from daily to monthly).",
        "Calculate rolling window statistics (e.g., moving averages)."
      ],
      "key_concepts": [
        "Datetime Index",
        "Resampling (`.resample()`)",
        "Rolling Windows (`.rolling()`)"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "The Datetime Index" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "Setting a datetime column as the index of your DataFrame unlocks a host of time series-specific functionalities, making slicing, dicing, and analyzing by time much easier." }]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Resampling and Rolling" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "marks": [{ "type": "code" }], "text": ".resample()" },
              { "type": "text", "text": " is like a `groupby()` for time. It allows you to aggregate data to a different time frequency (e.g., from daily to monthly sums). " },
              { "type": "text", "marks": [{ "type": "code" }], "text": ".rolling()" },
              { "type": "text", "text": " is used for calculating statistics over a sliding window, perfect for things like moving averages to smooth out data." }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Set the 'Date' column as the index.",
          "code": "df['Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)"
        },
        {
          "description": "Resample daily sales data to get monthly total sales.",
          "code": "monthly_sales = df['Sales'].resample('M').sum()"
        },
        {
          "description": "Calculate the 7-day rolling average of sales.",
          "code": "df['7_Day_Moving_Avg'] = df['Sales'].rolling(window=7).mean()"
        }
      ],
      "practice_activities": [
        "Load a dataset with a time component.",
        "Convert the time column to datetime objects and set it as the index.",
        "Resample your data to a lower frequency (e.g., weekly or quarterly) and calculate the mean or sum.",
        "Calculate a 30-day rolling average for a numerical column and plot it alongside the original data."
      ],
      "summary": "You've unlocked the specialized time series capabilities of Pandas. You can now effectively analyze trends, aggregate data over time periods, and calculate rolling statistics like moving averages.",
      "resources": ["https://youtube.com/watch?v=PSNXoAs2FtQ&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 21,
      "title": "Week 3 Review & Mini-Project",
      "introduction": "This week was all about analysis and visualization. You learned to group, merge, transform, and plot your data. Today's mini-project will have you perform an end-to-end analysis on a dataset, culminating in key insights and visualizations.",
      "learning_objectives": [
        "Reinforce all analysis and visualization concepts from Week 3.",
        "Perform a exploratory data analysis (EDA) on a clean dataset.",
        "Generate meaningful aggregations and visualizations to answer business questions.",
        "Practice communicating findings through plots and annotations."
      ],
      "key_concepts": [
        "Grouping and Aggregation",
        "Merging DataFrames",
        "Applying Functions",
        "Visualization (Bar, Line, Scatter)",
        "Exploratory Data Analysis (EDA)"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Project Goal" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "Using the clean dataset from your Week 2 project, perform a full exploratory data analysis. The goal is to uncover interesting patterns and relationships in the data and present them clearly using plots." }]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Analysis Questions to Consider" }]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Who are the top customers/regions/products?" }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "How have key metrics changed over time?" }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Are there any interesting relationships between numerical variables?" }] }]
              }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Example analysis step: Find top 10 products by sales and plot them.",
          "code": "top_products = df.groupby('Product_Name')['Sales'].sum().nlargest(10)\nsns.barplot(x=top_products.values, y=top_products.index)\nplt.title('Top 10 Products by Sales')\nplt.show()"
        }
      ],
      "practice_activities": [
        "Load your cleaned dataset from Week 2.",
        "Create a new Jupyter Notebook for your analysis.",
        "Formulate 3-5 business questions you want to answer with the data.",
        "Use grouping, aggregation, and transformations to prepare the data to answer these questions.",
        "Create at least one bar plot, one line plot, and one scatter plot to visualize your findings.",
        "Use markdown cells to explain your plots and summarize your conclusions."
      ],
      "summary": "Congratulations on completing a full analysis! You've gone from raw data to clean data to insightful visualizations. This is the core workflow of a data analyst. Next week, we'll learn how to automate this entire process.",
      "resources": ["https://youtube.com/watch?v=nUxhQw3cojg&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi7SBwkJ2AkBhyohjO8%3D", "https://youtube.com/watch?v=yIV1PQnnSbw&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 22,
      "title": "Python Scripting for Data Tasks",
      "introduction": "Jupyter Notebooks are great for exploration, but for repeatable, automated tasks, we need Python scripts (.py files). Today, we'll learn how to convert the logic from a notebook into a reusable script.",
      "learning_objectives": [
        "Understand the difference between a Jupyter Notebook and a Python script.",
        "Convert notebook cells into a logical sequence in a .py file.",
        "Run a Python script from the command line.",
        "Encapsulate logic into functions."
      ],
      "key_concepts": [
        "Python Scripts (.py)",
        "Command Line Execution",
        "Functions",
        "Refactoring"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "From Notebook to Script" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "The process involves taking the code from your notebook cells and organizing it into a single .py file. All import statements go at the top. The linear exploration process from the notebook becomes a linear execution flow in the script." }]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "The Power of Functions" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "To make scripts reusable and easier to read, we encapsulate blocks of logic into functions. For example, you might have a `load_data()` function, a `clean_data()` function, and an `analyze_data()` function. This modular approach is key to building robust pipelines." }]
          }
        ]
      },
      "examples": [
        {
          "description": "A simple script `process_data.py` with a main function.",
          "code": "import pandas as pd\n\ndef main():\n    \"\"\"Main function to run the analysis.\"\"\"\n    df = pd.read_csv('raw_data.csv')\n    print('Data loaded successfully.')\n    df_cleaned = df.dropna()\n    print(f'Cleaned data has {len(df_cleaned)} rows.')\n    print('Script finished.')\n\nif __name__ == '__main__':\n    main()"
        },
        {
          "description": "Running the script from the terminal.",
          "code": "python process_data.py"
        }
      ],
      "practice_activities": [
        "Create a new file named `my_analysis_script.py` in your code editor.",
        "Copy the code from your Week 3 mini-project into this file.",
        "Organize the code into at least two functions: one for loading/cleaning and one for analysis/plotting.",
        "Add a `if __name__ == '__main__':` block to call your functions.",
        "Run your script from the command line."
      ],
      "summary": "You've made the crucial leap from interactive exploration to reproducible scripting. By converting your notebook logic into a Python script with functions, you've created a reusable asset that is the first step towards automation.",
      "resources": ["https://youtube.com/watch?v=yIV1PQnnSbw&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 23,
      "title": "Reading/Writing Files Programmatically",
      "introduction": "Automated pipelines need to interact with the file system without manual intervention. Today, we'll learn how to use Python's built-in libraries to handle files and directories, making our scripts more dynamic.",
      "learning_objectives": [
        "Read and write text files using Python's built-in `open()` function.",
        "Use the `os` library to check for file existence and create directories.",
        "Use the `pathlib` library for a modern, object-oriented way to handle file paths."
      ],
      "key_concepts": [
        "`open()` function",
        "`os` module (`os.path.exists`, `os.makedirs`)",
        "`pathlib` module (Path objects)"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "The `os` and `pathlib` Modules" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "The `os` module provides a way of using operating system dependent functionality. The `pathlib` module offers classes representing filesystem paths with semantics appropriate for different operating systems. `pathlib` is generally recommended for new code as it is more modern and intuitive." }
            ]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Practical Application" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "In a data pipeline, you might check if an 'output' directory exists, create it if it doesn't, and then save your processed DataFrame or plots into that directory. This makes your script robust and organized." }]
          }
        ]
      },
      "examples": [
        {
          "description": "Using pathlib to define input/output paths and ensure output directory exists.",
          "code": "from pathlib import Path\nimport pandas as pd\n\n# Define paths\ninput_file = Path('data/raw/sales.csv')\noutput_dir = Path('data/processed/')\n\n# Create output directory if it doesn't exist\noutput_dir.mkdir(parents=True, exist_ok=True)\n\n# Process data\ndf = pd.read_csv(input_file)\n# ... cleaning steps ...\n\n# Save cleaned data\noutput_file = output_dir / 'cleaned_sales.csv'\ndf.to_csv(output_file, index=False)"
        }
      ],
      "practice_activities": [
        "Modify your script from yesterday.",
        "Use `pathlib` to define variables for your input data file and a new output directory called 'reports'.",
        "Add code to your script that creates the 'reports' directory if it doesn't already exist.",
        "At the end of your script, save the final aggregated DataFrame to a CSV file inside the 'reports' directory.",
        "Also, save one of your plots as a PNG file in the same directory using `plt.savefig()`."
      ],
      "summary": "Your scripts can now intelligently interact with the file system. By using `pathlib` to manage paths and directories, you've made your automation pipeline more robust, organized, and portable.",
      "resources": ["https://youtube.com/watch?v=yIV1PQnnSbw&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 24,
      "title": "Building a Simple Data Pipeline (Function Chaining)",
      "introduction": "A data pipeline is a series of data processing steps. Today, we'll formalize the structure of our script into a clear pipeline, where the output of one function becomes the input of the next. This is known as function chaining.",
      "learning_objectives": [
        "Structure a script as a sequence of distinct, single-responsibility functions.",
        "Pass DataFrames between functions.",
        "Create a main 'orchestrator' function that calls the pipeline steps in order."
      ],
      "key_concepts": [
        "Data Pipeline",
        "Function Chaining",
        "Modularity",
        "Single Responsibility Principle"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Pipeline Structure" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "A typical pipeline structure involves functions for each logical step, such as:" }]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "`load_data()`: Reads the raw data and returns a DataFrame." }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "`clean_data(df)`: Takes a DataFrame, performs cleaning, and returns the cleaned DataFrame." }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "`analyze_data(df)`: Takes a clean DataFrame, performs analysis/aggregation, and returns the result." }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "`save_results(results_df)`: Saves the final output to a file." }] }]
              }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "Example of a chained pipeline in a main function.",
          "code": "def main():\n    \"\"\"Orchestrates the data pipeline.\"\"\"\n    raw_df = load_data('path/to/data.csv')\n    cleaned_df = clean_data(raw_df)\n    analysis_results = analyze_data(cleaned_df)\n    save_results(analysis_results, 'path/to/output.csv')\n    print('Pipeline completed successfully.')\n\nif __name__ == '__main__':\n    main()"
        }
      ],
      "practice_activities": [
        "Refactor your script from yesterday to follow the function chaining pipeline structure.",
        "Create separate functions for loading, cleaning, analyzing, and saving.",
        "Ensure each function has a docstring explaining what it does, its parameters, and what it returns.",
        "Create a `main()` function that calls these functions in the correct order, passing the DataFrame from one to the next."
      ],
      "summary": "You've now structured your code like a professional data engineer. By creating a modular pipeline with chained functions, your code is more readable, maintainable, and easier to debug and extend.",
      "resources": ["https://youtube.com/watch?v=yIV1PQnnSbw&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 25,
      "title": "Error Handling & Logging",
      "introduction": "Automated scripts must be robust. What happens if an input file is missing or the data is in an unexpected format? Today we'll learn how to handle potential errors gracefully and how to log information for debugging.",
      "learning_objectives": [
        "Use `try...except` blocks to handle potential errors like `FileNotFoundError`.",
        "Set up and use the `logging` module to record informational messages and errors.",
        "Differentiate between printing to the console and logging to a file."
      ],
      "key_concepts": [
        "Exception Handling",
        "`try...except` block",
        "`logging` module",
        "Log Levels (INFO, WARNING, ERROR)"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Handling Exceptions" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "A `try...except` block allows you to run code that might fail. The code in the `try` block is executed. If an error occurs, the code in the `except` block is run, preventing your script from crashing." }
            ]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Logging" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "Logging is a way to record the events of your script's execution to a file. This is much better than `print()` statements for an automated script, as it creates a permanent record you can inspect later to see what happened, especially if an error occurred." }]
          }
        ]
      },
      "examples": [
        {
          "description": "Using try...except to handle a missing file and logging the error.",
          "code": "import logging\n\nlogging.basicConfig(filename='pipeline.log', level=logging.INFO)\n\ntry:\n    logging.info('Attempting to load data...')\n    df = pd.read_csv('non_existent_file.csv')\n    logging.info('Data loaded successfully.')\nexcept FileNotFoundError as e:\n    logging.error(f'Failed to load data. Error: {e}')\n    # Exit the script or handle the error appropriately\n    exit()"
        }
      ],
      "practice_activities": [
        "In your pipeline script, configure the `logging` module at the top to write to a file named `data_pipeline.log`.",
        "Replace your `print()` statements with `logging.info()` statements (e.g., 'Starting data cleaning step...').",
        "Wrap your `load_data` function's core logic in a `try...except FileNotFoundError` block.",
        "If the file is not found, log a critical error using `logging.error()` and make the script exit gracefully.",
        "Run your script successfully. Then, rename the input file and run it again to see the error handling and logging in action."
      ],
      "summary": "Your pipeline is now significantly more robust. By implementing error handling and logging, you've ensured your script won't crash unexpectedly and that you'll have a detailed log to diagnose any issues that arise during automated runs.",
      "resources": ["https://youtube.com/watch?v=yIV1PQnnSbw&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 26,
      "title": "Introduction to Task Scheduling",
      "introduction": "The final step in automation is to make the script run automatically on a schedule. Today, we'll learn about the tools used to schedule tasks on different operating systems, so your pipeline can run daily or weekly without any manual intervention.",
      "learning_objectives": [
        "Understand the concept of a cron job (Linux/macOS).",
        "Understand the concept of Task Scheduler (Windows).",
        "Write a basic cron expression to define a schedule.",
        "Know how to construct the command to run a Python script."
      ],
      "key_concepts": [
        "Task Scheduling",
        "Cron (Linux/macOS)",
        "Crontab",
        "Cron Expression",
        "Task Scheduler (Windows)"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Cron on Linux and macOS" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "Cron is a time-based job scheduler in Unix-like operating systems. You edit a file called a 'crontab' to add jobs. Each job consists of a cron expression defining the schedule, and the command to be executed." }
            ]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "A Cron Expression" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "A cron expression has 5 fields: minute, hour, day of month, month, day of week. For example, " },
              { "type": "text", "marks": [{ "type": "code" }], "text": "0 9 * * 1" },
              { "type": "text", "text": " means 'at 9:00 AM on every Monday'." }
            ]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Task Scheduler on Windows" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "Windows uses a graphical tool called Task Scheduler. You create a new task, define triggers (the schedule), and specify the action (running your Python script)." }]
          }
        ]
      },
      "examples": [
        {
          "description": "Example crontab entry to run a script every day at 7 AM.",
          "code": "# Use `crontab -e` to edit, then add this line:\n0 7 * * * /usr/bin/python3 /path/to/your/project/pipeline.py"
        },
        {
          "description": "Example crontab entry to run a script every Monday at 8:30 AM.",
          "code": "30 8 * * 1 /path/to/your/venv/bin/python /path/to/your/project/pipeline.py"
        }
      ],
      "practice_activities": [
        "Open the task scheduler on your OS (search for 'crontab' on Mac/Linux terminal, or 'Task Scheduler' on Windows).",
        "Create a task that runs your pipeline script.",
        "Schedule it to run 5 minutes from your current time to test it.",
        "Make sure your script writes to its log file when it runs.",
        "Check the log file after the scheduled time to confirm that the script ran automatically."
      ],
      "summary": "You have now fully automated your data pipeline! By learning to schedule your script, you've created a system that can provide updated analysis and reports on a regular basis with zero manual effort.",
      "resources": ["https://youtube.com/watch?v=yIV1PQnnSbw&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 27,
      "title": "Parameterizing Scripts with Command-Line Arguments",
      "introduction": "Hardcoding file paths or dates into a script makes it inflexible. To make our pipelines truly reusable, we can pass in parameters from the command line. Today we'll learn to use Python's `argparse` library to do this.",
      "learning_objectives": [
        "Understand the need for command-line arguments.",
        "Use the `argparse` library to define and parse arguments.",
        "Modify the pipeline to accept input file paths and output directories as arguments."
      ],
      "key_concepts": [
        "Command-Line Arguments",
        "`argparse` module",
        "Positional Arguments",
        "Optional Arguments"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Why Parameterize?" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "Imagine you want to run the same analysis on a different dataset, or save the output to a different location. Instead of editing the script each time, you can pass these values as arguments when you run it, making it far more versatile." }]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Using `argparse`" }]
          },
          {
            "type": "paragraph",
            "content": [
              { "type": "text", "text": "The `argparse` module makes it easy to write user-friendly command-line interfaces. You define what arguments your program requires, and `argparse` will figure out how to parse those out of `sys.argv`. It also automatically generates help and usage messages." }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "A script `process.py` that accepts an input and output file path.",
          "code": "import argparse\n\nparser = argparse.ArgumentParser(description='Process some data.')\nparser.add_argument('--input', required=True, help='Path to the input data file.')\nparser.add_argument('--output', required=True, help='Path to the output directory.')\n\nargs = parser.parse_args()\n\nprint(f'Input file: {args.input}')\nprint(f'Output dir: {args.output}')"
        },
        {
          "description": "How to run the script from the command line.",
          "code": "python process.py --input data/sales_2023.csv --output reports/2023/"
        }
      ],
      "practice_activities": [
        "Integrate `argparse` into your main pipeline script.",
        "Add two required arguments: `--input_file` and `--output_dir`.",
        "Remove the hardcoded file paths from your script and use the parsed arguments instead.",
        "Update your main function to accept these paths as parameters.",
        "Run your script from the command line, providing the paths as arguments."
      ],
      "summary": "Your pipeline is now flexible and reusable. By using `argparse` to accept command-line arguments, you can easily adapt your script to different inputs and outputs without changing a single line of code.",
      "resources": ["https://youtube.com/watch?v=yIV1PQnnSbw&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 28,
      "title": "Capstone Project - Part 1: Design & Setup",
      "introduction": "It's time to bring everything together in a final capstone project. Over the next three days, you will build a complete, automated data analytics pipeline from scratch. Today's focus is on planning, design, and setting up the project structure.",
      "learning_objectives": [
        "Select a dataset for the capstone project.",
        "Define a clear analytical objective or business question.",
        "Design the steps of the data pipeline.",
        "Set up the project directory structure."
      ],
      "key_concepts": [
        "Project Scoping",
        "Pipeline Design",
        "Directory Structure"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "1. Choose Your Data and Objective" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "Find a dataset that interests you (e.g., from Kaggle, a public API, or government data portal). Define a clear question you want to answer. For example, 'Analyze NYC 311 service requests to find the busiest boroughs and request types by season.'" }]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "2. Design Your Pipeline" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "On paper or in a text file, outline the steps. What data will you load? What cleaning steps are needed? What aggregations will you perform? What will be the final output (a CSV report, a plot)?" }]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "3. Set Up Your Project" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "Create a new project directory with subdirectories like `data/`, `scripts/`, `reports/`, and `logs/`. This keeps your project organized." }]
          }
        ]
      },
      "examples": [
        {
          "description": "Example Project Directory Structure",
          "code": "capstone_project/\n├── data/\n│   └── raw_data.csv\n├── reports/\n├── logs/\n├── scripts/\n│   └── pipeline.py\n└── README.md"
        }
      ],
      "practice_activities": [
        "Select your dataset and download it into your `data/` directory.",
        "Write down your primary analytical question.",
        "Outline the steps your `pipeline.py` script will need to perform.",
        "Create the full directory structure for your project."
      ],
      "summary": "The foundation for your capstone project is laid. With a clear objective, a chosen dataset, and an organized project structure, you are ready to start building the pipeline tomorrow.",
      "resources": ["https://youtube.com/watch?v=PSNXoAs2FtQ&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D", "https://youtube.com/watch?v=y3CDecuUK_4&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 29,
      "title": "Capstone Project - Part 2: Build & Test",
      "introduction": "With the design complete, today is all about implementation. You will write the Python script for your data pipeline, applying all the skills you've learned over the past four weeks.",
      "learning_objectives": [
        "Implement the data loading, cleaning, and analysis logic in a Python script.",
        "Incorporate function chaining, error handling, logging, and argument parsing.",
        "Thoroughly test the script to ensure it runs correctly and produces the expected output."
      ],
      "key_concepts": [
        "Implementation",
        "Modular Code",
        "Testing",
        "Debugging"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Building the Script" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "Work through your pipeline design from yesterday, implementing each step as a function in your `pipeline.py` script. Start with loading, then cleaning, and so on. Test each function as you write it." }]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Putting It All Together" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "Once the individual functions are working, assemble them in your `main()` function. Add logging throughout the process. Implement `argparse` to handle file paths. Add `try...except` blocks for robustness." }]
          }
        ]
      },
      "examples": [
        {
          "description": "A snippet of the main orchestrator in `pipeline.py`.",
          "code": "def main(args):\n    logging.info('Pipeline started.')\n    try:\n        df = load_data(args.input_file)\n        df_clean = clean_data(df)\n        report = analyze_data(df_clean)\n        save_report(report, args.output_dir)\n        logging.info('Pipeline finished successfully.')\n    except Exception as e:\n        logging.critical(f'Pipeline failed: {e}')"
        }
      ],
      "practice_activities": [
        "Write the full `pipeline.py` script for your capstone project.",
        "Implement all the best practices: functions, logging, error handling, and argparse.",
        "Run the script from your command line, providing the correct arguments.",
        "Verify that the output (e.g., a CSV file or a plot) is created in your `reports/` directory and that it is correct.",
        "Check your `logs/` directory to see the log file created by your script."
      ],
      "summary": "You have built a complete, robust, and automated data pipeline. This is a significant achievement that showcases your ability to handle a data analytics project from end to end.",
      "resources": ["https://youtube.com/watch?v=yIV1PQnnSbw&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    },
    {
      "day": 30,
      "title": "Capstone Project - Part 3: Documentation & Next Steps",
      "introduction": "Your pipeline works, but a project isn't truly complete without documentation. Today, you'll document your project in a `README.md` file and think about your next steps in the world of data.",
      "learning_objectives": [
        "Write a clear and comprehensive `README.md` file for your project.",
        "Schedule your final pipeline to run automatically.",
        "Reflect on the course and identify areas for future learning."
      ],
      "key_concepts": [
        "Documentation",
        "README.md",
        "Markdown Syntax",
        "Continuous Learning"
      ],
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "Writing a Good README" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "Your README file is the front page of your project. It should explain what the project does, how to set it up (e.g., `pip install -r requirements.txt`), and how to run it. Include a brief summary of your findings." }]
          },
          {
            "type": "heading",
            "attrs": { "level": 3 },
            "content": [{ "type": "text", "text": "What's Next?" }]
          },
          {
            "type": "paragraph",
            "content": [{ "type": "text", "text": "Congratulations on completing this 30-day curriculum! You now have a powerful and in-demand skill set. Possible next steps include:" }]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Learning more advanced visualization libraries like Plotly." }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Exploring machine learning with Scikit-learn." }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Building more complex pipelines with tools like Airflow." }] }]
              },
              {
                "type": "listItem",
                "content": [{ "type": "paragraph", "content": [{ "type": "text", "text": "Creating a portfolio of projects to showcase your skills." }] }]
              }
            ]
          }
        ]
      },
      "examples": [
        {
          "description": "An example structure for your README.md file.",
          "code": "# Project Title\n\nA brief description of the project and its goal.\n\n## Setup\n\nInstructions on how to install dependencies.\n`pip install pandas`\n\n## Usage\n\nHow to run the script.\n`python scripts/pipeline.py --input data/raw_data.csv --output reports/`\n\n## Findings\n\nA summary of your analytical findings."
        }
      ],
      "practice_activities": [
        "Create and write the `README.md` file for your capstone project.",
        "Use markdown for formatting (headings, code blocks, lists).",
        "Schedule your final script to run automatically using cron or Task Scheduler.",
        "Push your project to a GitHub repository to start building your portfolio.",
        "Celebrate your accomplishment!"
      ],
      "summary": "You have successfully completed the 30-day journey to mastering Python-centered data analytics. You've gone from SQL basics to building a fully automated data pipeline. You now have the skills, the process, and a capstone project to prove it. The world of data is now yours to explore.",
      "resources": ["https://youtube.com/watch?v=r2tjwuG305E&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi7SBwkJ2AkBhyohjO8%3D", "https://youtube.com/watch?v=QOXFKi9ss8o&pp=ygXiAUdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gdGl0bGVkICdMZWFybmluZyBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuJyBtZWV0aW5nIHRoaXMgZ29hbDogTWFzdGVyIFB5dGhvbi1jZW50cmVkIGRhdGEgYW5hbHl0aWNzIChTUUwg4oaSIFBhbmRhcyDihpIgYXV0b21hdGlvbiBwaXBlbGluZXMpLi4%3D"]
    }
  ]
}
```
--- End of Response ---

--- New Curriculum Generation ---
Curriculum ID: a5c9ca93-359c-4672-8bcc-103c0c1f5d00
Timestamp: 2025-07-12T08:10:48.319622
Raw Response:
```json
{
  "curriculum_title": "Learning Master Python-centred data analytics (SQL → Pandas → automation pipelines).",
  "curriculum_description": "A 30-day comprehensive curriculum designed for beginners to master data analytics using a powerful combination of SQL for data retrieval, Pandas for data manipulation and analysis, and Python for building automated data pipelines.",
  "days": [
    {
      "day_number": 1,
      "title": "Introduction to Databases and SQL",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Welcome to your data analytics journey! Today, you'll learn the fundamentals of databases. We'll explore what a relational database is, why it's structured, and how tables, rows, and columns work together to store data efficiently. You will also get a high-level overview of SQL (Structured Query Language) as the standard language for communicating with these databases."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Key concepts to understand include primary keys, foreign keys, and the basic idea of data normalization. We will also set up a local SQL environment using SQLite for hands-on practice."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "What is SQL? (in 4 minutes for beginners)",
          "url": "https://www.youtube.com/watch?v=27E5L6-o3_M"
        },
        {
          "title": "SQLBolt - Interactive SQL Tutorials",
          "url": "https://sqlbolt.com/"
        }
      ],
      "estimated_hours": 2
    },
    {
      "day_number": 2,
      "title": "Querying Data with SELECT and WHERE",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today focuses on the most fundamental SQL command: `SELECT`. You will learn how to retrieve specific columns from a table and use `WHERE` to filter rows based on specific conditions. We will cover comparison operators (`=`, `>`, `<`, `<>`), logical operators (`AND`, `OR`, `NOT`), and how to sort your results using `ORDER BY`."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "W3Schools SQL SELECT Tutorial",
          "url": "https://www.w3schools.com/sql/sql_select.asp"
        },
        {
          "title": "W3Schools SQL WHERE Tutorial",
          "url": "https://www.w3schools.com/sql/sql_where.asp"
        }
      ],
      "estimated_hours": 2.5
    },
    {
      "day_number": 3,
      "title": "Aggregating Data with GROUP BY",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Data analysis often requires summarizing data. Today, you'll learn about SQL aggregate functions like `COUNT()`, `SUM()`, `AVG()`, `MIN()`, and `MAX()`. You will then learn how to use these functions with the `GROUP BY` clause to perform calculations on subsets of your data, a critical skill for generating summary reports."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "SQL Aggregate Functions - W3Schools",
          "url": "https://www.w3schools.com/sql/sql_count_avg_sum.asp"
        },
        {
          "title": "SQL GROUP BY Explained",
          "url": "https://www.sqltutorial.org/sql-group-by/"
        }
      ],
      "estimated_hours": 3
    },
    {
      "day_number": 4,
      "title": "Combining Data with JOINs",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Real-world data is often split across multiple tables. `JOIN`s are the mechanism to combine them. You will learn the difference between `INNER JOIN`, `LEFT JOIN`, `RIGHT JOIN`, and `FULL OUTER JOIN`. The focus will be on understanding how to link tables using primary and foreign keys to create meaningful, unified datasets."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "A Visual Explanation of SQL Joins",
          "url": "https://blog.codinghorror.com/a-visual-explanation-of-sql-joins/"
        },
        {
          "title": "SQL Joins - W3Schools",
          "url": "https://www.w3schools.com/sql/sql_join.asp"
        }
      ],
      "estimated_hours": 3
    },
    {
      "day_number": 5,
      "title": "Advanced SQL: Subqueries and CTEs",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Let's level up your SQL. Today we cover subqueries (a query within a query) and Common Table Expressions (CTEs) using the `WITH` clause. These tools are essential for breaking down complex problems into logical, readable steps, making your queries more organized and maintainable."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "SQL Subqueries - GeeksforGeeks",
          "url": "https://www.geeksforgeeks.org/sql-subquery/"
        },
        {
          "title": "SQL CTEs (Common Table Expressions)",
          "url": "https://www.sqltutorial.org/sql-cte/"
        }
      ],
      "estimated_hours": 2.5
    },
    {
      "day_number": 6,
      "title": "Project 1: SQL Database Querying",
      "is_project_day": true,
      "project_data": {
        "title": "SQL Business Questions on a Sample Database",
        "description": "You will be given a sample database (like Chinook or a custom one with sales data). Your task is to write a series of SQL queries to answer specific business questions, applying all the concepts you've learned this week.",
        "objectives": [
          "Demonstrate proficiency with SELECT, WHERE, and ORDER BY.",
          "Apply aggregate functions and GROUP BY to summarize data.",
          "Use various JOIN types to combine data from multiple tables.",
          "Construct at least one query using a subquery or CTE."
        ],
        "requirements": [
          "A working SQL environment (e.g., SQLite, PostgreSQL).",
          "The provided sample database file.",
          "A text file or SQL script containing all your queries."
        ],
        "deliverables": [
          "A .sql file containing the queries for each question.",
          "A brief text file explaining the answer each query provides."
        ],
        "evaluation_criteria": [
          "Correctness: Do the queries run without errors and produce the correct results?",
          "Completeness: Is every question answered?",
          "Readability: Are the queries well-formatted and easy to understand?",
          "Efficiency: Does the query use appropriate joins and clauses?"
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "It's time for your first project! Apply your SQL knowledge from the past week to analyze a real dataset. Download the Chinook sample database (link in resources) and write queries to answer questions like 'Which country has the most invoices?' or 'Who is the best customer?'. This project solidifies your understanding of practical SQL application."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "The Chinook Sample Database",
          "url": "https://www.sqlitetutorial.net/sqlite-sample-database/"
        },
        {
          "title": "DB Browser for SQLite (Tool to explore the database)",
          "url": "https://sqlitebrowser.org/"
        }
      ],
      "estimated_hours": 4
    },
    {
      "day_number": 7,
      "title": "SQL Review and Catch-up",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Use today to review the concepts from the past week. Go over your project, try to optimize your queries, or explore alternative ways to get the same results. Solidifying your SQL foundation is crucial before we move on to Python."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "HackerRank SQL Practice",
          "url": "https://www.hackerrank.com/domains/sql"
        }
      ],
      "estimated_hours": 2
    },
    {
      "day_number": 8,
      "title": "Setting Up Your Python Data Analysis Environment",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type":="text",
                "text": "Welcome to the Python section! Today is all about getting your environment ready. We will install Anaconda, which bundles Python with essential data science libraries and tools. You'll learn how to launch and use Jupyter Notebooks, the standard interactive environment for data analysis."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Anaconda Distribution",
          "url": "https://www.anaconda.com/products/distribution"
        },
        {
          "title": "Jupyter Notebook for Beginners Tutorial",
          "url": "https://www.dataquest.io/blog/jupyter-notebook-tutorial/"
        }
      ],
      "estimated_hours": 2
    },
    {
      "day_number": 9,
      "title": "Python Basics for Data Analysis",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A quick refresher on Python fundamentals. We'll review essential data types (strings, integers, floats), data structures (lists, dictionaries), control flow (if-else statements, for/while loops), and how to define and use functions. This ensures you have the necessary programming foundation before we dive into data-specific libraries."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Python for Everybody (freeCodeCamp course)",
          "url": "https://www.youtube.com/watch?v=8DvywoWv6fI"
        }
      ],
      "estimated_hours": 3
    },
    {
      "day_number": 10,
      "title": "Introduction to NumPy",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Meet NumPy (Numerical Python), the foundational library for numerical computing in Python. You'll learn about the powerful NumPy array object, which is far more efficient for numerical operations than standard Python lists. We'll cover creating arrays, indexing, slicing, and performing mathematical operations on them."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "NumPy: The Absolute Basics for Beginners",
          "url": "https://numpy.org/doc/stable/user/absolute_beginners.html"
        },
        {
          "title": "Data Analysis with Python - Full Course for Beginners (Numpy, Pandas, Matplotlib, Seaborn)",
          "url": "https://youtube.com/watch?v=r-uOLxNrNk8&pp=ygWjA0dlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IExlYXJuaW5nIE1hc3RlciBQeXRob24tY2VudHJlZCBkYXRhIGFuYWx5dGljcyAoU1FMIOKGkiBQYW5kYXMg4oaSIGF1dG9tYXRpb24gcGlwZWxpbmVzKS4KLSBEaWZmaWN1bHR5OiBiZWdpbm5lcgotIER1cmF0aW9uOiAzMCBkYXlzCi0gUHJvamVjdHM6IDQKClJldHVybiBPTkxZIHRoZSBKU09OIG9iamVjdCBpbiB0aGUgZXhhY3Qgc2NoZW1hIGZvcm1hdCBzcGVjaWZpZWQgaW4gdGhlIHN5c3RlbSBwcm9tcHQu"
        }
      ],
      "estimated_hours": 2.5
    },
    {
      "day_number": 11,
      "title": "Introduction to Pandas: Series and DataFrames",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This is a key day: we introduce Pandas, the most important library for data analysis in Python. You'll learn about its two core data structures: the 1D `Series` and the 2D `DataFrame`. We will cover how to create them from scratch, inspect their properties (like shape, dtypes), and select specific rows and columns."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "10 Minutes to pandas",
          "url": "https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html"
        },
        {
          "title": "Data Analysis with Python - Full Course for Beginners (Numpy, Pandas, Matplotlib, Seaborn)",
          "url": "https://youtube.com/watch?v=r-uOLxNrNk8&pp=ygWjA0dlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IExlYXJuaW5nIE1hc3RlciBQeXRob24tY2VudHJlZCBkYXRhIGFuYWx5dGljcyAoU1FMIOKGkiBQYW5kYXMg4oaSIGF1dG9tYXRpb24gcGlwZWxpbmVzKS4KLSBEaWZmaWN1bHR5OiBiZWdpbm5lcgotIER1cmF0aW9uOiAzMCBkYXlzCi0gUHJvamVjdHM6IDQKClJldHVybiBPTkxZIHRoZSBKU09OIG9iamVjdCBpbiB0aGUgZXhhY3Qgc2NoZW1hIGZvcm1hdCBzcGVjaWZpZWQgaW4gdGhlIHN5c3RlbSBwcm9tcHQu"
        }
      ],
      "estimated_hours": 3
    },
    {
      "day_number": 12,
      "title": "Loading Data into Pandas",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A DataFrame is useless without data. Today you'll learn the essential skill of loading data from various sources. We'll focus on the most common formats: reading CSV files with `pd.read_csv()`, Excel files with `pd.read_excel()`, and executing a SQL query to load its results directly into a DataFrame using `pd.read_sql()`."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Pandas IO Tools (Reading and Writing Data)",
          "url": "https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html"
        },
        {
          "title": "Reading a CSV into a Pandas DataFrame",
          "url": "https://www.datacamp.com/community/tutorials/pandas-read-csv"
        }
      ],
      "estimated_hours": 2.5
    },
    {
      "day_number": 13,
      "title": "Project 2: Data Loading and Initial Exploration",
      "is_project_day": true,
      "project_data": {
        "title": "Load and Inspect Multiple Datasets",
        "description": "In this project, you will practice loading data from different sources into Pandas DataFrames and performing initial inspections to understand their structure and content.",
        "objectives": [
          "Successfully load a dataset from a CSV file.",
          "Successfully load data from a SQL database table into a DataFrame.",
          "Use inspection methods like `.head()`, `.tail()`, `.info()`, and `.describe()` on each DataFrame.",
          "Document initial observations about each dataset (e.g., number of rows, column types, presence of missing values)."
        ],
        "requirements": [
          "A working Python/Pandas environment (Jupyter Notebook).",
          "A sample CSV file (e.g., Titanic dataset).",
          "Access to a sample SQL database (e.g., the Chinook database from Project 1)."
        ],
        "deliverables": [
          "A Jupyter Notebook (.ipynb file) containing the code to load and inspect the data.",
          "Markdown cells within the notebook that summarize your findings for each dataset."
        ],
        "evaluation_criteria": [
          "Correctness: Is the data loaded correctly without errors?",
          "Inspection: Are the appropriate inspection methods used?",
          "Analysis: Are the observations in the markdown cells accurate and insightful?",
          "Clarity: Is the notebook well-organized and easy to follow?"
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Time to get hands-on with Pandas. For this project, you will take two different datasets—one from a CSV file and one from your SQL database—and load them into separate DataFrames. You will then practice the essential first steps of any analysis: using methods like `.head()`, `.info()`, and `.describe()` to get a first look at your data."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Kaggle: Titanic - Machine Learning from Disaster (for CSV data)",
          "url": "https://www.kaggle.com/c/titanic/data"
        },
        {
          "title": "pandas.read_sql documentation",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.read_sql.html"
        }
      ],
      "estimated_hours": 4
    },
    {
      "day_number": 14,
      "title": "Python & Pandas Review",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Use today to review the concepts from the past week. Go over your project, ensure you understand the difference between a Series and a DataFrame, and practice loading different types of files. A solid grasp of these basics is essential for the data manipulation topics next week."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Pandas Exercises, Practice, Solution - w3resource",
          "url": "https://www.w3resource.com/python-exercises/pandas/index.php"
        }
      ],
      "estimated_hours": 2
    },
    {
      "day_number": 15,
      "title": "Data Cleaning: Missing Values and Duplicates",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Real-world data is messy. Today's focus is on data cleaning. You'll learn how to identify missing values (`.isnull()`), and different strategies for handling them, such as dropping them (`.dropna()`) or filling them with a specific value (`.fillna()`). We will also cover how to find and remove duplicate rows (`.duplicated()`, `.drop_duplicates()`)."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Working with missing data in pandas",
          "url": "https://pandas.pydata.org/docs/user_guide/missing_data.html"
        },
        {
          "title": "🔴 Live SQL & Python Data Cleaning for Vietnam Client",
          "url": "https://youtube.com/watch?v=8lsb_WxmR2I&pp=ygWjA0dlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IExlYXJuaW5nIE1hc3RlciBQeXRob24tY2VudHJlZCBkYXRhIGFuYWx5dGljcyAoU1FMIOKGkiBQYW5kYXMg4oaSIGF1dG9tYXRpb24gcGlwZWxpbmVzKS4KLSBEaWZmaWN1bHR5OiBiZWdpbm5lcgotIER1cmF0aW9uOiAzMCBkYXlzCi0gUHJvamVjdHM6IDQKClJldHVybiBPTkxZIHRoZSBKU09OIG9iamVjdCBpbiB0aGUgZXhhY3Qgc2NoZW1hIGZvcm1hdCBzcGVjaWZpZWQgaW4gdGhlIHN5c3RlbSBwcm9tcHQu"
        }
      ],
      "estimated_hours": 3
    },
    {
      "day_number": 16,
      "title": "Data Selection with .loc and .iloc",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Mastering data selection is crucial for effective analysis. Today we dive deep into `.loc` (label-based indexing) and `.iloc` (integer-position-based indexing) for selecting specific rows and columns. You'll also learn how to use boolean indexing to filter your data based on complex conditions, similar to the `WHERE` clause in SQL."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Indexing and selecting data in Pandas",
          "url": "https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html"
        },
        {
          "title": "Python Pandas: .loc vs .iloc",
          "url": "https://www.geeksforgeeks.org/difference-between-loc-and-iloc-in-pandas-dataframe/"
        }
      ],
      "estimated_hours": 2.5
    },
    {
      "day_number": 17,
      "title": "Grouping and Aggregation in Pandas",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This is the Pandas equivalent of SQL's `GROUP BY`. You'll learn how to use the powerful `.groupby()` method to split your DataFrame into groups based on some criteria, apply a function (like `sum()`, `mean()`, `count()`) to each group independently, and combine the results into a new DataFrame. This is a cornerstone of data analysis."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Pandas GroupBy: Your Guide to Slicing, Dicing, and Applying Functions to DataFrames",
          "url": "https://realpython.com/pandas-groupby/"
        },
        {
          "title": "Group by: split-apply-combine - Pandas Documentation",
          "url": "https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html"
        }
      ],
      "estimated_hours": 3
    },
    {
      "day_number": 18,
      "title": "Merging, Joining, and Concatenating DataFrames",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Similar to SQL `JOIN`s, you often need to combine multiple DataFrames. We will cover `pd.concat()` for stacking DataFrames together and `pd.merge()` for database-style joins (inner, outer, left, right) based on common columns. Understanding how to combine datasets is essential for creating a complete analytical view."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Merge, join, concatenate and compare - Pandas Documentation",
          "url": "https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html"
        },
        {
          "title": "Pandas Concat() and Merge() Explained",
          "url": "https://www.geeksforgeeks.org/pandas-concat-and-merge/"
        }
      ],
      "estimated_hours": 3
    },
    {
      "day_number": 19,
      "title": "Data Visualization with Matplotlib & Seaborn",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A picture is worth a thousand rows. Today you'll learn to create basic visualizations directly from your DataFrames. We'll start with Matplotlib for fundamental plotting (line, bar, histogram) and then introduce Seaborn, a library built on top of Matplotlib that provides more aesthetically pleasing and statistically sophisticated plots."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Data Analysis with Python - Full Course for Beginners (Numpy, Pandas, Matplotlib, Seaborn)",
          "url": "https://youtube.com/watch?v=r-uOLxNrNk8&pp=ygWjA0dlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IExlYXJuaW5nIE1hc3RlciBQeXRob24tY2VudHJlZCBkYXRhIGFuYWx5dGljcyAoU1FMIOKGkiBQYW5kYXMg4oaSIGF1dG9tYXRpb24gcGlwZWxpbmVzKS4KLSBEaWZmaWN1bHR5OiBiZWdpbm5lcgotIER1cmF0aW9uOiAzMCBkYXlzCi0gUHJvamVjdHM6IDQKClJldHVybiBPTkxZIHRoZSBKU09OIG9iamVjdCBpbiB0aGUgZXhhY3Qgc2NoZW1hIGZvcm1hdCBzcGVjaWZpZWQgaW4gdGhlIHN5c3RlbSBwcm9tcHQu"
        },
        {
          "title": "Seaborn: statistical data visualization",
          "url": "https://seaborn.pydata.org/tutorial.html"
        }
      ],
      "estimated_hours": 3
    },
    {
      "day_number": 20,
      "title": "Project 3: Exploratory Data Analysis (EDA)",
      "is_project_day": true,
      "project_data": {
        "title": "Exploratory Data Analysis on a Real-World Dataset",
        "description": "Choose a dataset of interest (e.g., from Kaggle) and perform a full Exploratory Data Analysis (EDA). This involves loading, cleaning, transforming, and visualizing the data to uncover patterns, spot anomalies, and summarize its main characteristics.",
        "objectives": [
          "Practice data cleaning techniques (handling missing values, duplicates).",
          "Use grouping and aggregation to create summary statistics.",
          "Apply merging or joining if using multiple data sources.",
          "Create at least 3-5 meaningful visualizations to communicate findings.",
          "Summarize key insights discovered during the analysis."
        ],
        "requirements": [
          "A Jupyter Notebook.",
          "A dataset of your choice (links to suggestions in resources)."
        ],
        "deliverables": [
          "A complete Jupyter Notebook (.ipynb file) that tells a story about the data. It should include code, outputs, visualizations, and markdown cells with explanations."
        ],
        "evaluation_criteria": [
          "Data Cleaning: Is the data appropriately cleaned and prepared for analysis?",
          "Analysis Depth: Does the analysis go beyond simple descriptions and uncover interesting relationships?",
          "Visualization Quality: Are the plots clear, well-labeled, and appropriate for the data being presented?",
          "Communication: Does the notebook effectively communicate the findings and the story of the data?"
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This project brings everything from the last two weeks together. You'll perform a complete Exploratory Data Analysis (EDA) on a dataset. This is the core workflow of a data analyst: ask questions, manipulate the data to find answers, and create plots to visualize those answers. The goal is to produce a report that tells a story with data."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Kaggle Datasets",
          "url": "https://www.kaggle.com/datasets"
        },
        {
          "title": "A-Z of Exploratory Data Analysis in Python",
          "url": "https://www.analyticsvidhya.com/blog/2021/08/a-z-of-exploratory-data-analysis-in-python/"
        }
      ],
      "estimated_hours": 5
    },
    {
      "day_number": 21,
      "title": "Pandas Manipulation Review",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Take a day to consolidate your Pandas skills. Review your EDA project. Are there more efficient ways to clean the data? Could you use a different type of plot to show an insight more clearly? Practice on a new small dataset to keep the concepts fresh."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Pandas Cookbook",
          "url": "https://pandas.pydata.org/pandas-docs/stable/user_guide/cookbook.html"
        }
      ],
      "estimated_hours": 2
    },
    {
      "day_number": 22,
      "title": "Introduction to Data Pipelines",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "We now shift from interactive analysis to automation. Today, you'll learn the concept of a data pipeline. What is it? Why is it important? We'll cover the typical stages of a pipeline: Extract, Transform, Load (ETL). This is a conceptual day to understand the 'why' before we get to the 'how'."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "What is a Data Pipeline? - AWS",
          "url": "https://aws.amazon.com/data-pipeline/"
        },
        {
          "title": "Understanding Data Pipelines: A Beginner's Guide",
          "url": "https://www.integrate.io/blog/understanding-data-pipelines-a-beginners-guide/"
        }
      ],
      "estimated_hours": 1.5
    },
    {
      "day_number": 23,
      "title": "Writing Python Scripts for Data Processing",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Time to move out of the Jupyter Notebook and into Python scripts (.py files). You'll learn how to structure your Pandas code within a script that can be run from the command line. We'll cover best practices like using functions to organize your code and using command-line arguments to make your scripts more flexible."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Running Python Scripts - Python Documentation",
          "url": "https://docs.python.org/3/using/cmdline.html#running-scripts"
        },
        {
          "title": "Refactoring Python: From Script to Production-Ready Code",
          "url": "https://www.youtube.com/watch?v=y3Xy_G1-a58"
        }
      ],
      "estimated_hours": 2.5
    },
    {
      "day_number": 24,
      "title": "Connecting Python to SQL Databases",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "To automate data extraction, your script needs to talk to a database. You'll learn how to use libraries like `SQLAlchemy` and `psycopg2` (for PostgreSQL) or `sqlite3` (for SQLite) to establish a connection to a database from within a Python script, execute queries, and fetch results."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "SQLAlchemy 1.4/2.0 Tutorial",
          "url": "https://docs.sqlalchemy.org/en/14/tutorial/"
        },
        {
          "title": "sqlite3 — DB-API 2.0 interface for SQLite databases",
          "url": "https://docs.python.org/3/library/sqlite3.html"
        }
      ],
      "estimated_hours": 3
    },
    {
      "day_number": 25,
      "title": "Automating Data Extraction (SQL to DataFrame)",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Let's build the 'E' in ETL. Today you'll combine the last two lessons to write a Python script that automatically connects to a database, runs a pre-defined SQL query, and loads the result directly into a Pandas DataFrame using `pd.read_sql_query()`. This is the first step in your automated pipeline."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "pandas.read_sql_query documentation",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.read_sql_query.html"
        }
      ],
      "estimated_hours": 2
    },
    {
      "day_number": 26,
      "title": "Automating Data Transformation and Loading",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Now for the 'T' and 'L'. Once the data is in a DataFrame, you can apply all the transformations you learned (cleaning, creating new columns, aggregating). After transforming the data, you'll learn how to save the result to a new destination, such as a CSV file (`.to_csv()`) or even a new table in the database (`.to_sql()`)."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "DataFrame.to_csv documentation",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_csv.html"
        },
        {
          "title": "DataFrame.to_sql documentation",
          "url": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_sql.html"
        }
      ],
      "estimated_hours": 2.5
    },
    {
      "day_number": 27,
      "title": "Scheduling Scripts (Cron & Task Scheduler)",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A pipeline isn't truly automated until it runs on its own. Today is a conceptual introduction to scheduling. You'll learn about Cron jobs (for Linux/macOS) and Task Scheduler (for Windows), which are system tools that can automatically run your Python script on a schedule (e.g., every day at 3 AM)."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Crontab Guru - An editor for cron schedule expressions",
          "url": "https://crontab.guru/"
        },
        {
          "title": "How to Schedule Python Scripts with Cron",
          "url": "https://realpython.com/cron-python/"
        },
        {
          "title": "How to Schedule a Python Script in Windows Task Scheduler",
          "url": "https://www.jcchouinard.com/python-automation-using-task-scheduler/"
        }
      ],
      "estimated_hours": 2
    },
    {
      "day_number": 28,
      "title": "Project 4: Build a Simple Automated Data Pipeline",
      "is_project_day": true,
      "project_data": {
        "title": "Automated ETL Script",
        "description": "Build a complete, runnable Python script that performs a full ETL process: extracts data from a SQL database, performs a data transformation/aggregation in Pandas, and loads the result into a new CSV file.",
        "objectives": [
          "Write a Python script (.py file), not a notebook.",
          "The script must connect to a SQL database.",
          "Extract data using a SQL query.",
          "Perform a meaningful transformation (e.g., cleaning, aggregation, creating a new column).",
          "Save the transformed DataFrame to a new CSV file with a dynamic name (e.g., including the current date)."
        ],
        "requirements": [
          "Python environment with Pandas and a database driver (e.g., SQLAlchemy) installed.",
          "Access to a sample SQL database (e.g., Chinook)."
        ],
        "deliverables": [
          "A single, well-commented .py file that executes the entire pipeline.",
          "A requirements.txt file listing the necessary Python libraries."
        ],
        "evaluation_criteria": [
          "Functionality: Does the script run from the command line without errors?",
          "Correctness: Does it produce the correct output CSV file?",
          "Code Quality: Is the code organized into functions and easy to read?",
          "Automation: Is the script self-contained and ready to be scheduled?"
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This is the final capstone project. You will combine all the skills from this course to build a single Python script that automates a data workflow. Your script will connect to the Chinook database, run a query to get sales data, use Pandas to calculate total sales per genre, and then save that summary report as a new CSV file. This project simulates a real-world data engineering task."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Building a Simple ETL Pipeline with Python",
          "url": "https://towardsdatascience.com/building-a-simple-etl-pipeline-with-python-206472b43b2e"
        }
      ],
      "estimated_hours": 5
    },
    {
      "day_number": 29,
      "title": "Project Work and Refinement",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Use today to continue working on your final project. Focus on refining your script. Can you add error handling? Can you make the code more modular by breaking it into more functions? Add comments to explain what each part of your script does. This is also a great day to practice setting up a cron job or task in Task Scheduler to run your script."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Python's Argparse for Command-Line Interfaces",
          "url": "https://realpython.com/command-line-interfaces-python-argparse/"
        }
      ],
      "estimated_hours": 3
    },
    {
      "day_number": 30,
      "title": "Course Recap and Next Steps",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Congratulations! You've completed the 30-day curriculum. Today, we'll review the entire workflow from SQL to Pandas to automation. We'll also discuss next steps for your learning journey, such as exploring more advanced pipeline tools (like Apache Airflow), learning more complex data visualization, or diving into machine learning."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Apache Airflow Documentation",
          "url": "https://airflow.apache.org/docs/"
        },
        {
          "title": "Plotly and Dash for Interactive Visualizations",
          "url": "https://plotly.com/python/"
        },
        {
          "title": "Scikit-learn: Machine Learning in Python",
          "url": "https://scikit-learn.org/stable/"
        }
      ],
      "estimated_hours": 1
    }
  ]
}
```
--- End of Response ---

--- New Curriculum Generation ---
Curriculum ID: c7e47137-0b9a-4cb5-af5d-11296359ebeb
Timestamp: 2025-07-12T08:19:16.140719
Raw Response:
```json
{
  "curriculum_title": "Data Analytics",
  "curriculum_description": "A 30-day comprehensive curriculum designed for beginners to master data analytics. This plan progresses from foundational SQL querying to advanced data manipulation with Python's Pandas library, culminating in the creation of automated data processing pipelines.",
  "days": [
    {
      "day_number": 1,
      "title": "Introduction to Databases and Basic SQL",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Understand the role of databases in data analytics and write your first SQL query to retrieve data from a table."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "What is a relational database and why is it structured?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The basic syntax of a SQL query."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Using "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "SELECT"
                      },
                      {
                        "type": "text",
                        "text": " to specify columns."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Using "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "FROM"
                      },
                      {
                        "type": "text",
                        "text": " to specify the source table."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Data Analysis Using Python & SQL Full Course",
          "url": "https://youtube.com/watch?v=woPRf0xb9bA&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        }
      ],
      "estimated_hours": 2
    },
    {
      "day_number": 2,
      "title": "Filtering Data with WHERE",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Learn to filter query results to find specific information using the WHERE clause and comparison operators."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "WHERE"
                      },
                      {
                        "type": "text",
                        "text": " clause for filtering rows."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Comparison operators: "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "="
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "!="
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "<"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ">"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "<="
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ">="
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Combining conditions with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "AND"
                      },
                      {
                        "type": "text",
                        "text": " and "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "OR"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Using "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "LIKE"
                      },
                      {
                        "type": "text",
                        "text": " for pattern matching in strings."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [],
      "estimated_hours": 2.5
    },
    {
      "day_number": 3,
      "title": "Sorting and Limiting Results",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Organize query outputs and retrieve top/bottom records using ORDER BY and LIMIT clauses."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Sorting results with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "ORDER BY"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Specifying ascending ("
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "ASC"
                      },
                      {
                        "type": "text",
                        "text": ") and descending ("
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "DESC"
                      },
                      {
                        "type": "text",
                        "text": ") order."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Restricting the number of rows returned with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "LIMIT"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Combining "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "ORDER BY"
                      },
                      {
                        "type": "text",
                        "text": " and "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "LIMIT"
                      },
                      {
                        "type": "text",
                        "text": " to find top N records."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [],
      "estimated_hours": 2
    },
    {
      "day_number": 4,
      "title": "Combining Data with SQL JOINs",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Learn to query and combine data from multiple related tables using INNER and LEFT JOINs."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understanding primary and foreign keys."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Using "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "INNER JOIN"
                      },
                      {
                        "type": "text",
                        "text": " to retrieve matching records from two tables."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Using "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "LEFT JOIN"
                      },
                      {
                        "type": "text",
                        "text": " to retrieve all records from the left table and matched records from the right."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "ON"
                      },
                      {
                        "type": "text",
                        "text": " clause to specify the join condition."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [],
      "estimated_hours": 3
    },
    {
      "day_number": 5,
      "title": "Aggregations and Grouping",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Perform calculations on groups of rows using aggregate functions and the GROUP BY clause."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Aggregate functions: "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "COUNT()"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "SUM()"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "AVG()"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "MIN()"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "MAX()"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Using "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "GROUP BY"
                      },
                      {
                        "type": "text",
                        "text": " to group rows that have the same values in specified columns into summary rows."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Filtering groups with the "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "HAVING"
                      },
                      {
                        "type": "text",
                        "text": " clause."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [],
      "estimated_hours": 3
    },
    {
      "day_number": 6,
      "title": "Advanced SQL: Subqueries and CASE",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Write more complex queries by nesting queries (subqueries) and using conditional logic with the CASE statement."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "What is a subquery (or inner query)?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Using subqueries in the "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "FROM"
                      },
                      {
                        "type": "text",
                        "text": " and "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "WHERE"
                      },
                      {
                        "type": "text",
                        "text": " clauses."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "CASE"
                      },
                      {
                        "type": "text",
                        "text": " statement for if-then-else logic within a query."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Creating custom columns and categories with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "CASE"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [],
      "estimated_hours": 2.5
    },
    {
      "day_number": 7,
      "title": "Project 1: SQL Database Querying",
      "is_project_day": true,
      "project_data": {
        "title": "Sales Data Analysis with SQL",
        "description": "You are a data analyst at an e-commerce company. Your task is to query the company's database to answer specific business questions about sales, customers, and products. You will use a provided sample database (e.g., Chinook or a custom sales schema).",
        "objectives": [
          "Apply fundamental SQL commands (SELECT, WHERE, ORDER BY, LIMIT).",
          "Combine data from multiple tables using JOINs.",
          "Perform calculations and summarize data using aggregate functions and GROUP BY.",
          "Write complex queries to derive business insights."
        ],
        "requirements": [
          "A SQL client (like DBeaver, DB Browser for SQLite, or an online SQL fiddle).",
          "A sample database (e.g., a provided .sqlite file)."
        ],
        "deliverables": [
          "A .sql file containing all the queries written to answer the business questions.",
          "A brief summary (in a text file or markdown) explaining the findings from each query."
        ],
        "evaluation_criteria": [
          "Correctness of SQL syntax and logic.",
          "Accuracy of the query results.",
          "Clarity and readability of the SQL code.",
          "Insightfulness of the summary report."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Day"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today is dedicated to applying all the SQL skills you've learned over the past week. Use the provided project description to guide your work. Focus on writing clean, efficient queries to solve the given problems."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Data Analysis Using Python & SQL Full Course",
          "url": "https://youtube.com/watch?v=woPRf0xb9bA&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        }
      ],
      "estimated_hours": 4
    },
    {
      "day_number": 8,
      "title": "Intro to Python & Setting Up Your Environment",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Transition from SQL to Python. Understand why Python is a powerful tool for data analytics and set up your local development environment."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Why use Python for data analysis?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Installing Python and a package manager (pip)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Setting up a project environment, preferably with Anaconda."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type":="paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Introduction to Jupyter Notebooks for interactive analysis."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Python for Data Analytics - Full Course for Beginners",
          "url": "https://youtube.com/watch?v=wUSDVGivd-8&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        }
      ],
      "estimated_hours": 2
    },
    {
      "day_number": 9,
      "title": "Python Basics: Variables, Data Types, and Lists",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Learn the fundamental building blocks of Python: variables, common data types (integers, strings, floats), and the versatile list data structure."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Creating variables to store data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Numeric types ("
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "int"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "float"
                      },
                      {
                        "type": "text",
                        "text": ") and string type ("
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "str"
                      },
                      {
                        "type": "text",
                        "text": ")."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "What is a list and how to create one."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Accessing, adding, and removing elements from a list."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Python for Data Science - Course for Beginners",
          "url": "https://youtube.com/watch?v=LHBE6Q9XlzI&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        }
      ],
      "estimated_hours": 2.5
    },
    {
      "day_number": 10,
      "title": "Introduction to Pandas: Series and DataFrames",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Meet the core library for data analysis in Python: Pandas. Understand its two primary data structures, the Series and the DataFrame."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "What is Pandas and its role in the Python data ecosystem?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The Pandas Series: a one-dimensional labeled array."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The Pandas DataFrame: a two-dimensional labeled data structure with columns of potentially different types (like a spreadsheet or SQL table)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Creating a DataFrame from scratch using a dictionary."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Learn how to use PANDAS in Python in 15 minutes",
          "url": "https://youtube.com/watch?v=mkYBJwX_dMs&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        },
        {
          "title": "Data Analysis with Python - Full Course for Beginners",
          "url": "https://youtube.com/watch?v=r-uOLxNrNk8&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        }
      ],
      "estimated_hours": 2
    },
    {
      "day_number": 11,
      "title": "Loading Data into Pandas",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Learn how to load data from common file formats like CSV and Excel into a Pandas DataFrame, making it ready for analysis."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Importing the Pandas library."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Using "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "pd.read_csv()"
                      },
                      {
                        "type": "text",
                        "text": " to load data from a CSV file."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Using "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "pd.read_excel()"
                      },
                      {
                        "type": "text",
                        "text": " to load data from an Excel file."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Common parameters like "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "filepath_or_buffer"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "sep"
                      },
                      {
                        "type": "text",
                        "text": ", and "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "header"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Python for Data Analytics - Full Course for Beginners",
          "url": "https://youtube.com/watch?v=wUSDVGivd-8&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        }
      ],
      "estimated_hours": 2
    },
    {
      "day_number": 12,
      "title": "Inspecting a DataFrame",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Once data is loaded, the first step is always to inspect it. Learn the essential Pandas methods for getting a quick overview of your DataFrame's structure and content."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Previewing the first few rows with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".head()"
                      },
                      {
                        "type": "text",
                        "text": " and last few with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".tail()"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Getting a concise summary with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".info()"
                      },
                      {
                        "type": "text",
                        "text": " (column data types, non-null counts)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Generating descriptive statistics with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".describe()"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Checking the dimensions of the DataFrame with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".shape"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Data Analysis with Python - Full Course for Beginners",
          "url": "https://youtube.com/watch?v=r-uOLxNrNk8&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        }
      ],
      "estimated_hours": 2
    },
    {
      "day_number": 13,
      "title": "Data Selection and Indexing",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Master the techniques for selecting specific subsets of your data, including rows, columns, and individual cells, using various indexing methods."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Selecting a single column (returns a Series)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Selecting multiple columns (returns a DataFrame)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Label-based selection with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".loc"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Integer-position based selection with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".iloc"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Boolean indexing for conditional filtering."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Python for Data Analytics - Full Course for Beginners",
          "url": "https://youtube.com/watch?v=wUSDVGivd-8&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        }
      ],
      "estimated_hours": 3
    },
    {
      "day_number": 14,
      "title": "Project 2: Exploratory Data Analysis with Pandas",
      "is_project_day": true,
      "project_data": {
        "title": "Exploratory Data Analysis on a Real-World Dataset",
        "description": "Choose a dataset of interest (e.g., from Kaggle, data.gov). Your task is to perform an initial exploratory data analysis (EDA). This involves loading the data, inspecting its structure, calculating summary statistics, and answering some initial questions you formulate about the data.",
        "objectives": [
          "Practice loading data from a file into a Pandas DataFrame.",
          "Use inspection methods to understand the dataset's characteristics.",
          "Apply selection and filtering techniques to explore subsets of the data.",
          "Formulate and answer at least 3-5 questions about the data using Pandas."
        ],
        "requirements": [
          "Jupyter Notebook environment.",
          "A CSV or Excel dataset of your choice."
        ],
        "deliverables": [
          "A clean, well-commented Jupyter Notebook (.ipynb file) that walks through your EDA process.",
          "The notebook should clearly state the questions you are investigating and show the code and output used to answer them."
        ],
        "evaluation_criteria": [
          "Correctly loads and inspects the data.",
          "Demonstrates effective use of Pandas for selection and filtering.",
          "Code is readable and well-documented with markdown cells explaining the steps.",
          "The analysis provides clear answers to the formulated questions."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Day"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Time to put your foundational Pandas skills to the test. This project is all about exploration. There isn't always a single 'right' answer; the goal is to practice the process of interrogating a dataset to uncover initial insights."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Data Analysis with Python - Full Course for Beginners",
          "url": "https://youtube.com/watch?v=r-uOLxNrNk8&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        }
      ],
      "estimated_hours": 4
    },
    {
      "day_number": 15,
      "title": "Data Cleaning: Handling Missing Values",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Real-world data is messy. Learn one of the most critical data preparation tasks: identifying and handling missing values (NaNs) in your DataFrame."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identifying missing values with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".isnull()"
                      },
                      {
                        "type": "text",
                        "text": " and "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".isna()"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Counting missing values per column."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Dropping rows or columns with missing values using "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".dropna()"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Filling missing values (imputation) with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".fillna()"
                      },
                      {
                        "type": "text",
                        "text": " using a static value, mean, median, or mode."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [],
      "estimated_hours": 2.5
    },
    {
      "day_number": 16,
      "title": "Data Cleaning: Data Types and Duplicates",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Continue with data cleaning by learning how to correct column data types (e.g., a number stored as a string) and how to find and remove duplicate rows."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Checking data types with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".dtypes"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Changing a column's data type with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".astype()"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identifying duplicate rows with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".duplicated()"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Removing duplicate rows with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".drop_duplicates()"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [],
      "estimated_hours": 2
    },
    {
      "day_number": 17,
      "title": "Merging and Joining DataFrames",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Learn the Pandas equivalents of SQL JOINs. Master combining multiple DataFrames based on common columns or indices."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Combining DataFrames with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "pd.merge()"
                      },
                      {
                        "type": "text",
                        "text": " (similar to SQL JOINs)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understanding merge types: "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "inner"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "outer"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "left"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "right"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Concatenating DataFrames (stacking them) with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "pd.concat()"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Python for Data Analytics - Full Course for Beginners",
          "url": "https://youtube.com/watch?v=wUSDVGivd-8&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        }
      ],
      "estimated_hours": 3
    },
    {
      "day_number": 18,
      "title": "Grouping and Aggregation in Pandas",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Master the powerful 'split-apply-combine' pattern using Pandas' .groupby() method to perform calculations on specific groups within your data."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".groupby()"
                      },
                      {
                        "type": "text",
                        "text": " method."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Applying aggregate functions ("
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".sum()"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".mean()"
                      },
                      {
                        "type": "text",
                        "text": ", "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".count()"
                      },
                      {
                        "type": "text",
                        "text": ", etc.) to grouped data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Grouping by multiple columns."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Using the "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".agg()"
                      },
                      {
                        "type": "text",
                        "text": " method to apply multiple aggregation functions at once."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Learn how to use PANDAS in Python in 15 minutes",
          "url": "https://youtube.com/watch?v=mkYBJwX_dMs&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        }
      ],
      "estimated_hours": 3
    },
    {
      "day_number": 19,
      "title": "Intro to Data Visualization",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Understand the importance of data visualization and get introduced to the foundational plotting library Matplotlib and the high-level, statistically-focused library Seaborn."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Why visualize data? The Anscombe's quartet example."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Introduction to Matplotlib as the base for plotting in Python."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Introduction to Seaborn for creating more attractive and informative statistical plots."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The relationship between Pandas, Matplotlib, and Seaborn."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Data Analysis with Python - Full Course for Beginners",
          "url": "https://youtube.com/watch?v=r-uOLxNrNk8&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        }
      ],
      "estimated_hours": 2
    },
    {
      "day_number": 20,
      "title": "Creating Basic Plots",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Create your first data visualizations using Pandas, Matplotlib, and Seaborn. Learn to make bar charts, histograms, and scatter plots to understand distributions and relationships in your data."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Creating plots directly from Pandas DataFrames with "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".plot()"
                      },
                      {
                        "type": "text",
                        "text": "."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Bar charts for categorical data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Histograms to understand the distribution of a single numerical variable."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Scatter plots to visualize the relationship between two numerical variables."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Customizing plots with titles, labels, and colors."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Python for Data Science - Course for Beginners",
          "url": "https://youtube.com/watch?v=LHBE6Q9XlzI&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        }
      ],
      "estimated_hours": 3
    },
    {
      "day_number": 21,
      "title": "Project 3: Data Cleaning and Visualization Report",
      "is_project_day": true,
      "project_data": {
        "title": "Analysis of a Messy Dataset",
        "description": "Find a 'messy' dataset (one with missing values, incorrect data types, etc.). Your goal is to take this raw dataset, clean it systematically, and then perform an exploratory analysis, this time with a strong focus on creating insightful visualizations to communicate your findings.",
        "objectives": [
          "Apply a systematic data cleaning process (handling nulls, duplicates, types).",
          "Practice merging or reshaping data if necessary.",
          "Use grouping and aggregation to create summary tables.",
          "Create at least 3-4 different types of visualizations to explore the data.",
          "Communicate findings effectively through a combination of code, text, and plots."
        ],
        "requirements": [
          "Jupyter Notebook environment.",
          "A messy dataset of your choice."
        ],
        "deliverables": [
          "A Jupyter Notebook that documents your entire process from cleaning to visualization.",
          "Markdown cells should explain your cleaning decisions and what each visualization shows."
        ],
        "evaluation_criteria": [
          "Thoroughness and justification of the data cleaning steps.",
          "Appropriateness of the chosen visualizations for the data.",
          "Clarity and quality of the plots (titles, labels, etc.).",
          "The narrative of the notebook effectively tells a story about the data."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Day"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This project combines the skills from the last two weeks. You'll perform a full, small-scale analysis: from messy raw data to a clean, visualized report. Focus on making smart decisions during the cleaning phase and choosing the right plots to tell your story."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Python for Data Analytics - Full Course for Beginners",
          "url": "https://youtube.com/watch?v=wUSDVGivd-8&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        }
      ],
      "estimated_hours": 5
    },
    {
      "day_number": 22,
      "title": "Connecting Python to SQL Databases",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Bridge the gap between your SQL and Python skills. Learn how to establish a connection from a Python script to a SQL database."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Introduction to database connector libraries in Python."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Using the built-in "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "sqlite3"
                      },
                      {
                        "type": "text",
                        "text": " library for simple, file-based databases."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Introduction to SQLAlchemy as a more robust database toolkit."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Creating a connection engine and executing a simple query."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Data Analysis Using Python & SQL Full Course",
          "url": "https://youtube.com/watch?v=woPRf0xb9bA&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        }
      ],
      "estimated_hours": 2
    },
    {
      "day_number": 23,
      "title": "Reading SQL Queries into Pandas DataFrames",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Combine the power of SQL for data retrieval and Pandas for data manipulation by learning how to execute a SQL query and load its results directly into a DataFrame."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "pd.read_sql_query()"
                      },
                      {
                        "type": "text",
                        "text": " function."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Passing a SQL query string and a connection object to the function."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Leveraging complex SQL (JOINs, aggregations) to pre-process data before it even enters Pandas."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [],
      "estimated_hours": 2.5
    },
    {
      "day_number": 24,
      "title": "Writing DataFrames back to SQL Databases",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Complete the cycle by learning how to take a cleaned, transformed DataFrame in Python and write it back to a new table in a SQL database."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": ".to_sql()"
                      },
                      {
                        "type": "text",
                        "text": " method on a DataFrame."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Specifying the table name and connection."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Using the "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "if_exists"
                      },
                      {
                        "type": "text",
                        "text": " parameter to control behavior ('fail', 'replace', 'append')."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "index=False"
                      },
                      {
                        "type": "text",
                        "text": " parameter to avoid writing the DataFrame index as a column."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [],
      "estimated_hours": 2
    },
    {
      "day_number": 25,
      "title": "Introduction to Automation: Data Pipelines",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Understand the concept of a data pipeline and why automating repetitive data tasks is a crucial skill for a data analyst."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "What is a data pipeline? (Extract, Transform, Load - ETL)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Benefits of automation: consistency, efficiency, reliability."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Mapping our previous steps (Read from SQL -> Clean/Transform in Pandas -> Write to SQL) to a pipeline concept."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [],
      "estimated_hours": 1.5
    },
    {
      "day_number": 26,
      "title": "Writing Reusable Python Scripts",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Move beyond interactive Jupyter Notebooks and learn how to structure your data processing logic into a reusable Python script (.py file) that can be run from the command line."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Moving code from a notebook to a .py file."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Using functions to organize code blocks."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The "
                      },
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "if __name__ == '__main__':"
                      },
                      {
                        "type": "text",
                        "text": " block."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Running a Python script from your terminal."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [],
      "estimated_hours": 2.5
    },
    {
      "day_number": 27,
      "title": "Scheduling Scripts (Conceptual)",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Understand the concepts behind scheduling your Python script to run automatically at specific times or intervals."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "What is a task scheduler?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Cron jobs on Linux/macOS: what they are and basic syntax."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Task Scheduler on Windows."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Cloud-based schedulers (e.g., GitHub Actions, AWS Lambda scheduled events) as a more advanced alternative."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [],
      "estimated_hours": 1.5
    },
    {
      "day_number": 28,
      "title": "Capstone Project Preparation",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Plan your capstone project. Define the problem you want to solve, identify the data sources, and map out the steps of your automated pipeline."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Tasks for Today"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Read the capstone project description for Day 30."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Select your data source(s). This could be a SQL database you create, a public API, or a set of CSV files."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Outline the steps of your pipeline: What data will you extract? What transformations are needed? Where will the final, clean data be loaded?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Set up your project folder and any necessary files (e.g., the initial .py script, a local SQLite database)."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [],
      "estimated_hours": 3
    },
    {
      "day_number": 29,
      "title": "Capstone Project Work Day",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Goal"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A dedicated day to work on building your capstone project. Focus on writing the core logic of your data pipeline script. Test each part of your script (extraction, transformation, loading) individually."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Focus Areas"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write the Python functions for each step of your plan."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Connect to your data source and successfully extract the data."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Implement the data cleaning and transformation logic in Pandas."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write the final, clean DataFrame to its destination (e.g., a new SQL table)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Debug any issues that arise."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [],
      "estimated_hours": 4
    },
    {
      "day_number": 30,
      "title": "Project 4: Automated Data Processing Pipeline (Capstone)",
      "is_project_day": true,
      "project_data": {
        "title": "Build an Automated ETL Pipeline",
        "description": "This capstone project brings together everything you have learned. You will build a simple, end-to-end data pipeline in a Python script. The script should automatically extract data from a source, perform transformations and cleaning using Pandas, and load the clean data into a structured destination, such as a new table in a SQL database.",
        "objectives": [
          "Demonstrate understanding of the entire data analytics workflow.",
          "Write a clean, modular, and reusable Python script for data processing.",
          "Combine SQL and Pandas skills effectively in a single project.",
          "Successfully create a pipeline that transforms raw data into a clean, analysis-ready format."
        ],
        "requirements": [
          "A data source (e.g., a sample SQLite database with 'raw' tables, a CSV file that gets updated).",
          "A data destination (e.g., a different SQLite database or new tables in the source DB).",
          "A single Python script (.py) that executes the entire pipeline."
        ],
        "deliverables": [
          "The complete Python script (.py file) for your ETL pipeline.",
          "A README.md file that explains what the pipeline does, how to set it up (e.g., install dependencies), and how to run it.",
          "The 'before' (raw) and 'after' (clean) data, or the SQL database file(s) used."
        ],
        "evaluation_criteria": [
          "The script runs without errors and successfully processes the data.",
          "Code is well-structured, commented, and follows best practices (e.g., uses functions).",
          "The transformation logic is correct and achieves the desired cleaning/structuring.",
          "The README file is clear and provides all necessary information to understand and run the project."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Final Project Day"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Finalize your capstone project. Finish writing the code, test it thoroughly, and prepare your final deliverables. This is your opportunity to create a portfolio piece that showcases your ability to handle a data project from start to finish."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Python for Data Analytics - Full Course for Beginners",
          "url": "https://youtube.com/watch?v=wUSDVGivd-8&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        },
        {
          "title": "Data Analysis Using Python & SQL Full Course",
          "url": "https://youtube.com/watch?v=woPRf0xb9bA&pp=ygXZAkdlbmVyYXRlIGEgMzAtZGF5IGN1cnJpY3VsdW0gd2l0aCB0aGVzZSBzcGVjaWZpY2F0aW9uczoKCkNVUlJJQ1VMVU0gUEFSQU1FVEVSUzoKLSBMZWFybmluZyBHb2FsOiBNYXN0ZXIgUHl0aG9uLWNlbnRyZWQgZGF0YSBhbmFseXRpY3MgKFNRTCDihpIgUGFuZGFzIOKGkiBhdXRvbWF0aW9uIHBpcGVsaW5lcykuCi0gVGl0bGU6IERhdGEgQW5hbHl0aWNzCi0gRGlmZmljdWx0eTogYmVnaW5uZXIKLSBEdXJhdGlvbjogMzAgZGF5cwotIFByb2plY3RzOiA0CgpSZXR1cm4gT05MWSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIGV4YWN0IHNjaGVtYSBmb3JtYXQgc3BlY2lmaWVkIGluIHRoZSBzeXN0ZW0gcHJvbXB0Lg%3D%3D"
        }
      ],
      "estimated_hours": 5
    }
  ]
}
```
--- End of Response ---

