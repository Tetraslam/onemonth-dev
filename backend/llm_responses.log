--- New Curriculum Generation ---
Curriculum ID: 8f4a35bc-0cbf-494e-9d4e-662228b1ef1b
Timestamp: 2025-07-01T20:59:36.494323
Raw Response:
```json
{
  "curriculum_title": "RoboHand",
  "curriculum_description": "A 30-day curriculum to design, build, and program a 4-DOF robotic hand from scratch. Max budget: $2000.",
  "days": [
    {
      "day_number": 1,
      "title": "Introduction to Robotic Hands and Kinematics",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Welcome to Day 1! Today, we'll lay the foundational knowledge for our robotic hand project. We will explore what defines a robotic hand, focusing on the crucial concepts of Degrees of Freedom (DOF) and kinematics, which describe how the hand moves."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Define Degrees of Freedom (DOF) and identify them in various robotic systems."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the difference between forward and inverse kinematics."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Analyze existing robotic hand designs to understand common mechanisms."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Degrees of Freedom (DOF)"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A Degree of Freedom is an independent parameter that defines the configuration of a mechanical system. For a robotic hand, each joint that can move independently represents one DOF. Our goal is a 4-DOF hand, which could mean one joint per finger on a four-fingered hand, or multiple joints on fewer fingers. For example, a human finger has 3 DOF (two knuckles and side-to-side motion at the base). A simple 4-DOF hand might have four fingers, each with one joint to curl inwards."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Forward vs. Inverse Kinematics"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Forward Kinematics (FK):"
              },
              {
                "type": "text",
                "text": " If you know the angles of all the joints, where is the fingertip? FK uses the robot's parameters (link lengths, joint angles) to compute the position and orientation of the end-effector (the fingertip). This is relatively straightforward mathematically."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Inverse Kinematics (IK):"
              },
              {
                "type": "text",
                "text": " If you want the fingertip to be at a specific point in space, what angles should the joints be at? IK calculates the required joint angles to place the end-effector at a desired position and orientation. This is much more complex and often has multiple or no solutions."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Examples"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Consider a single robotic finger with two joints (2-DOF), like your own index finger's main knuckles. "
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "FK Example:"
                      },
                      {
                        "type": "text",
                        "text": " If the base knuckle is at 30 degrees and the middle knuckle is at 45 degrees, you can use trigonometry to calculate exactly where the tip of the finger is located in 2D space."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "IK Example:"
                      },
                      {
                        "type": "text",
                        "text": " If you want the fingertip to touch a button at coordinates (x, y), you must solve a system of equations to find the required angles for the base and middle knuckles to achieve this."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Degrees of Freedom (DOF) count the number of independent movements a robot has."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Forward Kinematics calculates end-effector position from joint angles."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Inverse Kinematics calculates joint angles from a desired end-effector position."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "InMoov: An Open Source 3D Printed Robot Hand",
          "url": "http://inmoov.fr/hand-and-forarm/"
        },
        {
          "title": "What is Degrees of Freedom? - Article by RobotShop",
          "url": "https://www.robotshop.com/community/blog/show/what-is-degrees-of-freedom-dof"
        },
        {
          "title": "Introduction to Robotics: Kinematics (Video)",
          "url": "https://www.youtube.com/watch?v=rA_s42g_5wA"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 2,
      "title": "Actuators: Servos, Steppers, and DC Motors",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Actuators are the 'muscles' of our robot. Today, we'll compare the most common types used in robotics—servo motors, stepper motors, and DC motors—to understand their strengths and weaknesses. We will focus on servo motors as they are the most likely choice for our robotic hand due to their integrated position control."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Differentiate between servo, stepper, and DC motors."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand key servo motor specifications: torque, speed, and voltage."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain how Pulse Width Modulation (PWM) is used to control a servo motor."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Servo Motors:"
              },
              {
                "type": "text",
                "text": " These are DC motors with a built-in feedback controller. You command them to go to a specific angle (e.g., 90 degrees), and the internal circuit drives the motor until a potentiometer confirms it has reached that angle. They are ideal for applications requiring precise angular positioning, like our robot's finger joints. Most hobby servos have a limited range of 180 degrees."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Stepper Motors:"
              },
              {
                "type": "text",
                "text": " These motors move in discrete 'steps'. They offer very precise positioning and high torque at low speeds but require a dedicated driver circuit and consume power even when holding a position. They are better for applications like 3D printers and CNC machines."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "DC Motors:"
              },
              {
                "type": "text",
                "text": " These are the simplest motors. Apply voltage, and they spin. Reversing the polarity reverses the direction. They are great for continuous rotation (like wheels) but have no built-in position control. You would need to add an external encoder for feedback."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Servo Control with PWM"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Servos are controlled by a series of electrical pulses sent through their signal wire. This technique is called Pulse Width Modulation (PWM). The width of the pulse determines the target angle. For a standard servo:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A ~1 millisecond (ms) pulse corresponds to 0 degrees."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A ~1.5 ms pulse corresponds to 90 degrees (the neutral position)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A ~2 ms pulse corresponds to 180 degrees."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "These pulses are typically sent every 20 ms (a frequency of 50 Hz)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Actuators provide movement to the robot."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Servo motors are the best choice for our project due to their built-in positional control."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Key servo specs are torque (strength), speed (how fast it moves), and operating voltage."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Servos are controlled via PWM signals, where the pulse duration dictates the angle."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "How Servo Motors Work - How To Mechatronics",
          "url": "https://howtomechatronics.com/how-it-works/how-servo-motors-work-how-to-control-servos-using-arduino/"
        },
        {
          "title": "Servo vs Stepper vs DC Motor - Article by Arrow",
          "url": "https://www.arrow.com/en/research-and-events/articles/stepper-vs-servo-vs-dc-motors"
        },
        {
          "title": "Understanding PWM - SparkFun",
          "url": "https://learn.sparkfun.com/tutorials/pulse-width-modulation/all"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 3,
      "title": "Microcontrollers: Arduino vs Raspberry Pi",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The microcontroller is the 'brain' of our robot. It will run the code that reads sensors and controls the servo motors. Today we'll compare the two most popular platforms for hobbyist robotics: Arduino and Raspberry Pi. We'll determine which is better suited for controlling the low-level hardware of our robotic hand."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Describe the core difference between a microcontroller (Arduino) and a single-board computer (Raspberry Pi)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify the strengths of Arduino for real-time hardware control."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Select an appropriate Arduino model for controlling at least four servos."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Arduino"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Arduino is a microcontroller platform. It's designed to do one thing very well: execute a single program in a loop to interact with electronic hardware. It excels at real-time tasks like generating precise PWM signals for servos. It has no operating system, so its response is immediate and predictable. It's programmed in a simplified version of C++."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Raspberry Pi"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Raspberry Pi is a single-board computer. It runs a full operating system (a version of Linux) and can multitask, run a desktop, connect to the internet, etc. This makes it incredibly powerful for high-level tasks like computer vision, machine learning, or hosting a web server. However, the OS introduces tiny, unpredictable delays, making it less ideal for precise, real-time hardware timing like servo control (though it is possible)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Which to Choose?"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "For our project, an "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Arduino is the better choice"
              },
              {
                "type": "text",
                "text": " for directly controlling the hand. It provides reliable, real-time control over the servos. An Arduino Uno or Nano is sufficient, but an "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Arduino Mega"
              },
              {
                "type": "text",
                "text": " is a great option as it has many more I/O pins, which gives us flexibility for adding more servos or sensors later."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "In more complex robots, a hybrid approach is common: a Raspberry Pi handles high-level thinking and sends commands to an Arduino, which handles the low-level motor control."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Arduino is a microcontroller, ideal for real-time hardware control."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Raspberry Pi is a single-board computer, better for complex computation and tasks requiring an OS."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We will use an Arduino (Mega recommended) for its reliability in controlling our servos."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino vs. Raspberry Pi - SparkFun",
          "url": "https://learn.sparkfun.com/tutorials/arduino-vs-raspberry-pi"
        },
        {
          "title": "Official Arduino Website",
          "url": "https://www.arduino.cc/"
        },
        {
          "title": "Getting Started with Arduino (Video Series)",
          "url": "https://www.youtube.com/playlist?list=PLGs0VKk2DiYw-L-RibTTcv87lAT-A4s_A"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 4,
      "title": "Introduction to CAD for Robotics",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today we move from the conceptual to the physical design. Computer-Aided Design (CAD) software allows us to create precise 3D models of our robotic hand before we build anything. This is a critical step for ensuring parts fit together, planning mechanisms, and preparing for fabrication (like 3D printing)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the role of CAD in the robotics design process."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Compare popular CAD software options like Fusion 360 and Onshape."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Learn the basic CAD workflow: Sketch -> Extrude -> Assemble."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Parametric Modeling"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Modern CAD programs use parametric modeling. This means your design is driven by parameters (like dimensions, constraints, and relationships). If you need to change the length of a finger, you just change one number (the 'length' parameter), and the entire model updates automatically. This is incredibly powerful for iterating on designs."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "CAD Software Options"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Autodesk Fusion 360:"
              },
              {
                "type": "text",
                "text": " A very powerful, professional-grade tool that is free for hobbyists and students. It's a desktop application with cloud integration. This is our recommended tool."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Onshape:"
              },
              {
                "type": "text",
                "text": " A fully browser-based CAD tool, also very powerful and with a free plan for public projects. Great if you can't install software or use different computers."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Tinkercad:"
              },
              {
                "type": "text",
                "text": " A very simple, browser-based tool. It's great for absolute beginners but lacks the parametric features needed for a complex project like this."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Basic Workflow"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Sketch:"
                      },
                      {
                        "type": "text",
                        "text": " Create a 2D drawing on a plane. You use tools like lines, circles, and rectangles, and add dimensions and constraints (e.g., 'this line is 50mm long', 'these two lines are parallel')."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Extrude/Revolve:"
                      },
                      {
                        "type": "text",
                        "text": " Turn your 2D sketch into a 3D object by pulling it out (extrude) or spinning it around an axis (revolve)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Assemble:"
                      },
                      {
                        "type":="text",
                        "text": " Create multiple parts (components) and bring them together in an assembly. You use 'joints' to define how they move relative to each other (e.g., 'this pin rotates inside this hole')."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "CAD is essential for designing and testing mechanical parts virtually."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We will use a parametric modeler like Fusion 360 (recommended) or Onshape."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The basic process involves creating 2D sketches and turning them into 3D bodies."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Fusion 360 for Beginners (Lars Christensen)",
          "url": "https://www.youtube.com/watch?v=A5bc9c3S12g"
        },
        {
          "title": "Onshape Official Tutorials",
          "url": "https://learn.onshape.com/"
        },
        {
          "title": "Why Parametric CAD is Awesome - Article",
          "url": "https://www.scan2cad.com/cad/parametric-modeling/"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 5,
      "title": "CAD Practice: Designing a Single Finger Joint",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Theory is good, but practice is better. Today, we'll get our hands dirty in your chosen CAD software (Fusion 360 or Onshape). Our goal is to model a simple, single-joint finger. This will involve creating two separate parts (phalanges) and then joining them in an assembly to create a working knuckle."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a new component in your CAD software."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Design a 3D part from a 2D sketch using the Extrude tool."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the 'Revolute' joint to connect two components in an assembly."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Verify the joint's motion in the CAD environment."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Components vs. Bodies:"
              },
              {
                "type": "text",
                "text": " A 'body' is a single, continuous 3D shape. A 'component' is a container for one or more bodies that represents a real-world part. Components can be moved and jointed together. It's best practice to always create a new component for each distinct part of your design (e.g., 'Phalange 1' and 'Phalange 2' should be separate components)."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Joints:"
              },
              {
                "type": "text",
                "text": " Joints define the motion between components. A 'Rigid' joint locks them together. A 'Revolute' joint allows one to rotate around a specific axis relative to the other (like a hinge). A 'Slider' joint allows linear motion. We will use a Revolute joint for our knuckle."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Example Workflow"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a new component named 'BasePhalange'."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Sketch a simple rectangular profile for the finger segment. Add a circular hole at one end for the joint."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Extrude the sketch to give it thickness (e.g., 10mm)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a second component named 'TipPhalange' and repeat the process, but design the joint end to fit into the base phalange."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type":="paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "In the main assembly, use the 'Joint' tool. Select 'Revolute' as the type."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Select the center of the circular hole on each component as the joint origin. The parts should snap together."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Click and drag one of the components. It should now pivot realistically."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Practical CAD skills are built by doing. Today was the first step."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Organize designs using components for each physical part."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use joints, specifically the 'Revolute' joint, to simulate mechanical motion."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Fusion 360 Tutorial: Assemblies and Joints",
          "url": "https://www.youtube.com/watch?v=d_3k_drN9sE"
        },
        {
          "title": "Onshape Assembly Tutorial",
          "url": "https://learn.onshape.com/learn/course/onshape-assemblies/creating-onshape-assemblies/understanding-mate-connectors"
        },
        {
          "title": "Learn Fusion 360 in 30 Days for Complete Beginners (Product Design Online)",
          "url": "https://www.youtube.com/playlist?list=PLrZ2zKOtC_-DR2ZkMaK3YthYLErPxCnT-"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 6,
      "title": "Planning the 4-DOF Hand: Sketching and Component Selection",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "With the fundamentals covered, it's time to plan our specific robotic hand. This involves high-level design choices, selecting the actual electronic components we'll buy, and creating a preliminary Bill of Materials (BOM). This planning phase is crucial for staying on budget and ensuring all our parts will work together."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Decide on a mechanical design for the 4-DOF hand (e.g., four 1-DOF fingers)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Select specific models for your servos and microcontroller."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a preliminary Bill of Materials (BOM) with estimated costs."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Design Configuration"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "How will we use our 4 DOFs? The simplest and most common approach for a first hand is "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "four fingers, each with one DOF"
              },
              {
                "type": "text",
                "text": ". This means each finger can bend at a single joint, controlled by one servo. This allows for effective grasping of many objects. A thumb could be added as a fifth, non-actuated (static) part or could be one of the four moving fingers."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Component Selection"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Servos:"
                      },
                      {
                        "type": "text",
                        "text": " We need four. A standard-size servo like the MG996R is a good, budget-friendly choice with metal gears and decent torque. Look for torque ratings around 9-10 kg-cm."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Microcontroller:"
                      },
                      {
                        "type": "text",
                        "text": " An Arduino Mega 2560 is recommended for its plentiful pins and memory."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Power Supply:"
                      },
                      {
                        "type": "text",
                        "text": " Servos draw a lot of current. You CANNOT power them from the Arduino's 5V pin. You need an external power supply. A 5V or 6V supply capable of providing at least 4-5 Amps is a safe bet (each servo can draw ~1A when stalled)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Other:"
                      },
                      {
                        "type": "text",
                        "text": " 3D printer filament (PLA or PETG), wires, screws, breadboard, etc."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A good plan saves time and money later."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We've decided on a four-finger, 4-DOF design."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Key components are selected: MG996R servos, Arduino Mega, and a robust external power supply."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type":="text",
                        "text": "The next step is to formalize this plan in our first project."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "MG996R Servo Datasheet/Specs",
          "url": "https://www.electronicoscaldas.com/datasheet/MG996R_Tower-Pro.pdf"
        },
        {
          "title": "Choosing a Power Supply for your Project - Adafruit",
          "url": "https://learn.adafruit.com/power-supplies"
        },
        {
          "title": "How to Create a Bill of Materials (BOM) - Article",
          "url": "https://www.autodesk.com/products/fusion-360/blog/how-to-create-a-bill-of-materials-bom/"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 7,
      "title": "Project 1: Conceptual Design and Bill of Materials",
      "is_project_day": true,
      "project_data": {
        "title": "Project 1: Conceptual Design and Bill of Materials",
        "description": "Formalize the design plan for your 4-DOF robotic hand. This project involves creating conceptual sketches, selecting all necessary components, and compiling a detailed Bill of Materials (BOM) with suppliers and estimated costs, ensuring it stays within the overall $2000 budget.",
        "objectives": [
          "Create a set of annotated sketches showing the proposed hand design.",
          "Finalize the choice of actuators, microcontroller, and power system.",
          "Compile a comprehensive Bill of Materials in a spreadsheet.",
          "Research suppliers and calculate the total estimated cost for all parts."
        ],
        "requirements": [
          "A spreadsheet program (Google Sheets, Excel).",
          "Access to online electronics retailers (e.g., SparkFun, Adafruit, Amazon, Digi-Key) for research.",
          "Drawing tools (can be digital or physical pen and paper)."
        ],
        "deliverables": [
          "A PDF document containing at least two annotated sketches of the hand design (e.g., a top-down view and a side view showing the tendon mechanism).",
          "A spreadsheet file for the Bill of Materials, including: Item Name, Model/Part Number, Quantity, Supplier (with URL), Price per Unit, and Total Price."
        ],
        "evaluation_criteria": [
          "Clarity and feasibility of the sketched design.",
          "Completeness and organization of the Bill of Materials.",
          "Appropriateness of selected components for the project goals.",
          "Total cost estimate is comprehensive and within the project budget."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This first project is all about planning. By creating a formal design document and a Bill of Materials (BOM), you are creating the blueprint for the rest of the course. This step ensures that you have thought through the entire project, from mechanics to electronics, and have a clear plan for acquiring the necessary parts while staying on budget."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Translate your ideas into clear, annotated sketches."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Practice research skills by finding suitable components and pricing."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a professional-quality BOM, a key skill in engineering."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Getting Started"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Sketching:"
                      },
                      {
                        "type": "text",
                        "text": " Start by drawing your hand. How will the fingers attach to the palm? Where will the servos be located? How will the servos connect to the fingers (e.g., with tendons like fishing line)? Add notes to your sketches to explain these details."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "BOM Creation:"
                      },
                      {
                        "type": "text",
                        "text": " Open a spreadsheet. Create columns for Item, Quantity, Supplier, etc. Start with the big items: Microcontroller, Servos, Power Supply. Then add the smaller items: filament, screws, nuts, wires, breadboard, fishing line (for tendons), etc. Be thorough!"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Research:"
                      },
                      {
                        "type": "text",
                        "text": " Use the component recommendations from Day 6 as a starting point. Search online stores to find them or suitable alternatives. Copy the links and prices into your BOM. Don't forget to account for shipping costs if applicable."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This project solidifies the foundation of your robotic hand. A good plan now will prevent major headaches later. Take your time to create a design you are excited to build and a BOM that is realistic and complete."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Google Sheets (Free Spreadsheet Software)",
          "url": "https://www.google.com/sheets/about/"
        },
        {
          "title": "Digi-Key Component Search",
          "url": "https://www.digikey.com/"
        },
        {
          "title": "Example Robotics Project BOM",
          "url": "https://static.roland.com/assets/images/support/knowledge_base/d201804001/BOM_Sample.pdf"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 8,
      "title": "Advanced CAD: Designing the Palm and Finger Assembly",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Now that we have a plan, let's bring it to life in CAD. Today, we'll expand on our single-joint model to design the full finger and the palm that will house our servos and support the fingers. This involves creating more complex shapes and thinking about how all the parts will physically connect."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Model a multi-part finger assembly in CAD."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Design a palm structure that can mount both the fingers and servos."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the 'Mirror' or 'Pattern' tool to efficiently create multiple identical parts."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Top-Down vs. Bottom-Up Assembly:"
              },
              {
                "type": "text",
                "text": " 'Bottom-Up' is what we did on Day 5: design parts in isolation, then put them together. 'Top-Down' is designing parts within the context of the assembly, using the geometry of one part to define another. For the palm and fingers, a mix is good. Design a finger, then design the palm around where the finger needs to mount."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Mounting Features:"
              },
              {
                "type": "text",
                "text": " You need to design features for components to attach. For servos, this means creating cutouts that match their dimensions and holes for their mounting screws. You'll need to find a datasheet for your chosen servo to get these exact dimensions."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Pattern Tools:"
              },
              {
                "type": "text",
                "text": " Don't design four fingers from scratch! Design one perfect finger component. Then, in your assembly, use the 'Rectangular Pattern' or 'Circular Pattern' tool to create three more copies, perfectly spaced."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Today's goal is to model the main mechanical components: fingers and palm."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Remember to design mounting points for your real-world components (servos, screws)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use efficiency tools like 'Pattern' to save time and ensure consistency."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Fusion 360 Top-Down Assembly Tutorial",
          "url": "https://www.youtube.com/watch?v=C_7_3GbhL6U"
        },
        {
          "title": "GrabCAD: A Library of CAD Models (search for your servo model)",
          "url": "https://grabcad.com/library"
        },
        {
          "title": "Using Pattern Tools in Fusion 360",
          "url": "https://help.autodesk.com/view/fusion360/ENU/?guid=GUID-E5B37841-5246-454E-A349-FB653C53B433"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 9,
      "title": "Tendon-Driven Mechanisms vs. Direct Drive",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "How do we get the power from the servo to the fingertip? There are two main approaches: direct drive and tendon-driven. Today we'll explore these mechanisms, focusing on the tendon-driven approach, which is more common in anthropomorphic hands and is the method we'll use."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Compare and contrast direct drive and tendon-driven actuation."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the benefits of using a tendon-driven system for a robotic hand."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Identify key design considerations for a tendon system (e.g., routing, tensioning)."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Direct Drive"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type":="text",
                "text": "In a direct drive system, the actuator is located directly at the joint it controls. This is simple and provides very direct, backlash-free control. However, it means placing a bulky, heavy motor at each joint, which is often not feasible for a compact, lightweight finger."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Tendon-Driven Mechanism"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This approach mimics biology. The actuators (servos) are located remotely (in the palm or forearm), and they pull on a high-strength cable or 'tendon' (like fishing line or braided cord) that is routed through the finger. Pulling the tendon causes the joint to bend. This allows the fingers to be very lightweight and slim, while the heavy motors are kept in a central location."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Design Considerations for Tendons"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Routing:"
                      },
                      {
                        "type": "text",
                        "text": " The path of the tendon must be carefully designed to prevent snagging and to provide the desired motion. You'll need to model channels or eyelets in your CAD parts for the tendon to pass through."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Return Force:"
                      },
                      {
                        "type": "text",
                        "text": " Pulling a tendon closes the finger, but what opens it? You can use a second 'extensor' tendon, or more simply, use an elastic cord on the back of the finger to pull it back open when the main tendon is released."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Tensioning:"
                      },
                      {
                        "type": "text",
                        "text": " The tendon needs to be properly tensioned. Too loose, and you'll have sloppy motion. Too tight, and you'll stall the servo. Your design should include a way to adjust the tension."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We will use a tendon-driven mechanism to actuate our fingers."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "This keeps the fingers light and moves the heavy servos to the palm."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Our CAD models must include features for routing the tendons and a plan for returning the finger to an open state."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Tendon-based Transmission Systems for Robots - A Review",
          "url": "https://www.researchgate.net/publication/262234035_Tendon-based_Transmission_Systems_for_Robots_A_Review"
        },
        {
          "title": "James Bruton's OpenDog Project (Excellent examples of tendon mechanisms)",
          "url": "https://www.youtube.com/watch?v=nLu5o_H_Wso"
        },
        {
          "title": "Braided Fishing Line on Amazon (Example Tendon Material)",
          "url": "https://www.amazon.com/s?k=braided+fishing+line"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 10,
      "title": "Introduction to 3D Printing for Prototyping",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "3D printing, or additive manufacturing, is the process we'll use to turn our digital CAD models into physical parts. Today, we'll learn about the most common type of 3D printing (FDM), the software used to prepare models for printing (slicers), and the common materials we can use."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain the basics of Fused Deposition Modeling (FDM) 3D printing."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the role of a slicer program and its key settings (layer height, infill, supports)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Compare common 3D printing filaments: PLA, PETG, and ABS."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "FDM Printing"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "FDM printers work by melting a plastic filament and extruding it through a nozzle, layer by layer, to build up an object. It's like a computer-controlled hot glue gun. This technology is affordable, fast, and perfect for creating functional prototypes and parts for projects like ours."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The Slicer"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "You can't send a CAD file (like .f3d or .step) directly to a 3D printer. First, you export your model as a mesh file (usually .STL or .3MF). Then, you open this file in a 'slicer' program (like PrusaSlicer, Cura, or Bambu Studio). The slicer 'slices' the model into hundreds of layers and generates the G-code, which is the line-by-line set of instructions the printer follows."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Key Slicer Settings:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "italic"
                          }
                        ],
                        "text": "Layer Height:"
                      },
                      {
                        "type": "text",
                        "text": " Thinner layers = higher quality, slower print. Thicker layers = lower quality, faster print. 0.2mm is a good standard."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "italic"
                          }
                        ],
                        "text": "Infill:"
                      },
                      {
                        "type": "text",
                        "text": " The internal structure of the part. 15-25% infill is usually strong enough for robotic parts."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "italic"
                          }
                        ],
                        "text": "Supports:"
                      },
                      {
                        "type": "text",
                        "text": " The printer can't print in mid-air. For parts with steep overhangs, the slicer generates temporary support structures that you break off after the print is finished."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Materials"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "PLA:"
              },
              {
                "type": "text",
                "text": " Easy to print, rigid, and comes in many colors. Great for beginners and general prototyping. Can be brittle."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "PETG:"
              },
              {
                "type": "text",
                "text": " Stronger and more durable than PLA, with better temperature resistance. Slightly more difficult to print. "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "This is the recommended material for our final hand parts."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type":="text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "ABS:"
              },
              {
                "type": "text",
                "text": " Very strong and temperature resistant (what LEGOs are made of), but difficult to print as it warps easily and releases fumes. Requires a heated enclosure."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We'll use FDM 3D printing to fabricate our parts."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "CAD models are exported as STL files and prepared in a slicer program."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Key settings like layer height, infill, and supports affect print quality and strength."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "PETG is the recommended material for its strength and durability."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "3D Printing Guide by All3DP",
          "url": "https://all3dp.com/1/3d-printing-basics-for-beginners-what-is-3d-printing/"
        },
        {
          "title": "PrusaSlicer (Free Slicer Software)",
          "url": "https://www.prusa3d.com/page/prusaslicer_424/"
        },
        {
          "title": "PLA vs PETG vs ABS Filament Guide - MatterHackers",
          "url": "https://www.matterhackers.com/news/filament-comparison-pla-vs-abs-vs-petg"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 11,
      "title": "Electronics I: Powering Servos and Voltage Regulation",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A common beginner mistake is trying to power motors directly from the microcontroller. This can damage the board. Today, we'll learn the right way to power our servos using an external power supply and understand why this is so critical. We will also look at voltage regulation to ensure all components get the correct voltage."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain why servos need an external power supply."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Calculate the total current requirement for the system."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Draw a circuit diagram for connecting a servo, Arduino, and external power supply."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Current Draw"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "An Arduino's 5V pin can only supply a very small amount of current (around 400-500mA total). A single MG996R servo can draw over 1A (1000mA) when under load or stalled. Trying to power even one servo from the Arduino will cause the Arduino's voltage to drop, leading to resets and unpredictable behavior, and could permanently damage the board's voltage regulator."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The Correct Wiring"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The key is to "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "share a common ground"
              },
              {
                "type": "text",
                "text": ". Your external power supply will power the servos, and your Arduino will be powered separately (e.g., via USB). The grounds of both the Arduino and the external power supply MUST be connected."
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Servo Signal Pin (usually orange or yellow):"
                      },
                      {
                        "type": "text",
                        "text": " Connects to a PWM pin on the Arduino."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Servo Power Pin (usually red):"
                      },
                      {
                        "type": "text",
                        "text": " Connects to the Positive (+) terminal of your external 5V/6V power supply."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Servo Ground Pin (usually brown or black):"
                      },
                      {
                        "type": "text",
                        "text": " Connects to the Ground (-) terminal of your external power supply AND a GND pin on the Arduino."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Voltage Regulation"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "If your power source is higher than the required voltage (e.g., using a 12V battery), you'll need a voltage regulator to step it down to the 5V or 6V needed by the servos. A 'buck converter' is an efficient type of voltage regulator perfect for this job. For our project, it's simplest to buy a power supply that outputs the correct voltage directly."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Never power motors or servos directly from an Arduino's 5V pin."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use an external power supply that can meet the total current demand of all servos."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Always connect the ground of the external supply to the ground of the Arduino."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Connecting a Servo to an Arduino (Official Guide)",
          "url": "https://docs.arduino.cc/learn/electronics/servo-motors"
        },
        {
          "title": "The Importance of a Common Ground - Bald Engineer",
          "url": "https://www.baldengineer.com/common-ground-and-why-you-need-one.html"
        },
        {
          "title": "What is a Buck Converter? - All About Circuits",
          "url": "https://www.allaboutcircuits.com/technical-articles/what-is-a-buck-converter-introduction-to-the-step-down-regulator/"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 12,
      "title": "Electronics II: Servo Control with Arduino",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Now that we know how to wire our servos safely, let's write the code to control them. We will use the Arduino IDE and the standard Servo library, which makes controlling servos incredibly easy. We'll write a simple sketch to move a single servo to different positions."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Set up the Arduino IDE and install the Servo library."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write an Arduino sketch to sweep a servo back and forth."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the key functions: `attach()`, `write()`, and `detach()`."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The Arduino Servo Library"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This built-in library handles all the complex PWM timing for you. You simply tell it which pin the servo is on and what angle you want it to go to."
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "#include <Servo.h>"
                      },
                      {
                        "type": "text",
                        "text": " - Includes the library in your sketch."
                      }
                    ]
                  }
                ]
              },
              {
                "type":="listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "Servo myServo;"
                      },
                      {
                        "type": "text",
                        "text": " - Creates a servo object."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "myServo.attach(9);"
                      },
                      {
                        "type": "text",
                        "text": " - Attaches the servo object to a physical pin (pin 9 in this case). Must be a PWM pin."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "myServo.write(90);"
                      },
                      {
                        "type": "text",
                        "text": " - Commands the servo to move to a 90-degree angle."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Example Code"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "cpp"
            },
            "content": [
              {
                "type": "text",
                "text": "#include <Servo.h>\n\nServo fingerServo;  // create servo object to control a servo\n\nvoid setup() {\n  fingerServo.attach(9);  // attaches the servo on pin 9 to the servo object\n}\n\nvoid loop() {\n  // Sweep from 0 to 180 degrees\n  for (int pos = 0; pos <= 180; pos += 1) { \n    fingerServo.write(pos);\n    delay(15); // waits 15ms for the servo to reach the position\n  }\n\n  // Sweep from 180 to 0 degrees\n  for (int pos = 180; pos >= 0; pos -= 1) {\n    fingerServo.write(pos);\n    delay(15);\n  }\n}"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The Arduino Servo library simplifies servo control."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The main steps are to include the library, create a servo object, attach it to a pin, and use `write()` to set its position."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "You should now be able to control a servo using your Arduino."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino Servo Library Reference",
          "url": "https://www.arduino.cc/reference/en/libraries/servo/"
        },
        {
          "title": "Arduino PWM Pins Explained",
          "url": "https://docs.arduino.cc/learn/built-in-libraries/pulse-width-modulation"
        },
        {
          "title": "Top 5 Arduino Servo Projects (Video)",
          "url": "https://www.youtube.com/watch?v=J29Qp4rso8U"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 13,
      "title": "Reading Sensors: Potentiometers & Flex Sensors",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Controlling a hand is one thing, but how can the hand sense its own position or the world around it? Today, we'll look at two simple analog sensors: potentiometers, which can be used for joint position feedback, and flex sensors, which can measure bending. This introduces the concept of a 'closed-loop' system."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Explain how analog sensors work with an Arduino."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Read data from a potentiometer using `analogRead()`."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the `map()` function to scale sensor values to control a servo."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Analog Sensors & `analogRead()`:"
              },
              {
                "type": "text",
                "text": " Unlike digital signals (HIGH/LOW), analog signals can have any value within a range. A potentiometer is a variable resistor; as you turn the knob, its resistance changes. An Arduino's analog input pins can read this changing voltage. The `analogRead()` function returns a value from 0 to 1023, representing a voltage from 0V to 5V."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Flex Sensors:"
              },
              {
                "type": "text",
                "text": " These are special resistors that change their resistance value when bent. They can be attached to a finger to measure how much it's flexing, providing feedback on the joint angle."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The `map()` function:"
              },
              {
                "type": "text",
                "text": " This is a very useful function. It re-maps a number from one range to another. For example, we can map the analog input range (0-1023) to the servo output range (0-180). `map(value, fromLow, fromHigh, toLow, toHigh)`."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Example: Knob Control"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "cpp"
            },
            "content": [
              {
                "type": "text",
                "text": "#include <Servo.h>\n\nServo myServo;\nint const potPin = A0; // Potentiometer connected to Analog Pin 0\nint potVal;\nint angle;\n\nvoid setup() {\n  myServo.attach(9);\n}\n\nvoid loop() {\n  potVal = analogRead(potPin); // reads the value of the potentiometer (value between 0 and 1023)\n  angle = map(potVal, 0, 1023, 0, 180); // scale it to use it with the servo (value between 0 and 180)\n  myServo.write(angle);\n  delay(15);\n}"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Sensors provide feedback, allowing for more intelligent control."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use `analogRead()` to get input from sensors like potentiometers and flex sensors."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The `map()` function is perfect for converting sensor readings into servo commands."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino Analog Read Tutorial",
          "url": "https://www.arduino.cc/reference/en/language/functions/analog-io/analogread/"
        },
        {
          "title": "Arduino map() Function Reference",
          "url": "https://www.arduino.cc/reference/en/language/functions/math/map/"
        },
        {
          "title": "Flex Sensor Hookup Guide - SparkFun",
          "url": "https://learn.sparkfun.com/tutorials/flex-sensor-hookup-guide"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 14,
      "title": "Finalizing CAD Models and Preparing for Print",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type":="heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This is our final design day before we start building. We'll review our CAD models, make any necessary adjustments, and ensure they are 'printable'. This includes checking for tolerances, adding features for assembly (like screw holes), and exporting the models as STL files for the slicer."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the concept of tolerance in 3D printed parts."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Add fillets and chamfers to improve strength and printability."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Export components from CAD as STL files."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Tolerances:"
              },
              {
                "type": "text",
                "text": " 3D prints aren't perfectly accurate. If you design a 5mm peg to fit in a 5mm hole, it won't fit. You need to add tolerance. A good starting point for FDM printing is to make the hole slightly larger, for example, 5.2mm or 5.3mm. You may need to print small test pieces to dial in the perfect tolerance for your printer."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Fillets and Chamfers:"
              },
              {
                "type": "text",
                "text": " These are tools in your CAD software. A 'fillet' rounds a sharp edge, while a 'chamfer' cuts it at an angle. Adding a small fillet to inside corners can significantly increase the strength of a part. Adding a chamfer to the bottom edge of a print can help reduce 'elephant's foot' (where the first layer squishes out) and improve bed adhesion."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Exporting for Slicing:"
              },
              {
                "type": "text",
                "text": " In Fusion 360, you can right-click on a component in the browser tree and select 'Save as Mesh'. Choose the '3MF' or 'STL' format. '3MF' is more modern, but 'STL' is universally supported. Ensure the refinement is set to 'High' for a smooth model."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Final Checklist"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Are all moving parts properly toleranced?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Are there holes for all necessary screws and wires?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Are there channels for the tendons to run through?"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Have you considered the orientation the part will be printed in to maximize strength?"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A final design review is critical before fabrication."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Pay close attention to tolerances for parts that need to fit together."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Export each component as a separate STL file, ready for the next project."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Designing for 3D Printing: Tolerances - Hubs",
          "url": "https://www.hubs.com/knowledge-base/how-design-parts-3d-printing/"
        },
        {
          "title": "Fillets and Chamfers in Fusion 360",
          "url": "https://www.youtube.com/watch?v=hGIeQ7-d3J4"
        },
        {
          "title": "How to Export STL files from Fusion 360",
          "url": "https://knowledge.autodesk.com/support/fusion-360/learn-explore/caas/sfdcarticles/sfdcarticles/How-to-export-an-STL-file-from-Fusion-360.html"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 15,
      "title": "Project 2: 3D Print and Assemble a Single Finger",
      "is_project_day": true,
      "project_data": {
        "title": "Project 2: 3D Print and Assemble a Single Finger",
        "description": "Translate your digital design into a physical, working prototype. This project involves slicing your CAD models, 3D printing the parts for a single finger, and assembling the mechanical system. You will then test its movement manually.",
        "objectives": [
          "Successfully slice your finger component models using a slicer program.",
          "3D print the phalanges and any necessary joint pins.",
          "Clean up and post-process the printed parts.",
          "Assemble the finger and test its range of motion by hand."
        ],
        "requirements": [
          "Access to a 3D printer (personal, library, or makerspace).",
          "3D printing filament (PLA is fine for this prototype, PETG recommended).",
          "Slicer software (PrusaSlicer, Cura, etc.).",
          "Basic tools: flush cutters, small files or sandpaper for cleanup.",
          "Your exported STL files from the previous day."
        ],
        "deliverables": [
          "A short video (15-30 seconds) demonstrating the assembled finger and its smooth mechanical movement when manipulated by hand.",
          "A photograph of your printed parts laid out before assembly.",
          "A brief text summary of any challenges faced during printing or assembly and how you overcame them (e.g., 'The joint was too tight, so I reprinted one part with 0.2mm more tolerance')."
        ],
        "evaluation_criteria": [
          "Quality of the 3D prints (e.g., minimal stringing, good layer adhesion).",
          "Successful assembly of the finger components.",
          "Smoothness of the joint's mechanical action in the video.",
          "Clarity of the summary of challenges and solutions."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "It's time to make something real! This project is a major milestone where you'll apply your CAD and 3D printing knowledge to create the first functional part of your robotic hand. By focusing on a single finger, we can work through the challenges of printing and assembly on a small scale before committing to printing the entire hand."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Gain hands-on experience with the 3D printing workflow."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Practice post-processing skills for cleaning up printed parts."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Validate that your mechanical design works as intended."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Getting Started"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Slicing:"
                      },
                      {
                        "type": "text",
                        "text": " Import your finger part STLs into your slicer. Orient them on the build plate for maximum strength (avoiding layer lines along axes that will experience high stress). Use standard settings (0.2mm layer height, 15-20% infill) and add supports if necessary. Generate the G-code."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Printing:"
                      },
                      {
                        "type": "text",
                        "text": " Load your filament, ensure the build plate is clean, and start the print. Monitor the first layer to make sure it's adhering well."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Post-Processing:"
                      },
                      {
                        "type": "text",
                        "text": " Once the print is cool, remove it from the build plate. Carefully remove any support material using flush cutters or pliers. Use a file or sandpaper to smooth any rough edges, especially around the joint areas."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Assembly & Testing:"
                      },
                      {
                        "type": "text",
                        "text": " Fit the parts together. Does the joint pin fit? Is the motion smooth or too tight/loose? This is your chance to identify design flaws. If it's not right, go back to your CAD model, adjust the tolerances, and reprint."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "By the end of this project, you will have a tangible, working piece of your final robot. This iterative process of design, print, and test is fundamental to robotics and engineering."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "3D Print Post-Processing Techniques",
          "url": "https://all3dp.com/2/post-processing-3d-prints-the-basics/"
        },
        {
          "title": "Troubleshooting 3D Print Quality Issues",
          "url": "https://all3dp.com/1/common-3d-printing-problems-troubleshooting-3d-printer-issues/"
        },
        {
          "title": "CHEP's Filament Friday (YouTube channel with great slicer tips)",
          "url": "https://www.youtube.com/user/beginnerelectronics"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 16,
      "title": "Assembling the Full Hand Mechanical Structure",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "With a successfully prototyped finger, it's time for mass production! Today's goal is to print the remaining fingers and the palm structure, then assemble the complete mechanical hand. This will involve careful assembly, ensuring all joints move freely and are securely attached to the palm."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Print all remaining mechanical parts for the hand."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Assemble the fingers and mount them to the palm."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Install the servos into their mounting points in the palm."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type":="text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Batch Printing:"
              },
              {
                "type": "text",
                "text": " To save time, you can often print multiple parts at once. In your slicer, you can load the finger components and duplicate them to print all the parts for the remaining three fingers in a single print job. Be aware that if one part fails, the entire print may be ruined."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Hardware and Fasteners:"
              },
              {
                "type": "text",
                "text": " You will now need the screws and nuts from your Bill of Materials. M3 screws are very common in 3D printed projects. Use them to secure the servos and potentially to fasten the palm pieces together if it was printed in multiple parts."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Tendon Routing:"
              },
              {
                "type": "text",
                "text": " Before fully closing everything up, thread the tendons (fishing line) through the channels in the fingers and palm. It's much harder to do this once everything is screwed together. Leave extra length on both ends for now."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Assembly Order"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Print all parts. Recommended material: PETG for strength."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Clean and post-process all prints."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Assemble each of the four fingers individually."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Mount the servos into the palm structure."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Attach the assembled fingers to their mounting points on the palm."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Route the tendons from the fingertips, through the fingers and palm, to the servo locations."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Today's focus is on fabrication and mechanical assembly."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A methodical assembly process is key to success."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "By the end of the day, you should have a fully assembled, but not yet wired, robotic hand."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Tips for Assembling 3D Printed Parts",
          "url": "https://www.hubs.com/knowledge-base/how-assemble-3d-printed-parts/"
        },
        {
          "title": "Guide to Screws and Nuts - McMaster-Carr",
          "url": "https://www.mcmaster.com/nuts"
        },
        {
          "title": "InMoov Hand Assembly Instructions (for inspiration)",
          "url": "http://inmoov.fr/hand-and-forarm/"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 17,
      "title": "Wiring the Electronics: Servos, Controller, and Power",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "With the mechanical structure complete, it's time to give our hand life by wiring up the electronics. This involves connecting all four servos to the Arduino and the external power supply. We'll focus on creating a neat and robust wiring harness, which is crucial for reliability."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a power distribution bus for the servos."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Connect the servo signal lines to the Arduino."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Implement good cable management practices."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Power Distribution Bus"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "You need to get power and ground to four different servos from one power supply. Instead of a messy tangle of wires, create a 'bus'. This can be done on a breadboard or a piece of protoboard. Solder two rows of header pins. Connect the positive (+) wire from your power supply to one row, and the negative (-) wire to the other. Now you have multiple convenient points to plug in the power and ground wires from each servo."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Signal Wiring"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The signal wires from each of the four servos need to connect to four different PWM-capable pins on your Arduino Mega. Pick four convenient pins (e.g., pins 8, 9, 10, 11) and make a note of which pin controls which finger. This is crucial for the programming step."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Don't Forget the Common Ground!"
              },
              {
                "type": "text",
                "text": " Re-read Day 11 if you need a refresher. A wire must connect the ground bus (which is connected to the external supply's ground) to one of the GND pins on the Arduino."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Cable Management"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A 'rat's nest' of wires is unreliable and hard to debug. Use zip ties, heat shrink tubing, or braided cable sleeves to bundle wires together. Cut wires to the appropriate length instead of leaving long, loopy coils. A tidy project is a happy project."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a power bus to neatly distribute power to all servos."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Connect servo signal wires to Arduino PWM pins."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Ensure a common ground connection between the power supply and the Arduino."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Keep your wiring tidy for reliability and ease of debugging."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "How to Use a Breadboard - SparkFun",
          "url": "https://learn.sparkfun.com/tutorials/how-to-use-a-breadboard"
        },
        {
          "title": "Guide to Tidy Wiring - Adafruit",
          "url": "https://learn.adafruit.com/tidy-wiring"
        },
        {
          "title": "Arduino Mega Pinout Diagram",
          "url": "https://docs.arduino.cc/hardware/mega-2560"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 18,
      "title": "Programming I: Basic Sketch for Individual Servo Control",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "It's time to write the first version of the hand's control software. Our goal today is to expand on our single-servo sketch from Day 12 to control all four servos. We will create four separate servo objects and write code to test each finger's movement individually."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Instantiate and manage multiple servo objects in an Arduino sketch."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use an array to store servo objects for easier management."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write code to test the full range of motion for each finger one by one."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Managing Multiple Servos"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Controlling four servos is just like controlling one, repeated four times. You create four servo objects and attach each one to a different pin."
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "cpp"
            },
            "content": [
              {
                "type": "text",
                "text": "Servo finger1, finger2, finger3, finger4;\n\nvoid setup() {\n  finger1.attach(8);\n  finger2.attach(9);\n  finger3.attach(10);\n  finger4.attach(11);\n}"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Using Arrays for Cleaner Code"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A better way to manage this is with arrays. An array is a collection of variables of the same type. We can have an array of Servo objects and an array of their corresponding pin numbers. This allows us to use loops to control them, which is much cleaner."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Example Code (Using Arrays)"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "cpp"
            },
            "content": [
              {
                "type": "text",
                "text": "#include <Servo.h>\n\nconst int NUM_SERVOS = 4;\nServo servos[NUM_SERVOS];\nint servoPins[NUM_SERVOS] = {8, 9, 10, 11}; // Pins for each servo\n\nvoid setup() {\n  for (int i = 0; i < NUM_SERVOS; i++) {\n    servos[i].attach(servoPins[i]);\n  }\n}\n\nvoid loop() {\n  // Test each servo one by one\n  for (int i = 0; i < NUM_SERVOS; i++) {\n    // Move servo 'i' to 0 degrees\n    servos[i].write(0);\n    delay(500);\n    \n    // Move servo 'i' to 180 degrees\n    servos[i].write(180);\n    delay(500);\n\n    // Return to neutral\n    servos[i].write(90);\n    delay(500);\n  }\n}"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Controlling multiple servos is a straightforward extension of controlling one."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Using arrays for servo objects and pins makes the code much more organized and scalable."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "This test sketch is important for verifying that your wiring is correct for all four channels."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino Arrays Tutorial",
          "url": "https://www.arduino.cc/reference/en/language/variables/data-types/array/"
        },
        {
          "title": "Controlling Multiple Servos with Arduino - DroneBot Workshop",
          "url": "https://www.youtube.com/watch?v=k_b_gI-sawE"
        },
        {
          "title": "Arduino For Loop Reference",
          "url": "https://www.arduino.cc/reference/en/language/structure/control-structure/for/"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 19,
      "title": "Programming II: Creating Functions for Basic Gestures",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Having individual control is good, but we want the hand to perform coordinated actions. Today, we'll refactor our code to use functions. We will create reusable blocks of code for common gestures like 'open hand', 'close hand', and 'point'. This makes our main loop much cleaner and easier to read."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the purpose and syntax of functions in C++/Arduino."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write a function to move all servos to a 'closed' position."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write a function to move all servos to an 'open' position."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Refactor the main loop to call these gesture functions."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Functions"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A function is a named block of code that performs a specific task. You've already been using them: `setup()` and `loop()` are functions! Creating your own functions helps to organize your code, avoid repetition, and make it more readable. A function can take inputs (parameters) and can return an output."
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "cpp"
            },
            "content": [
              {
                "type": "text",
                "text": "void myFunctionName() {\n  // code to be executed goes here\n}"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The `void` keyword means the function doesn't return any value."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Example Code with Functions"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "cpp"
            },
            "content": [
              {
                "type": "text",
                "text": "#include <Servo.h>\n\nconst int NUM_SERVOS = 4;\nServo servos[NUM_SERVOS];\nint servoPins[NUM_SERVOS] = {8, 9, 10, 11};\n\n// Define our gesture functions\nvoid openHand() {\n  for (int i = 0; i < NUM_SERVOS; i++) {\n    servos[i].write(0); // Assuming 0 degrees is fully open\n  }\n}\n\nvoid closeHand() {\n  for (int i = 0; i < NUM_SERVOS; i++) {\n    servos[i].write(150); // Assuming 150 is a good closed position\n  }\n}\n\nvoid setup() {\n  for (int i = 0; i < NUM_SERVOS; i++) {\n    servos[i].attach(servoPins[i]);\n  }\n}\n\nvoid loop() {\n  openHand();\n  delay(1000);\n  closeHand();\n  delay(1000);\n}"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Functions are essential for writing clean, organized, and reusable code."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We've created functions for high-level actions like 'open' and 'close'."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "This modular approach makes it easy to add more complex gestures later."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino Function Reference",
          "url": "https://www.arduino.cc/reference/en/language/structure/functions/"
        },
        {
          "title": "Writing Good Arduino Code - A Guide",
          "url": "https://docs.arduino.cc/learn/programming/style-guide"
        },
        {
          "title": "Programming with Functions in C++ (Video)",
          "url": "https://www.youtube.com/watch?v=9S3d32qclj0"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 20,
      "title": "Introduction to Forward Kinematics (FK)",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Let's revisit a concept from Day 1: Forward Kinematics. Now that we have a physical hand, we can explore this more practically. The goal of FK is to answer the question: given our joint angles (which we control with the servos), where are the fingertips in 3D space? We'll look at the basic math involved for a simple 2D case."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Represent a robot arm as a series of links and joints."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use basic trigonometry (sine and cosine) to calculate the position of a single joint."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand how to chain these calculations to find the final end-effector position."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Kinematic Chain"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "A robotic finger can be modeled as a 'kinematic chain'. It's a sequence of rigid bodies ('links', our phalanges) connected by joints. The position of each link depends on the one before it."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The Math (for a 2-Link Arm in 2D)"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Imagine a finger with two joints. Let's say the base is at coordinate (0,0)."
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Link 1 has length L1 and is at angle θ1."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Link 2 has length L2 and is at angle θ2 (relative to Link 1)."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The position of the first joint (x1, y1) is:"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "x1 = L1 * cos(θ1)"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "y1 = L1 * sin(θ1)"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The position of the second joint (the fingertip) (x2, y2) is the position of the first joint plus the contribution of the second link:"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "x2 = x1 + L2 * cos(θ1 + θ2)"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "y2 = y1 + L2 * sin(θ1 + θ2)"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "By plugging in the known lengths and angles, we can calculate the fingertip's exact (x, y) position. For our 1-DOF fingers, the calculation is much simpler, as there's only one link and one joint to consider per finger."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Forward Kinematics (FK) uses link lengths and joint angles to find the end-effector position."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The math relies on basic trigonometry applied to each link in the chain."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "While we won't implement this on the Arduino today, understanding the theory is important for advanced control."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Forward Kinematics - A Simple Explanation (Video)",
          "url": "https://www.youtube.com/watch?v=k9i01y3-GfU"
        },
        {
          "title": "Khan Academy: Intro to Trigonometry",
          "url": "https://www.khanacademy.org/math/trigonometry"
        },
        {
          "title": "Robotics: Computational Motion Planning (Coursera)",
          "url": "https://www.coursera.org/learn/robotics-motion-planning"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 21,
      "title": "Implementing Simplified FK and Tendon Attachment",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Today is a hands-on day to finalize the connection between the servos and the fingers. We will attach the tendons to the servo horns and the fingertips. We'll also implement a 'simplified' version of FK by just printing the calculated servo angles to the Serial Monitor, confirming our code is working as intended."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type":="text",
                        "text": "Securely attach tendons to servo horns and finger joints."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Tension the tendons correctly for responsive movement."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the Arduino Serial Monitor to print debug information."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Tendon Attachment"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The goal is to translate the rotational motion of the servo into linear pulling motion on the tendon. Attach a 'horn' to the servo. Tie the tendon to the hole furthest from the center of the horn for maximum pull distance. At the fingertip, the tendon can be tied through a small hole or to a screw. The key is that the connection must be secure and not slip."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Tensioning"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "With the servo at its 'open' position (e.g., 0 degrees), pull the tendon taut and secure it to the fingertip. If you are using an elastic cord for return, make sure it is also slightly tensioned in this position. When the servo moves to the 'closed' position (e.g., 150 degrees), it should pull the tendon and bend the finger. There should be no slack in the line when the finger is open."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The Serial Monitor"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The Serial Monitor is a built-in tool in the Arduino IDE that lets the Arduino send text back to your computer. It's invaluable for debugging. You must first initialize it with `Serial.begin(9600);` in your `setup()` function. Then you can use `Serial.println(\"Hello World\");` to print text or `Serial.println(variable);` to print the value of a variable."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Properly attaching and tensioning tendons is key to the hand's performance."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The Serial Monitor is your best friend for debugging your code."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "By the end of today, the servos should be physically connected to the fingers via tendons."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino Serial Monitor Tutorial",
          "url": "https://docs.arduino.cc/built-in-examples/communication/SerialEvent"
        },
        {
          "title": "Knot Tying for Robotics",
          "url": "https://www.instructables.com/The-Most-Useful-Knots-for-Makers/"
        },
        {
          "title": "Connecting Servos and Tendons (Visual Example from InMoov)",
          "url": "http://inmoov.fr/hand-and-forarm/"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 22,
      "title": "Calibrating the Hand's Range of Motion",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Not all servos are created equal, and our mechanical system has limits. Simply commanding a servo to 0 or 180 degrees might break a 3D printed part or stall the motor. Today is about calibration: finding the true, safe minimum and maximum angles for each finger and updating our code to respect these limits."
              }
            ]
          },
          {
            "type":="heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the importance of software limits for hardware safety."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Systematically find the min and max safe operating angle for each finger."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Store these calibration values in arrays in the Arduino code."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "The Need for Calibration"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The ideal 0-180 degree range of a servo rarely matches the mechanical reality. Your 'fully open' position might correspond to a servo angle of 15 degrees, and 'fully closed' might be 160 degrees. Pushing past these points puts stress on the servo and the 3D printed parts, causing them to break or wear out quickly. Calibration finds these real-world limits."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Calibration Process"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type":="paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write a simple sketch that allows you to send an angle to a specific servo via the Serial Monitor."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "For each finger, slowly increase the angle from 0 until the finger is fully open but not straining. Record this angle as `minAngle`."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Slowly increase the angle further until the finger is fully closed but not stalling the servo (you'll hear it buzz loudly if it's stalled). Record this angle as `maxAngle`."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Repeat for all four fingers. Each one will likely have slightly different values."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Storing Calibration Data"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Store these values in arrays in your code. Now, your `openHand` and `closeHand` functions will use these values instead of hard-coded numbers like 0 and 180."
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "cpp"
            },
            "content": [
              {
                "type": "text",
                "text": "// At the top of your sketch\nint minAngles[NUM_SERVOS] = {15, 12, 18, 14}; // Your calibrated values\nint maxAngles[NUM_SERVOS] = {160, 165, 158, 162}; // Your calibrated values\n\nvoid openHand() {\n  for (int i = 0; i < NUM_SERVOS; i++) {\n    servos[i].write(minAngles[i]);\n  }\n}\n\nvoid closeHand() {\n  for (int i = 0; i < NUM_SERVOS; i++) {\n    servos[i].write(maxAngles[i]);\n  }\n}"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Calibration is a crucial step to prevent damage to your robot."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We found the safe operating range for each finger and stored these values."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Our code is now safer and tailored to our specific hardware."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino Serial Input Basics",
          "url": "https://www.programmingelectronics.com/serial-read/"
        },
        {
          "title": "What is Robot Calibration? - Article",
          "url": "https://www.robots.com/articles/what-is-robot-calibration"
        },
        {
          "title": "How to Avoid Stalling Servos",
          "url": "https://robotics.stackexchange.com/questions/1059/how-to-avoid-stalling-a-servo-motor"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 23,
      "title": "Project 3: Full Hand Assembly and Basic Gesture Control",
      "is_project_day": true,
      "project_data": {
        "title": "Project 3: Full Hand Assembly and Basic Gesture Control",
        "description": "This project integrates all the work from the past weeks. You will combine the fully assembled mechanical hand with the wired electronics and the calibrated gesture code. The final result will be a robotic hand that can perform basic, pre-programmed gestures like opening, closing, and pointing.",
        "objectives": [
          "Verify all mechanical, electrical, and software components are working together.",
          "Demonstrate the hand performing at least three distinct gestures.",
          "Ensure the hand operates smoothly and reliably without stalling servos or damaging parts.",
          "Create a clean, self-contained system (hardware and software)."
        ],
        "requirements": [
          "Your fully assembled and wired robotic hand.",
          "Your Arduino sketch with calibrated gesture functions.",
          "The external power supply for the servos.",
          "A computer with the Arduino IDE to upload the code."
        ],
        "deliverables": [
          "A video (30-60 seconds) demonstrating the hand performing an automated sequence of at least three gestures (e.g., open, close, point, repeat).",
          "The final, commented Arduino code file (.ino) used for the demonstration.",
          "A photograph showing the final, tidy wiring of your project."
        ],
        "evaluation_criteria": [
          "Successful and reliable execution of gestures in the video.",
          "Smoothness of the hand's motion, showing good calibration.",
          "Clarity, organization, and commenting of the submitted Arduino code.",
          "Quality and tidiness of the electronics wiring shown in the photograph."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This is the moment of truth! Project 3 is about system integration. You'll bring together the mechanical hand, the power and control electronics, and the software you've developed to create a complete, functioning robotic system for the first time. The goal is to demonstrate that your hand can perform basic, pre-programmed gestures reliably."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Achieve a fully integrated and working robotic hand."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Demonstrate the value of the previous design and calibration steps."
                      }
                    ]
                  }
                ]
              },
              {
                "type":="listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a solid foundation for adding more advanced control in the final week."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Getting Started"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Final Checks:"
                      },
                      {
                        "type": "text",
                        "text": " Double-check all your wiring. Ensure the common ground is connected and the external power supply is plugged in BEFORE you upload code."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Add More Gestures:"
                      },
                      {
                        "type": "text",
                        "text": " In your code, create a new function called `point()`. In this function, set the index finger servo to its 'open' position and the other three servos to their 'closed' positions. You might need to experiment with the angles."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Create a Sequence:"
                      },
                      {
                        "type": "text",
                        "text": " In your `loop()` function, call your gesture functions in sequence with delays in between. For example: `openHand()`, `delay(1000)`, `closeHand()`, `delay(1000)`, `point()`, `delay(2000)`."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Record and Document:"
                      },
                      {
                        "type": "text",
                        "text": " Once everything is working smoothly, record your video, take a photo of your wiring, and save your final code."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Congratulations! You have built a fully functional robotic hand. This project is a major accomplishment and serves as a testament to the systematic design, build, and test process you've followed."
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "System Integration in Robotics - Overview",
          "url": "https://www.therobotreport.com/4-best-practices-for-robot-systems-integration/"
        },
        {
          "title": "Commenting and Documenting Code",
          "url": "https://www.freecodecamp.org/news/how-to-write-good-code-a-guide-to-making-your-code-readable-and-maintainable/"
        },
        {
          "title": "10 Arduino Projects with Servo Motors (for inspiration)",
          "url": "https://www.youtube.com/watch?v=f2-l9a-5A8E"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 24,
      "title": "Introduction to Inverse Kinematics (IK)",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "We've mastered telling the hand what angles to go to. But what if we want to tell it *where* to put its fingertip? This is the challenge of Inverse Kinematics (IK). It's the opposite of FK: given a desired end-effector position (x, y, z), what are the joint angles required to get there? This is a much harder problem, but it's the key to more intelligent robotic manipulation."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Define Inverse Kinematics and its importance in robotics."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the difference between analytical and numerical IK solutions."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Recognize challenges of IK, such as multiple solutions and singularities."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Analytical vs. Numerical Solutions"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Analytical IK:"
              },
              {
                "type": "text",
                "text": " For simple robots (like a 2-joint arm), you can solve the geometric equations directly to find a formula for the angles. This is fast and precise. For our 1-DOF fingers, this is trivial."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Numerical IK:"
              },
              {
                "type": "text",
                "text": " For complex robots, finding a direct formula is often impossible. Instead, numerical methods are used. These are iterative algorithms that 'guess' a set of angles, check how close the fingertip is to the target using FK, and then adjust the guess to get closer, repeating until the error is small enough. A common algorithm is called Cyclic Coordinate Descent (CCD)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Challenges of IK"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Multiple Solutions:"
                      },
                      {
                        "type": "text",
                        "text": " Often, there are multiple ways for a robot to reach the same point (e.g., 'elbow up' or 'elbow down'). The IK solver has to choose one."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "No Solution:"
                      },
                      {
                        "type": "text",
                        "text": " If you ask the hand to reach a point that is physically impossible (too far away), there is no solution."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Singularities:"
                      },
                      {
                        "type": "text",
                        "text": " These are specific configurations (e.g., the arm is fully stretched out) where the robot loses a degree of freedom, and the IK math can become unstable."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Inverse Kinematics (IK) calculates joint angles from a target position."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "It's more complex than FK but enables more intelligent control."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "For our simple 1-DOF fingers, the IK problem is straightforward, but the concepts are important for future projects."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Inverse Kinematics - A Deeper Dive (Video)",
          "url": "https://www.youtube.com/watch?v=Oveb4_QY3Gg"
        },
        {
          "title": "Cyclic Coordinate Descent (CCD) for IK - A Visual Explanation",
          "url": "https://zalo.github.io/blog/inverse-kinematics/"
        },
        {
          "title": "Introduction to Inverse Kinematics with a 2-DOF Robotic Arm - MATLAB",
          "url": "https://www.mathworks.com/help/robotics/ug/introduction-to-inverse-kinematics-with-a-2-dof-robotic-arm.html"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 25,
      "title": "Implementing a Simple IK Solver",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Since our fingers are simple 1-DOF systems, we can implement a very simple analytical IK solver. Our 'solver' will essentially be a function that takes a desired 'closedness' (e.g., a percentage from 0% to 100%) and converts it into the correct servo angle using the calibration data we collected."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a function that accepts a percentage (0-100) as input."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Use the `map()` function to convert the percentage to a servo angle."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Update the main loop to control the hand using percentage-based commands."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Abstraction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "We are creating a higher level of abstraction. Instead of thinking in terms of raw servo angles (e.g., 'set finger 2 to 142 degrees'), we can now think in more intuitive terms (e.g., 'set finger 2 to 75% closed'). This makes the control logic much easier to write and understand."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Mapping Percentages"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The `map()` function is perfect for this. We want to map the input range of 0-100 (our percentage) to the output range of `minAngle` to `maxAngle` (our calibrated servo limits)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Example Code"
              }
            ]
          },
          {
            "type": "codeBlock",
            "attrs": {
              "language": "cpp"
            },
            "content": [
              {
                "type": "text",
                "text": "/* ... (include servo library, define servos and pins, etc.) ... */\n\nint minAngles[NUM_SERVOS] = {15, 12, 18, 14};\nint maxAngles[NUM_SERVOS] = {160, 165, 158, 162};\n\n// Our simple IK solver function\nvoid setFingerClosed(int fingerIndex, int percentage) {\n  // Constrain percentage to be between 0 and 100\n  percentage = constrain(percentage, 0, 100);\n  \n  // Map the 0-100% range to the calibrated angle range for that specific finger\n  int angle = map(percentage, 0, 100, minAngles[fingerIndex], maxAngles[fingerIndex]);\n  \n  servos[fingerIndex].write(angle);\n}\n\nvoid setup() {\n  /* ... (attach servos) ... */\n}\n\nvoid loop() {\n  // Close finger 0 (index) to 50%\n  setFingerClosed(0, 50);\n  delay(1000);\n\n  // Close finger 0 to 100%\n  setFingerClosed(0, 100);\n  delay(1000);\n\n  // Open finger 0\n  setFingerClosed(0, 0);\n  delay(1000);\n}"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We created a simple but effective IK solver for our hand."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "This abstracts away the raw servo angles, allowing for more intuitive control."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The `map()` function, combined with our calibration data, is the core of this solver."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino constrain() Function Reference",
          "url": "https://www.arduino.cc/reference/en/language/functions/math/constrain/"
        },
        {
          "title": "Abstraction in Programming - GeeksForGeeks",
          "url": "https://www.geeksforgeeks.org/abstraction-in-c/"
        },
        {
          "title": "Inverse Kinematics for a 1-DOF system (Conceptual)",
          "url": "https://robotics.stackexchange.com/questions/1893/inverse-kinematics-of-1-dof-robotic-arm"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 26,
      "title": "Integrating Sensor Feedback for Closed-Loop Control",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Our hand currently operates in 'open-loop' - it sends a command and assumes it was executed correctly. By adding sensors, we can create a 'closed-loop' system that can react to its environment. Today, we'll explore how to add a sensor (like a flex sensor or a simple button on the fingertip) to detect when the hand has successfully grasped an object."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Differentiate between open-loop and closed-loop control."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Wire a simple tactile switch (button) to an Arduino digital input."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Write code to stop a finger from closing when the switch is pressed."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Open-Loop Control:"
              },
              {
                "type": "text",
                "text": " The controller sends a command to the actuator. There is no feedback to confirm the result. Example: `myServo.write(90);`. The system doesn't know if the servo actually reached 90 degrees or if something blocked it."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Closed-Loop Control:"
              },
              {
                "type": "text",
                "text": " The controller sends a command, and a sensor provides feedback about the result. The controller can then adjust its command based on this feedback. Example: 'Close finger until the fingertip sensor is triggered, then stop'."
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Tactile Switches:"
              },
              {
                "type": "text",
                "text": " A simple button is a great tactile sensor. We can mount a small pushbutton switch on a fingertip. When the finger touches an object, the button is pressed. We can read the state of this button using a digital input pin on the Arduino (`digitalRead()`)."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Closed-loop control uses sensor feedback to make a system more intelligent."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A simple button can act as a tactile sensor to detect when an object is grasped."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "This allows the hand to apply just enough force to hold an object without crushing it."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Open-Loop vs. Closed-Loop Control Systems - NI",
          "url": "https://www.ni.com/en/innovations/white-papers/06/closed-loop-control.html"
        },
        {
          "title": "Arduino Digital Read (Button Tutorial)",
          "url": "https://docs.arduino.cc/learn/digital-io/digital-input-pullup"
        },
        {
          "title": "Tactile Sensors for Robotic Grippers - A Review",
          "url": "https://www.mdpi.com/1424-8220/20/10/2941"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 27,
      "title": "Creating a Higher-Level Control Interface",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "So far, our hand's actions are hard-coded in the `loop()` function. To make it truly interactive, we need a way to send it commands on the fly. Today, we'll create a simple control interface using the Arduino Serial Monitor, allowing us to type commands to control the hand in real-time."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Read incoming string data from the Serial Monitor."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Parse commands from the received string (e.g., 'close 2 80')."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Call the appropriate control functions based on the parsed command."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Serial Communication Protocol"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "We need to define a simple 'language' or protocol for our commands. A good format might be `COMMAND TARGET VALUE`. For example:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "move 2 80"
                      },
                      {
                        "type": "text",
                        "text": " - Move finger 2 to 80% closed."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "open"
                      },
                      {
                        "type": "text",
                        "text": " - Call the `openHand()` function."
                      }
                    ]
                  }
                ]
              },
              {
                "type":="listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "code"
                          }
                        ],
                        "text": "close"
                      },
                      {
                        "type": "text",
                        "text": " - Call the `closeHand()` function."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Parsing Serial Data"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Inside the `loop()` function, you check if there is data available using `Serial.available()`. If there is, you can read it into a String object using `Serial.readString()`. Then, you can use String manipulation functions like `indexOf()` and `substring()` to pull out the command, target, and value."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A serial command interface allows for real-time, interactive control of the robot."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "We defined a simple command protocol and discussed how to parse it in Arduino."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "This decouples the control logic from a fixed sequence in the main loop."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "Arduino Serial Read String Tutorial",
          "url": "https://www.arduino.cc/reference/en/language/functions/communication/serial/readstring/"
        },
        {
          "title": "Arduino String Object Reference",
          "url": "https://www.arduino.cc/reference/en/language/variables/data-types/stringobject/"
        },
        {
          "title": "Serial Communication between Python and Arduino",
          "url": "https://www.youtube.com/watch?v=DJD28uK5qIk"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 28,
      "title": "System Integration and Debugging",
      "is_project_day": false,
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This is a 'flex' day dedicated to putting all the recent concepts together and fixing the inevitable bugs. The goal is to integrate the serial command interface, the percentage-based IK solver, and the closed-loop sensor logic into one cohesive, well-functioning program. Debugging will be a major focus."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Combine multiple software modules into a single application."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Practice systematic debugging techniques."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Refine the overall performance and reliability of the robotic hand."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Debugging Strategies"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Isolate the Problem:"
                      },
                      {
                        "type": "text",
                        "text": " Is the issue mechanical, electrical, or software? If a finger isn't moving, check the wiring first. If the wiring is good, check the mechanical linkage. If that's good, then dive into the code."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Serial Prints are Your Eyes:"
                      },
                      {
                        "type": "text",
                        "text": " You can't see the value of a variable inside the Arduino. Use `Serial.println()` at every step of your logic to see what the code is actually doing. Print out the command you received, the parsed values, the calculated angle, etc."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "text": "Comment Out Code:"
                      },
                      {
                        "type": "text",
                        "text": " If a new feature is causing problems, temporarily disable it by 'commenting it out' (putting `//` in front of the lines). Does the problem go away? If so, you've found the source."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Today's Task"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Your main task is to create one final, clean sketch that incorporates all the advanced features we've discussed. The hand should be controllable via serial commands, use the percentage-based IK solver, and ideally, incorporate sensor feedback to stop a grasp. Spend the time to make it work reliably."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "System integration is where complex projects come together."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Effective debugging is a critical and learnable skill."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "The goal is a single, robust, and feature-complete control program for the final project."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "A Guide to Debugging in Arduino",
          "url": "https://www.instructables.com/A-Guide-to-Debugging-in-Arduino/"
        },
        {
          "title": "Common Arduino Errors and How to Fix Them",
          "url": "https://www.makeuseof.com/tag/8-common-arduino-errors-beginners/"
        },
        {
          "title": "Software Integration Testing Strategies",
          "url": "https://www.browserstack.com/guide/what-is-integration-testing"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 29,
      "title": "Refinement and Documentation",
      "is_project_day": false,
      "content": {
        "type":="doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "The final project is tomorrow. Today is about putting the finishing touches on your work. This includes cleaning up the physical build, improving the code's comments and readability, and preparing the documentation needed for the final submission. A well-documented project is a successful project."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Learning Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Understand the importance of project documentation."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Add comprehensive comments to your Arduino code."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Create a brief 'User Manual' for your robotic hand."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Key Concepts"
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Code Commenting"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Good comments don't explain *what* the code does (the code itself does that). They explain *why*. Why did you choose this value? What is the purpose of this function? What does this complex line of code accomplish? Your code should be understandable to another person, or to yourself six months from now."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 4
            },
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Project Documentation"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "This is the story of your project. For our final project, this will be a simple text file (`README.md` is a great format). It should include:"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A brief description of the project."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Instructions on how to use it (the 'User Manual'). This should list the serial commands you implemented."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A list of the hardware components used (your BOM)."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "A brief reflection on challenges and what you learned."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Summary"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Documentation is a critical part of the engineering process."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Clean up your code with comments and your physical build with good cable management."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Prepare your final documentation for tomorrow's project submission."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "How to Write a Good README",
          "url": "https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/"
        },
        {
          "title": "The Art of Commenting - Stack Overflow",
          "url": "https://stackoverflow.blog/2021/12/23/the-art-of-commenting/"
        },
        {
          "title": "GitHub - A Place to Host Your Project and Documentation",
          "url": "https://github.com/"
        }
      ],
      "estimated_hours": 2.0
    },
    {
      "day_number": 30,
      "title": "Project 4: Final Demonstration and Documentation",
      "is_project_day": true,
      "project_data": {
        "title": "Project 4: Final Demonstration and Documentation",
        "description": "The final capstone project. You will showcase your completed robotic hand, demonstrating its full capabilities through the serial command interface. This project combines the physical artifact with comprehensive documentation that explains its design, functionality, and the process of its creation.",
        "objectives": [
          "Demonstrate real-time control of the robotic hand using your serial interface.",
          "Showcase a variety of simple and complex gestures.",
          "Successfully grasp and release a simple object (e.g., a soda can, a small ball).",
          "Submit a complete and professional documentation package for the project."
        ],
        "requirements": [
          "Your fully assembled, wired, and programmed robotic hand.",
          "A computer with the Arduino IDE and Serial Monitor.",
          "A simple object to be grasped (e.g., empty water bottle).",
          "All final documentation files (code, README, BOM)."
        ],
        "deliverables": [
          "A comprehensive project video (1-3 minutes) that includes: a brief overview of the hand, a demonstration of controlling individual fingers via serial commands, a demonstration of pre-programmed gestures, and at least one successful grasp-and-release of an object.",
          "A single ZIP file containing: your final, commented Arduino sketch (.ino), your Bill of Materials spreadsheet, your CAD files (STL or STEP), and a README.md file that serves as the project's main documentation and user manual."
        ],
        "evaluation_criteria": [
          "Functionality and reliability of the hand as demonstrated in the video.",
          "Effectiveness of the grasp-and-release demonstration.",
          "Completeness, clarity, and professionalism of the documentation package.",
          "Overall quality and execution of the project from concept to completion."
        ]
      },
      "content": {
        "type": "doc",
        "content": [
          {
            "type": "heading",
            "attrs": {
              "level": 2
            },
            "content": [
              {
                "type": "text",
                "text": "Project Introduction"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Welcome to the final day! This capstone project is the culmination of 30 days of learning and building. It's your opportunity to showcase everything you've accomplished. The goal is to present not just a working robot, but a complete project, supported by clear demonstrations and thorough documentation."
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Project Objectives"
              }
            ]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Demonstrate mastery of the core concepts of the curriculum."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Practice communication skills by creating a clear and compelling project video."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Produce a final, polished artifact and documentation package."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Filming Your Demonstration"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Plan your video. A good structure is:"
              }
            ]
          },
          {
            "type": "orderedList",
            "content": [
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Introduction: Briefly introduce yourself and the project."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Interactive Control: Show your screen with the Serial Monitor next to the hand. Type a command and show the hand responding."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Grasp Test: The main event! Show the hand closing on an object, holding it securely, and then releasing it."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "listItem",
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Conclusion: Briefly mention what you learned or what you might do next."
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {
              "level": 3
            },
            "content": [
              {
                "type": "text",
                "text": "Final Submission"
              }
            ]
          },
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "text": "Gather all your deliverable files: the video, the code, the BOM, the CAD files, and the README. Put them all into a single .zip file for submission. Double-check that you've included everything. Congratulations on completing the RoboHand curriculum!"
              }
            ]
          }
        ]
      },
      "resources": [
        {
          "title": "How to Make a Great Project Demo Video",
          "url": "https://www.youtube.com/watch?v=pva780i8iA4"
        },
        {
          "title": "Open Broadcaster Software (OBS) - Free screen recording software",
          "url": "https://obsproject.com/"
        },
        {
          "title": "How to Create a ZIP file on Windows/Mac",
          "url": "https://www.hellotech.com/guide/for/how-to-zip-a-file-on-windows-10-or-mac"
        }
      ],
      "estimated_hours": 2.0
    }
  ]
}
```
--- End of Response ---

